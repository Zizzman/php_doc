{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"%28php%29/","title":"FOLDER","text":"<p>[[Symfony doc]] [[(phpsymfony)]] [[(doc)]] [[(outils)]]</p> <p>[[list]] [[PHP Cheatsheet]] [[php react]] [[php react mongodb]]</p>"},{"location":"PHP%20Cheatsheet/","title":"PHP Cheatsheet","text":""},{"location":"PHP%20Cheatsheet/#php-cheatsheet","title":"PHP Cheatsheet","text":""},{"location":"PHP%20Cheatsheet/#chapitre-1-php","title":"Chapitre 1 : PHP","text":""},{"location":"PHP%20Cheatsheet/#11-syntaxe-de-base","title":"1.1 Syntaxe de base","text":"<pre><code>&lt;?php\necho \"Hello, World!\";\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#12-variables","title":"1.2 Variables","text":"<pre><code>&lt;?php\n$name = \"John\";\n$age = 30;\n$is_active = true;\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#13-types-de-donnees","title":"1.3 Types de donn\u00e9es","text":"<pre><code>&lt;?php\n$string = \"Hello\";\n$integer = 42;\n$float = 3.14;\n$boolean = true;\n$array = array(\"apple\", \"banana\", \"cherry\");\n$null = null;\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#14-constantes","title":"1.4 Constantes","text":"<pre><code>&lt;?php\ndefine(\"SITE_NAME\", \"My Website\");\necho SITE_NAME;\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#15-structures-de-controle","title":"1.5 Structures de contr\u00f4le","text":"<ul> <li>If-Else</li> </ul> <pre><code>&lt;?php\n$age = 20;\nif ($age &gt;= 18) {\n    echo \"Adult\";\n} else {\n    echo \"Minor\";\n}\n?&gt;\n</code></pre> <ul> <li>Switch</li> </ul> <pre><code>&lt;?php\n$day = \"Monday\";\nswitch ($day) {\n    case \"Monday\":\n        echo \"Start of the week\";\n        break;\n    case \"Friday\":\n        echo \"End of the week\";\n        break;\n    default:\n        echo \"Midweek\";\n}\n?&gt;\n</code></pre> <ul> <li>Boucles</li> </ul> <pre><code>&lt;?php\n// For Loop\nfor ($i = 0; $i &lt; 5; $i++) {\n    echo $i;\n}\n\n// While Loop\n$i = 0;\nwhile ($i &lt; 5) {\n    echo $i;\n    $i++;\n}\n\n// Do-While Loop\n$i = 0;\ndo {\n    echo $i;\n    $i++;\n} while ($i &lt; 5);\n\n// Foreach Loop\n$fruits = array(\"apple\", \"banana\", \"cherry\");\nforeach ($fruits as $fruit) {\n    echo $fruit;\n}\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#16-fonctions","title":"1.6 Fonctions","text":"<pre><code>&lt;?php\nfunction greet($name) {\n    return \"Hello, \" . $name;\n}\necho greet(\"Alice\");\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#17-tableaux","title":"1.7 Tableaux","text":"<ul> <li>Tableaux index\u00e9s</li> </ul> <pre><code>&lt;?php\n$fruits = array(\"apple\", \"banana\", \"cherry\");\necho $fruits[1]; // banana\n?&gt;\n</code></pre> <ul> <li>Tableaux associatifs</li> </ul> <pre><code>&lt;?php\n$person = array(\"name\" =&gt; \"John\", \"age\" =&gt; 30);\necho $person[\"name\"]; // John\n?&gt;\n</code></pre> <ul> <li>Tableaux multidimensionnels</li> </ul> <pre><code>&lt;?php\n$people = array(\n    array(\"name\" =&gt; \"John\", \"age\" =&gt; 30),\n    array(\"name\" =&gt; \"Alice\", \"age\" =&gt; 25)\n);\necho $people[1][\"name\"]; // Alice\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#18-superglobales","title":"1.8 Superglobales","text":"<pre><code>&lt;?php\n// $_GET\necho $_GET['name'];\n\n// $_POST\necho $_POST['name'];\n\n// $_SERVER\necho $_SERVER['HTTP_HOST'];\n\n// $_SESSION\nsession_start();\n$_SESSION['user'] = \"John\";\n\n// $_COOKIE\nsetcookie(\"user\", \"John\", time() + (86400 * 30), \"/\"); // 86400 = 1 day\necho $_COOKIE['user'];\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#19-gestion-des-erreurs","title":"1.9 Gestion des erreurs","text":"<pre><code>&lt;?php\n// Try-Catch\ntry {\n    $num = 2 / 0;\n} catch (Exception $e) {\n    echo 'Caught exception: ',  $e-&gt;getMessage(), \"\\n\";\n}\n\n// Custom Error Handler\nfunction customError($errno, $errstr) {\n    echo \"Error: [$errno] $errstr\";\n}\nset_error_handler(\"customError\");\necho($test);\n?&gt;\n</code></pre>"},{"location":"PHP%20Cheatsheet/#conclusion","title":"Conclusion","text":"<p>En suivant ces \u00e9tapes, vous pouvez int\u00e9grer un backend PHP avec MongoDB \u00e0 un frontend React.js. Utilisez ce document comme r\u00e9f\u00e9rence rapide et guide pratique pour vos projets.</p> <p>docker compose exec -it web php bin/console c:c</p>"},{"location":"PHP%20Cheatsheet/#print","title":"print","text":"<p>dd($user);</p>"},{"location":"PHP%20Cheatsheet/#show-routes","title":"show routes","text":"<p>docker compose exec -it web php bin/console debug:router</p>"},{"location":"php%20react%20mongodb/","title":"PHP React MongoDB","text":""},{"location":"php%20react%20mongodb/#php-avec-mongodb-et-reactjs","title":"PHP avec MongoDB et React.js","text":""},{"location":"php%20react%20mongodb/#21-installer-mongodb-php-driver","title":"2.1 Installer MongoDB PHP Driver","text":"<pre><code># Installer MongoDB PHP Extension\nsudo pecl install mongodb\n</code></pre> <p>Ajoutez ensuite l'extension \u00e0 votre fichier <code>php.ini</code> :</p> <pre><code>extension=mongodb.so\n</code></pre>"},{"location":"php%20react%20mongodb/#22-connexion-a-mongodb","title":"2.2 Connexion \u00e0 MongoDB","text":"<pre><code>&lt;?php\nrequire 'vendor/autoload.php'; // include Composer's autoloader\n\n$client = new MongoDB\\Client(\"mongodb://localhost:27017\");\n$collection = $client-&gt;mydatabase-&gt;mycollection;\n\necho \"Connected to MongoDB\";\n?&gt;\n</code></pre>"},{"location":"php%20react%20mongodb/#23-operations-crud","title":"2.3 Op\u00e9rations CRUD","text":"<ul> <li>Cr\u00e9er un document</li> </ul> <pre><code>&lt;?php\n$document = array(\n    \"name\" =&gt; \"Alice\",\n    \"age\" =&gt; 25,\n    \"email\" =&gt; \"alice@example.com\"\n);\n\n$insertResult = $collection-&gt;insertOne($document);\necho \"Inserted with Object ID '{$insertResult-&gt;getInsertedId()}'\";\n?&gt;\n</code></pre> <ul> <li>Lire des documents</li> </ul> <pre><code>&lt;?php\n$cursor = $collection-&gt;find();\nforeach ($cursor as $document) {\n    echo $document[\"name\"], \"\\n\";\n}\n?&gt;\n</code></pre> <ul> <li>Mettre \u00e0 jour un document</li> </ul> <pre><code>&lt;?php\n$updateResult = $collection-&gt;updateOne(\n    ['name' =&gt; 'Alice'],\n    ['$set' =&gt; ['age' =&gt; 26]]\n);\necho \"Matched {$updateResult-&gt;getMatchedCount()} document(s)\\n\";\necho \"Modified {$updateResult-&gt;getModifiedCount()} document(s)\\n\";\n?&gt;\n</code></pre> <ul> <li>Supprimer un document</li> </ul> <pre><code>&lt;?php\n$deleteResult = $collection-&gt;deleteOne(['name' =&gt; 'Alice']);\necho \"Deleted {$deleteResult-&gt;getDeletedCount()} document(s)\\n\";\n?&gt;\n</code></pre>"},{"location":"php%20react%20mongodb/#24-utiliser-php-avec-reactjs","title":"2.4 Utiliser PHP avec React.js","text":"<p>Structure du projet</p> <pre><code>my-project/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 vendor/\n\u2502   \u251c\u2500\u2500 getData.php\n\u2502   \u2514\u2500\u2500 composer.json\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 App.js\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u251c\u2500   \u2500 package.json\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Backend en PHP</p> <ul> <li>Cr\u00e9er un fichier <code>composer.json</code></li> </ul> <pre><code>{\n  \"require\": {\n    \"mongodb/mongodb\": \"^1.8\"\n  }\n}\n</code></pre> <ul> <li>Installer les d\u00e9pendances</li> </ul> <pre><code>cd backend\ncomposer install\n</code></pre> <ul> <li>Cr\u00e9er un fichier <code>getData.php</code></li> </ul> <pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n\n$client = new MongoDB\\Client(\"mongodb://localhost:27017\");\n$collection = $client-&gt;mydatabase-&gt;mycollection;\n\n$data = $collection-&gt;find()-&gt;toArray();\necho json_encode($data);\n?&gt;\n</code></pre> <ul> <li>D\u00e9marrer le serveur PHP</li> </ul> <pre><code>cd backend\nphp -S localhost:8000\n</code></pre> <p>Frontend en React.js</p> <ul> <li>Cr\u00e9er une application React</li> </ul> <pre><code>npx create-react-app frontend\n</code></pre> <ul> <li>Installer Axios pour les requ\u00eates HTTP</li> </ul> <pre><code>cd frontend\nnpm install axios\n</code></pre> <ul> <li>Cr\u00e9er un composant React pour afficher les donn\u00e9es</li> </ul> <pre><code>import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() =&gt; {\n    axios.get('http://localhost:8000/getData.php')\n      .then(response =&gt; {\n        setData(response.data);\n      })\n      .catch(error =&gt; {\n        console.error(\"There was an error fetching the data!\", error);\n      });\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Data from MongoDB&lt;/h1&gt;\n      &lt;ul&gt;\n        {data.map(item =&gt; (\n          &lt;li key={item._id}&gt;{item.name} - {item.age} - {item.email}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>D\u00e9marrer le serveur React</li> </ul> <pre><code>npm start\n</code></pre>"},{"location":"php%20react/","title":"PHP React","text":""},{"location":"php%20react/#1-configuration-de-base","title":"1. Configuration de base","text":""},{"location":"php%20react/#installer-nodejs-et-npm","title":"Installer Node.js et npm","text":"<pre><code># V\u00e9rifier si node et npm sont install\u00e9s\nnode -v\nnpm -v\n\n# Si non install\u00e9s, les installer\n# https://nodejs.org/\n</code></pre>"},{"location":"php%20react/#initialiser-un-projet-react","title":"Initialiser un projet React","text":"<pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre>"},{"location":"php%20react/#configurer-un-serveur-php","title":"Configurer un serveur PHP","text":"<pre><code># Cr\u00e9ez un serveur PHP avec un fichier index.php\n&lt;?php\necho \"Hello from PHP!\";\n?&gt;\n# D\u00e9marrer le serveur PHP\nphp -S localhost:8000\n</code></pre>"},{"location":"php%20react/#2-communication-entre-php-et-react","title":"2. Communication entre PHP et React","text":""},{"location":"php%20react/#exemple-de-fetch-depuis-react","title":"Exemple de fetch depuis React","text":"<pre><code>// App.js\n\nimport React, { useEffect, useState } from 'react';\n\nfunction App() {\n    const [data, setData] = useState(null);\n\n    useEffect(() =&gt; {\n        fetch('http://localhost:8000/api/data.php')\n            .then(response =&gt; response.json())\n            .then(data =&gt; setData(data));\n    }, []);\n\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;header className=\"App-header\"&gt;\n                {data ? &lt;p&gt;{data.message}&lt;/p&gt; : &lt;p&gt;Loading...&lt;/p&gt;}\n            &lt;/header&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>"},{"location":"php%20react/#exemple-de-fichier-php-pour-fournir-des-donnees","title":"Exemple de fichier PHP pour fournir des donn\u00e9es","text":"<pre><code>// api/data.php\n\n&lt;?php\n$data = array(\"message\" =&gt; \"Hello from PHP!\");\necho json_encode($data);\n?&gt;\n</code></pre>"},{"location":"php%20react/#3-envoyer-des-donnees-de-react-a-php","title":"3. Envoyer des donn\u00e9es de React \u00e0 PHP","text":""},{"location":"php%20react/#exemple-de-formulaire-react","title":"Exemple de formulaire React","text":"<pre><code>// App.js\n\nimport React, { useState } from 'react';\n\nfunction App() {\n    const [name, setName] = useState('');\n\n    const handleSubmit = (event) =&gt; {\n        event.preventDefault();\n        fetch('http://localhost:8000/api/submit.php', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ name: name }),\n        })\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            console.log('Success:', data);\n        });\n    };\n\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;form onSubmit={handleSubmit}&gt;\n                &lt;input\n                    type=\"text\"\n                    value={name}\n                    onChange={(e) =&gt; setName(e.target.value)}\n                /&gt;\n                &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>"},{"location":"php%20react/#exemple-de-fichier-php-pour-traiter-les-donnees","title":"Exemple de fichier PHP pour traiter les donn\u00e9es","text":"<pre><code>// api/submit.php\n\n&lt;?php\n// R\u00e9cup\u00e9rer le JSON POST\u00e9\n$postData = file_get_contents(\"php://input\");\n$request = json_decode($postData);\n\n// Processus de traitement\n$response = array(\"message\" =&gt; \"Hello, \" . $request-&gt;name);\necho json_encode($response);\n?&gt;\n</code></pre>"},{"location":"php%20react/#4-utiliser-react-avec-un-backend-php","title":"4. Utiliser React avec un backend PHP","text":""},{"location":"php%20react/#structure-du-projet","title":"Structure du projet","text":"<pre><code>my-app/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.js\n\u2502   \u2514\u2500\u2500 index.js\n\u2514\u2500\u2500 api/\n    \u2514\u2500\u2500 data.php\n</code></pre>"},{"location":"php%20react/#exemple-de-configuration-webpack-pour-proxy","title":"Exemple de configuration Webpack pour proxy","text":"<pre><code>// setupProxy.js\n\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nmodule.exports = function(app) {\n    app.use(\n        '/api',\n        createProxyMiddleware({\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n        })\n    );\n};\n</code></pre>"},{"location":"php%20react/#5-gestion-des-routes-avec-react-router-et-php","title":"5. Gestion des routes avec React Router et PHP","text":""},{"location":"php%20react/#installation-de-react-router","title":"Installation de React Router","text":"<pre><code>npm install react-router-dom\n</code></pre>"},{"location":"php%20react/#exemple-de-react-router","title":"Exemple de React Router","text":"<pre><code>// App.js\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\n\nfunction App() {\n    return (\n        &lt;Router&gt;\n            &lt;Switch&gt;\n                &lt;Route exact path=\"/\" component={Home} /&gt;\n                &lt;Route path=\"/about\" component={About} /&gt;\n            &lt;/Switch&gt;\n        &lt;/Router&gt;\n    );\n}\n\nexport default App;\n</code></pre>"},{"location":"php%20react/#exemple-de-fichiers-php-pour-les-routes","title":"Exemple de fichiers PHP pour les routes","text":"<pre><code>// index.php\n\n&lt;?php\n$request = $_SERVER['REQUEST_URI'];\n\nswitch ($request) {\n    case '/' :\n        require __DIR__ . '/index.html';\n        break;\n    case '' :\n        require __DIR__ . '/index.html';\n        break;\n    case '/about' :\n        require __DIR__ . '/index.html';\n        break;\n    default:\n        http_response_code(404);\n        require __DIR__ . '/404.html';\n        break;\n}\n?&gt;\n</code></pre>"},{"location":"php%20react/#6-conclusion","title":"6. Conclusion","text":"<p>Ce cheatsheet couvre les bases de l'utilisation de PHP avec React. Pour des projets plus complexes, il est recommand\u00e9 de se familiariser davantage avec les concepts avanc\u00e9s et les meilleures pratiques en mati\u00e8re de d\u00e9veloppement web.</p>"},{"location":"doc/%28doc%29/","title":"FOLDER","text":"<p>[[array_uintersect]] [[Fichiers en PHP]] [[Gestion des Dates et Heures en PHP]] [[getProjectDir()]] [[String PHP]] [[Tableaux en PHP]] [[02 - AREAS/informatique/dev/dev_langage/scripting/PHP/doc/try catch|try catch]]</p>"},{"location":"doc/Fichiers%20en%20PHP/","title":"Gestion des Fichiers","text":"<p>La gestion des fichiers est une fonctionnalit\u00e9 essentielle pour de nombreuses applications. PHP fournit des fonctions puissantes pour lire, \u00e9crire, cr\u00e9er, et manipuler des fichiers et des r\u00e9pertoires. Voici une documentation compl\u00e8te avec des exemples pratiques pour comprendre et utiliser ces fonctionnalit\u00e9s.</p>"},{"location":"doc/Fichiers%20en%20PHP/#1-fopen","title":"1. <code>fopen()</code>","text":"<p>Ouvre un fichier ou cr\u00e9e un fichier pour \u00eatre manipul\u00e9.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe","title":"Syntaxe :","text":"<pre><code>resource fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )\n</code></pre> <ul> <li><code>$filename</code> : Chemin du fichier.</li> <li><code>$mode</code> : Mode d'ouverture du fichier (ex. <code>r</code>, <code>w</code>, <code>a</code>, etc.).</li> </ul>"},{"location":"doc/Fichiers%20en%20PHP/#exemple","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"w\");\nif ($file) {\n    echo \"Fichier ouvert avec succ\u00e8s.\";\n    fclose($file);\n} else {\n    echo \"Impossible d'ouvrir le fichier.\";\n}\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#2-fwrite","title":"2. <code>fwrite()</code>","text":"<p>\u00c9crit des donn\u00e9es dans un fichier ouvert.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_1","title":"Syntaxe :","text":"<pre><code>int fwrite ( resource $handle , string $data [, int $length ] )\n</code></pre> <ul> <li><code>$handle</code> : Le pointeur de fichier obtenu avec <code>fopen()</code>.</li> <li><code>$data</code> : Les donn\u00e9es \u00e0 \u00e9crire.</li> </ul>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_1","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"w\");\nfwrite($file, \"Bonjour, monde !\\n\");\n\nfclose($file);\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#3-fread","title":"3. <code>fread()</code>","text":"<p>Lit le contenu d'un fichier ouvert.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_2","title":"Syntaxe :","text":"<pre><code>string fread ( resource $handle , int $length )\n</code></pre> <ul> <li><code>$length</code> : Nombre d'octets \u00e0 lire.</li> </ul>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_2","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"r\");\n$content = fread($file, filesize(\"example.txt\"));\necho $content;\n\nfclose($file);\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#4-fclose","title":"4. <code>fclose()</code>","text":"<p>Ferme un fichier ouvert.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_3","title":"Syntaxe :","text":"<pre><code>bool fclose ( resource $handle )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_3","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"r\");\n// Lecture ou \u00e9criture\nfclose($file);\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#5-file_get_contents","title":"5. <code>file_get_contents()</code>","text":"<p>Lit tout le contenu d'un fichier en une seule op\u00e9ration.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_4","title":"Syntaxe :","text":"<pre><code>string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = 0 [, int $maxlen ]]]] )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_4","title":"Exemple :","text":"<pre><code>&lt;?php\n$content = file_get_contents(\"example.txt\");\necho $content;\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#6-file_put_contents","title":"6. <code>file_put_contents()</code>","text":"<p>\u00c9crit des donn\u00e9es dans un fichier en une seule op\u00e9ration.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_5","title":"Syntaxe :","text":"<pre><code>int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_5","title":"Exemple :","text":"<pre><code>&lt;?php\nfile_put_contents(\"example.txt\", \"Nouveau contenu\\n\");\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#7-unlink","title":"7. <code>unlink()</code>","text":"<p>Supprime un fichier.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_6","title":"Syntaxe :","text":"<pre><code>bool unlink ( string $filename [, resource $context ] )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_6","title":"Exemple :","text":"<pre><code>&lt;?php\nif (unlink(\"example.txt\")) {\n    echo \"Fichier supprim\u00e9.\";\n} else {\n    echo \"Erreur lors de la suppression.\";\n}\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#8-fgets","title":"8. <code>fgets()</code>","text":"<p>Lit une ligne d'un fichier ouvert.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_7","title":"Syntaxe :","text":"<pre><code>string fgets ( resource $handle [, int $length ] )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_7","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"r\");\nwhile (($line = fgets($file)) !== false) {\n    echo $line;\n}\n\nfclose($file);\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#9-feof","title":"9. <code>feof()</code>","text":"<p>Teste si la fin d'un fichier est atteinte.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_8","title":"Syntaxe :","text":"<pre><code>bool feof ( resource $handle )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_8","title":"Exemple :","text":"<pre><code>&lt;?php\n$file = fopen(\"example.txt\", \"r\");\nwhile (!feof($file)) {\n    $line = fgets($file);\n    echo $line;\n}\n\nfclose($file);\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#10-is_file","title":"10. <code>is_file()</code>","text":"<p>V\u00e9rifie si un chemin correspond \u00e0 un fichier.</p>"},{"location":"doc/Fichiers%20en%20PHP/#syntaxe_9","title":"Syntaxe :","text":"<pre><code>bool is_file ( string $filename )\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#exemple_9","title":"Exemple :","text":"<pre><code>&lt;?php\nif (is_file(\"example.txt\")) {\n    echo \"C'est un fichier.\";\n} else {\n    echo \"Ce n'est pas un fichier.\";\n}\n?&gt;\n</code></pre>"},{"location":"doc/Fichiers%20en%20PHP/#conclusion","title":"Conclusion","text":"<p>La gestion des fichiers en PHP est riche en fonctionnalit\u00e9s et permet de manipuler efficacement des donn\u00e9es stock\u00e9es. En combinant ces fonctions, vous pouvez cr\u00e9er des syst\u00e8mes complexes comme des gestionnaires de fichiers ou des syst\u00e8mes de stockage de donn\u00e9es.</p> <p>Pratiquez chaque fonction pour bien comprendre ses particularit\u00e9s et son comportement dans diff\u00e9rents sc\u00e9narios.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/","title":"Gestion des Dates et Heures","text":"<p>PHP propose des fonctionnalit\u00e9s robustes pour manipuler les dates et heures. Cette documentation d\u00e9taille les fonctions principales avec des exemples pratiques pour vous permettre de travailler efficacement avec des donn\u00e9es temporelles.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#1-date","title":"1. <code>date()</code>","text":"<p>Retourne une cha\u00eene format\u00e9e repr\u00e9sentant la date et l'heure actuelles.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#syntaxe","title":"Syntaxe :","text":"<pre><code>string date ( string $format [, int $timestamp = time() ] )\n</code></pre> <ul> <li><code>$format</code> : Le format de sortie (ex. <code>Y-m-d</code>, <code>H:i:s</code>).</li> <li><code>$timestamp</code> : (Optionnel) L'horodatage Unix \u00e0 formater.</li> </ul>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple","title":"Exemple :","text":"<pre><code>&lt;?php\necho date(\"Y-m-d H:i:s\"); // Ex : 2024-12-22 15:30:45\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#2-time","title":"2. <code>time()</code>","text":"<p>Retourne l'horodatage Unix actuel (le nombre de secondes \u00e9coul\u00e9es depuis le 1er janvier 1970).</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#syntaxe_1","title":"Syntaxe :","text":"<pre><code>int time ( void )\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_1","title":"Exemple :","text":"<pre><code>&lt;?php\necho time(); // Ex : 1734895445\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#3-mktime","title":"3. <code>mktime()</code>","text":"<p>Cr\u00e9e un horodatage Unix pour une date sp\u00e9cifique.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#syntaxe_2","title":"Syntaxe :","text":"<pre><code>int mktime ( int $hour , int $minute , int $second , int $month , int $day , int $year [, int $is_dst ] )\n</code></pre> <ul> <li>Les param\u00e8tres sp\u00e9cifient les composantes de la date.</li> </ul>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_2","title":"Exemple :","text":"<pre><code>&lt;?php\n$timestamp = mktime(0, 0, 0, 12, 25, 2024);\necho date(\"Y-m-d\", $timestamp); // Ex : 2024-12-25\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#4-strtotime","title":"4. <code>strtotime()</code>","text":"<p>Convertit une cha\u00eene de texte en un horodatage Unix.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#syntaxe_3","title":"Syntaxe :","text":"<pre><code>int strtotime ( string $datetime [, int $baseTimestamp = time() ] )\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_3","title":"Exemple :","text":"<pre><code>&lt;?php\n$timestamp = strtotime(\"next Friday\");\necho date(\"Y-m-d\", $timestamp); // Ex : 2024-12-27 (si aujourd'hui est le 22 d\u00e9cembre 2024)\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#5-classe-datetime","title":"5. Classe <code>DateTime</code>","text":"<p>Une classe orient\u00e9e objet pour g\u00e9rer les dates et heures.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#instanciation","title":"Instanciation :","text":"<pre><code>DateTime __construct ([ string $datetime = \"now\" [, DateTimeZone $timezone = NULL ]] )\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_4","title":"Exemple :","text":"<pre><code>&lt;?php\n$date = new DateTime(\"2024-12-25\");\necho $date-&gt;format(\"Y-m-d\"); // Ex : 2024-12-25\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#6-datetimemodify","title":"6. <code>DateTime::modify()</code>","text":"<p>Modifie une date en utilisant des cha\u00eenes relatives (ex. \"+1 day\").</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#syntaxe_4","title":"Syntaxe :","text":"<pre><code>public DateTime DateTime::modify ( string $modifier )\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_5","title":"Exemple :","text":"<pre><code>&lt;?php\n$date = new DateTime(\"2024-12-25\");\n$date-&gt;modify(\"+1 week\");\necho $date-&gt;format(\"Y-m-d\"); // Ex : 2025-01-01\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#7-datetimezone","title":"7. <code>DateTimeZone</code>","text":"<p>Sp\u00e9cifie le fuseau horaire pour une date.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_6","title":"Exemple :","text":"<pre><code>&lt;?php\n$timezone = new DateTimeZone(\"Europe/Paris\");\n$date = new DateTime(\"now\", $timezone);\necho $date-&gt;format(\"Y-m-d H:i:s\");\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#8-date_default_timezone_set-et-date_default_timezone_get","title":"8. <code>date_default_timezone_set()</code> et <code>date_default_timezone_get()</code>","text":"<p>D\u00e9finit ou r\u00e9cup\u00e8re le fuseau horaire par d\u00e9faut.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_7","title":"Exemple :","text":"<pre><code>&lt;?php\ndate_default_timezone_set(\"Europe/Paris\");\necho date(\"Y-m-d H:i:s\"); // Ex : 2024-12-22 15:30:45\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#9-differences-de-dates-datetimediff","title":"9. Diff\u00e9rences de Dates : <code>DateTime::diff()</code>","text":"<p>Calcule la diff\u00e9rence entre deux dates.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_8","title":"Exemple :","text":"<pre><code>&lt;?php\n$date1 = new DateTime(\"2024-12-25\");\n$date2 = new DateTime(\"2025-01-01\");\n$interval = $date1-&gt;diff($date2);\necho $interval-&gt;format(\"%a jours\"); // Ex : 7 jours\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#10-formats-de-dates-personnalises","title":"10. Formats de Dates Personnalis\u00e9s","text":"<p>Les formats accept\u00e9s par <code>date()</code> et <code>DateTime::format()</code>.</p>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_9","title":"Exemple :","text":"<ul> <li><code>Y</code> : Ann\u00e9e compl\u00e8te (ex. 2024).</li> <li><code>m</code> : Mois (ex. 12).</li> <li><code>d</code> : Jour (ex. 22).</li> <li><code>H</code> : Heure (24 heures).</li> <li><code>i</code> : Minutes.</li> <li><code>s</code> : Secondes.</li> </ul>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#exemple_10","title":"Exemple :","text":"<pre><code>&lt;?php\necho date(\"l, d F Y\"); // Ex : Sunday, 22 December 2024\n?&gt;\n</code></pre>"},{"location":"doc/Gestion%20des%20Dates%20et%20Heures%20en%20PHP/#conclusion","title":"Conclusion","text":"<p>La gestion des dates et heures en PHP est flexible et puissante. En combinant des fonctions proc\u00e9durales comme <code>date()</code> et des approches orient\u00e9es objet avec <code>DateTime</code>, vous pouvez r\u00e9pondre \u00e0 tous vos besoins li\u00e9s au temps. Exp\u00e9rimentez ces fonctionnalit\u00e9s pour ma\u00eetriser leur usage !</p>"},{"location":"doc/String%20PHP/","title":"Cha\u00eenes de caract\u00e8res","text":"<p>Les cha\u00eenes de caract\u00e8res sont essentielles en PHP, que ce soit pour manipuler du texte, afficher des donn\u00e9es ou traiter des entr\u00e9es utilisateur. Voici une documentation compl\u00e8te des fonctions de gestion de cha\u00eenes les plus utiles, avec des exemples et des explications.</p>"},{"location":"doc/String%20PHP/#1-strlen","title":"1. <code>strlen()</code>","text":"<p>Calcule la longueur d'une cha\u00eene.</p>"},{"location":"doc/String%20PHP/#syntaxe","title":"Syntaxe :","text":"<pre><code>int strlen ( string $string )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour PHP!\";\n$length = strlen($text);\necho \"La longueur de la cha\u00eene est : $length\";\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>La longueur de la cha\u00eene est : 12\n</code></pre>"},{"location":"doc/String%20PHP/#2-strpos","title":"2. <code>strpos()</code>","text":"<p>Trouve la position de la premi\u00e8re occurrence d'une sous-cha\u00eene dans une cha\u00eene.</p>"},{"location":"doc/String%20PHP/#syntaxe_1","title":"Syntaxe :","text":"<pre><code>int|false strpos ( string $haystack , string $needle [, int $offset = 0 ] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_1","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour PHP!\";\n$position = strpos($text, \"PHP\");\nif ($position !== false) {\n    echo \"'PHP' se trouve \u00e0 la position : $position\";\n} else {\n    echo \"'PHP' n'a pas \u00e9t\u00e9 trouv\u00e9.\";\n}\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>'PHP' se trouve \u00e0 la position : 8\n</code></pre>"},{"location":"doc/String%20PHP/#3-substr","title":"3. <code>substr()</code>","text":"<p>Extrait une partie d'une cha\u00eene.</p>"},{"location":"doc/String%20PHP/#syntaxe_2","title":"Syntaxe :","text":"<pre><code>string substr ( string $string , int $start [, int $length ] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_2","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour PHP!\";\n$sub = substr($text, 8, 3);\necho \"La sous-cha\u00eene extraite est : $sub\";\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>La sous-cha\u00eene extraite est : PHP\n</code></pre>"},{"location":"doc/String%20PHP/#4-strtolower-et-strtoupper","title":"4. <code>strtolower()</code> et <code>strtoupper()</code>","text":"<p>Convertit une cha\u00eene en minuscules ou majuscules.</p>"},{"location":"doc/String%20PHP/#syntaxes","title":"Syntaxes :","text":"<pre><code>string strtolower ( string $string )\nstring strtoupper ( string $string )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_3","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour PHP!\";\necho strtolower($text) . \"\\n\"; // En minuscules\necho strtoupper($text); // En majuscules\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>bonjour php!\nBONJOUR PHP!\n</code></pre>"},{"location":"doc/String%20PHP/#5-trim","title":"5. <code>trim()</code>","text":"<p>Supprime les espaces (ou d'autres caract\u00e8res) au d\u00e9but et \u00e0 la fin d'une cha\u00eene.</p>"},{"location":"doc/String%20PHP/#syntaxe_3","title":"Syntaxe :","text":"<pre><code>string trim ( string $string [, string $characters = \" \\n\\r\\t\\0\\x0B\" ] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_4","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"  Bonjour PHP!  \";\necho \"|\" . trim($text) . \"|\";\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>|Bonjour PHP!|\n</code></pre>"},{"location":"doc/String%20PHP/#6-explode","title":"6. <code>explode()</code>","text":"<p>Divise une cha\u00eene en un tableau selon un d\u00e9limiteur.</p>"},{"location":"doc/String%20PHP/#syntaxe_4","title":"Syntaxe :","text":"<pre><code>array explode ( string $separator , string $string [, int $limit ] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_5","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour,PHP,monde!\";\n$parts = explode(\",\", $text);\nprint_r($parts);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; Bonjour\n    [1] =&gt; PHP\n    [2] =&gt; monde!\n)\n</code></pre>"},{"location":"doc/String%20PHP/#7-implode-alias-join","title":"7. <code>implode()</code> (alias <code>join()</code>)","text":"<p>Concat\u00e8ne les \u00e9l\u00e9ments d'un tableau en une cha\u00eene.</p>"},{"location":"doc/String%20PHP/#syntaxe_5","title":"Syntaxe :","text":"<pre><code>string implode ( string $glue , array $pieces )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_6","title":"Exemple :","text":"<pre><code>&lt;?php\n$parts = [\"Bonjour\", \"PHP\", \"monde!\"];\n$text = implode(\" \", $parts);\necho $text;\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Bonjour PHP monde!\n</code></pre>"},{"location":"doc/String%20PHP/#8-str_replace","title":"8. <code>str_replace()</code>","text":"<p>Remplace toutes les occurrences d'une sous-cha\u00eene par une autre.</p>"},{"location":"doc/String%20PHP/#syntaxe_6","title":"Syntaxe :","text":"<pre><code>string str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_7","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"Bonjour le monde!\";\n$newText = str_replace(\"monde\", \"PHP\", $text);\necho $newText;\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Bonjour le PHP!\n</code></pre>"},{"location":"doc/String%20PHP/#9-htmlspecialchars","title":"9. <code>htmlspecialchars()</code>","text":"<p>Convertit les caract\u00e8res sp\u00e9ciaux en entit\u00e9s HTML pour prot\u00e9ger contre les attaques XSS.</p>"},{"location":"doc/String%20PHP/#syntaxe_7","title":"Syntaxe :","text":"<pre><code>string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") [, bool $double_encode = true ]]] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_8","title":"Exemple :","text":"<pre><code>&lt;?php\n$text = \"&lt;b&gt;Bonjour PHP!&lt;/b&gt;\";\necho htmlspecialchars($text);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>&amp;lt;b&amp;gt;Bonjour PHP!&amp;lt;/b&amp;gt;\n</code></pre>"},{"location":"doc/String%20PHP/#10-json_encode-et-json_decode","title":"10. <code>json_encode()</code> et <code>json_decode()</code>","text":"<p>Encode ou d\u00e9code une cha\u00eene JSON.</p>"},{"location":"doc/String%20PHP/#syntaxes_1","title":"Syntaxes :","text":"<pre><code>string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )\nmixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )\n</code></pre>"},{"location":"doc/String%20PHP/#exemple_9","title":"Exemple :","text":"<pre><code>&lt;?php\n$data = [\"language\" =&gt; \"PHP\", \"type\" =&gt; \"backend\"];\n$json = json_encode($data);\necho $json . \"\\n\";\n\n$array = json_decode($json, true);\nprint_r($array);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>{\"language\":\"PHP\",\"type\":\"backend\"}\nArray\n(\n    [language] =&gt; PHP\n    [type] =&gt; backend\n)\n</code></pre>"},{"location":"doc/String%20PHP/#conclusion","title":"Conclusion","text":"<p>Ces fonctions permettent de manipuler les cha\u00eenes de caract\u00e8res de mani\u00e8re efficace et flexible en PHP. Elles couvrent les cas les plus courants rencontr\u00e9s en programmation, du traitement des entr\u00e9es utilisateur \u00e0 la manipulation des donn\u00e9es.</p> <p>Pratiquez ces fonctions avec des exemples r\u00e9els pour les ma\u00eetriser compl\u00e8tement !</p>"},{"location":"doc/Tableaux%20en%20PHP/","title":"Tableaux en PHP","text":"<p>Les tableaux sont une structure de donn\u00e9es essentielle en PHP, permettant de stocker et de manipuler des collections de valeurs. Voici une documentation compl\u00e8te des fonctions de gestion des tableaux les plus importantes, avec des exemples et des explications.</p>"},{"location":"doc/Tableaux%20en%20PHP/#1-array_push","title":"1. <code>array_push()</code>","text":"<p>Ajoute un ou plusieurs \u00e9l\u00e9ments \u00e0 la fin d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe","title":"Syntaxe :","text":"<pre><code>int array_push ( array &amp;$array , mixed ...$values )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple","title":"Exemple :","text":"<pre><code>&lt;?php\n$fruits = [\"pomme\", \"banane\"];\narray_push($fruits, \"orange\", \"ananas\");\nprint_r($fruits);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; pomme\n    [1] =&gt; banane\n    [2] =&gt; orange\n    [3] =&gt; ananas\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#2-array_pop","title":"2. <code>array_pop()</code>","text":"<p>Supprime et retourne le dernier \u00e9l\u00e9ment d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_1","title":"Syntaxe :","text":"<pre><code>mixed array_pop ( array &amp;$array )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_1","title":"Exemple :","text":"<pre><code>&lt;?php\n$fruits = [\"pomme\", \"banane\", \"orange\"];\n$lastFruit = array_pop($fruits);\necho \"Fruit supprim\u00e9 : $lastFruit\\n\";\nprint_r($fruits);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Fruit supprim\u00e9 : orange\nArray\n(\n    [0] =&gt; pomme\n    [1] =&gt; banane\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#3-array_shift","title":"3. <code>array_shift()</code>","text":"<p>Supprime et retourne le premier \u00e9l\u00e9ment d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_2","title":"Syntaxe :","text":"<pre><code>mixed array_shift ( array &amp;$array )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_2","title":"Exemple :","text":"<pre><code>&lt;?php\n$fruits = [\"pomme\", \"banane\", \"orange\"];\n$firstFruit = array_shift($fruits);\necho \"Fruit supprim\u00e9 : $firstFruit\\n\";\nprint_r($fruits);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Fruit supprim\u00e9 : pomme\nArray\n(\n    [0] =&gt; banane\n    [1] =&gt; orange\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#4-array_unshift","title":"4. <code>array_unshift()</code>","text":"<p>Ajoute un ou plusieurs \u00e9l\u00e9ments au d\u00e9but d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_3","title":"Syntaxe :","text":"<pre><code>int array_unshift ( array &amp;$array , mixed ...$values )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_3","title":"Exemple :","text":"<pre><code>&lt;?php\n$fruits = [\"banane\", \"orange\"];\narray_unshift($fruits, \"pomme\", \"fraise\");\nprint_r($fruits);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; pomme\n    [1] =&gt; fraise\n    [2] =&gt; banane\n    [3] =&gt; orange\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#5-array_merge","title":"5. <code>array_merge()</code>","text":"<p>Fusionne un ou plusieurs tableaux.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_4","title":"Syntaxe :","text":"<pre><code>array array_merge ( array ...$arrays )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_4","title":"Exemple :","text":"<pre><code>&lt;?php\n$array1 = [\"rouge\", \"vert\"];\n$array2 = [\"bleu\", \"jaune\"];\n$result = array_merge($array1, $array2);\nprint_r($result);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; rouge\n    [1] =&gt; vert\n    [2] =&gt; bleu\n    [3] =&gt; jaune\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#6-array_keys","title":"6. <code>array_keys()</code>","text":"<p>Retourne toutes les cl\u00e9s d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_5","title":"Syntaxe :","text":"<pre><code>array array_keys ( array $array [, mixed $search_value [, bool $strict = false ]] )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_5","title":"Exemple :","text":"<pre><code>&lt;?php\n$person = [\"nom\" =&gt; \"Alice\", \"age\" =&gt; 25, \"ville\" =&gt; \"Paris\"];\n$keys = array_keys($person);\nprint_r($keys);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; nom\n    [1] =&gt; age\n    [2] =&gt; ville\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#7-array_values","title":"7. <code>array_values()</code>","text":"<p>Retourne toutes les valeurs d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_6","title":"Syntaxe :","text":"<pre><code>array array_values ( array $array )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_6","title":"Exemple :","text":"<pre><code>&lt;?php\n$person = [\"nom\" =&gt; \"Alice\", \"age\" =&gt; 25, \"ville\" =&gt; \"Paris\"];\n$values = array_values($person);\nprint_r($values);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; Alice\n    [1] =&gt; 25\n    [2] =&gt; Paris\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#8-array_slice","title":"8. <code>array_slice()</code>","text":"<p>Extrait une portion d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_7","title":"Syntaxe :","text":"<pre><code>array array_slice ( array $array , int $offset [, int $length = null [, bool $preserve_keys = false ]] )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_7","title":"Exemple :","text":"<pre><code>&lt;?php\n$numbers = [0, 1, 2, 3, 4, 5];\n$slice = array_slice($numbers, 2, 3);\nprint_r($slice);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; 2\n    [1] =&gt; 3\n    [2] =&gt; 4\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#9-array_filter","title":"9. <code>array_filter()</code>","text":"<p>Filtre les \u00e9l\u00e9ments d'un tableau en utilisant une fonction de rappel.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_8","title":"Syntaxe :","text":"<pre><code>array array_filter ( array $array [, callable|null $callback = null , int $mode = 0 ] )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_8","title":"Exemple :","text":"<pre><code>&lt;?php\n$numbers = [1, 2, 3, 4, 5];\n$even = array_filter($numbers, function($num) {\n    return $num % 2 === 0;\n});\nprint_r($even);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [1] =&gt; 2\n    [3] =&gt; 4\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#10-array_map","title":"10. <code>array_map()</code>","text":"<p>Applique une fonction \u00e0 tous les \u00e9l\u00e9ments d'un tableau.</p>"},{"location":"doc/Tableaux%20en%20PHP/#syntaxe_9","title":"Syntaxe :","text":"<pre><code>array array_map ( callable $callback , array $array [, array ...$arrays ] )\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#exemple_9","title":"Exemple :","text":"<pre><code>&lt;?php\n$numbers = [1, 2, 3, 4, 5];\nsquared = array_map(function($num) {\n    return $num * $num;\n}, $numbers);\nprint_r($squared);\n?&gt;\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; 1\n    [1] =&gt; 4\n    [2] =&gt; 9\n    [3] =&gt; 16\n    [4] =&gt; 25\n)\n</code></pre>"},{"location":"doc/Tableaux%20en%20PHP/#conclusion","title":"Conclusion","text":"<p>Ces fonctions permettent de manipuler les tableaux de mani\u00e8re flexible et puissante en PHP. Elles couvrent les op\u00e9rations de base telles que l'ajout, la suppression, la fusion, et la transformation des donn\u00e9es.</p> <p>Pratiquez ces fonctions avec des cas d'utilisation concrets pour vous familiariser pleinement avec leur comportement !</p>"},{"location":"doc/array_uintersect/","title":"Fonction array_uintersect","text":""},{"location":"doc/array_uintersect/#description","title":"Description","text":"<p>La fonction <code>array_uintersect</code> renvoie un tableau contenant les valeurs communes \u00e0 deux ou plusieurs tableaux, compar\u00e9es \u00e0 l'aide d'une fonction de rappel (callback) personnalis\u00e9e.</p>"},{"location":"doc/array_uintersect/#syntaxe","title":"Syntaxe","text":"<pre><code>array array_uintersect(array $array1, array $array2, callable $callback, ...);\n</code></pre>"},{"location":"doc/array_uintersect/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$array1</code> (obligatoire)</p> <ul> <li>Le premier tableau d'entr\u00e9e.</li> <li>C'est le tableau principal \u00e0 comparer avec les autres tableaux.</li> <li> <p><code>$array2</code> (obligatoire)</p> </li> <li> <p>Le second tableau d'entr\u00e9e.</p> </li> <li>Ses valeurs seront compar\u00e9es \u00e0 celles de <code>$array1</code>.</li> <li> <p><code>$callback</code> (obligatoire)</p> </li> <li> <p>Une fonction de rappel (callback) d\u00e9finissant la logique de comparaison entre les \u00e9l\u00e9ments.</p> </li> <li>La fonction doit accepter deux param\u00e8tres et retourner un entier :<ul> <li>0 si les \u00e9l\u00e9ments sont consid\u00e9r\u00e9s \u00e9gaux,</li> <li>un entier n\u00e9gatif si le premier \u00e9l\u00e9ment est \"plus petit\",</li> <li>un entier positif si le premier \u00e9l\u00e9ment est \"plus grand\".</li> </ul> </li> <li> <p><code>...</code> (optionnel)</p> </li> <li> <p>Vous pouvez ajouter plus de tableaux \u00e0 comparer.</p> </li> </ul> </li> </ol>"},{"location":"doc/array_uintersect/#valeur-de-retour","title":"Valeur de retour","text":"<p>Un tableau contenant les valeurs communes entre les tableaux, compar\u00e9es en utilisant la fonction de rappel.</p> <ul> <li>Les cl\u00e9s associatives des \u00e9l\u00e9ments du tableau retourn\u00e9 sont h\u00e9rit\u00e9es de <code>$array1</code>.</li> </ul>"},{"location":"doc/array_uintersect/#exemples","title":"Exemples","text":""},{"location":"doc/array_uintersect/#exemple-1-intersection-simple-avec-comparaison-personnalisee","title":"Exemple 1 : Intersection simple avec comparaison personnalis\u00e9e","text":"<pre><code>function case_insensitive_compare($a, $b) {\n    return strcasecmp($a, $b); // Comparaison insensible \u00e0 la casse\n}\n\n$array1 = [\"Apple\", \"Banana\", \"Cherry\"];\n$array2 = [\"banana\", \"apple\", \"Date\"];\n\n$result = array_uintersect($array1, $array2, \"case_insensitive_compare\");\n\nprint_r($result);\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [0] =&gt; Apple\n    [1] =&gt; Banana\n)\n</code></pre>"},{"location":"doc/array_uintersect/#exemple-2-comparaison-numerique-personnalisee","title":"Exemple 2 : Comparaison num\u00e9rique personnalis\u00e9e","text":"<pre><code>function numerical_compare($a, $b) {\n    return $a - $b;\n}\n\n$array1 = [1, 2, 3, 4];\n$array2 = [3, 4, 5, 6];\n\n$result = array_uintersect($array1, $array2, \"numerical_compare\");\n\nprint_r($result);\n</code></pre> <p>Sortie :</p> <pre><code>Array\n(\n    [2] =&gt; 3\n    [3] =&gt; 4\n)\n</code></pre>"},{"location":"doc/array_uintersect/#notes-importantes","title":"Notes importantes","text":"<ul> <li>Contrairement \u00e0 <code>array_intersect</code>, qui utilise une comparaison stricte ou standard, <code>array_uintersect</code> permet d'utiliser une logique de comparaison d\u00e9finie par l'utilisateur via un callback.</li> <li>La fonction ne pr\u00e9serve pas les cl\u00e9s des tableaux <code>$array2</code>, <code>$array3</code>, etc., mais les cl\u00e9s du premier tableau <code>$array1</code> sont conserv\u00e9es dans le r\u00e9sultat.</li> </ul>"},{"location":"doc/array_uintersect/#voir-aussi","title":"Voir aussi","text":"<ul> <li>array_intersect() : Intersection des tableaux avec une comparaison stricte.</li> <li>array_uintersect_assoc() : Comme <code>array_uintersect</code>, mais inclut aussi une comparaison des cl\u00e9s.</li> <li>usort() : Permet de trier un tableau avec une fonction de comparaison utilisateur.</li> </ul> <p>Ceci vous aidera-t-il pour votre projet ou un besoin sp\u00e9cifique ? \ud83d\ude0a</p>"},{"location":"doc/enum/","title":"Enum\u00e9rations","text":"<p>Les enums (\u00e9num\u00e9rations, c'est-\u00e0-dire un type de donn\u00e9es qui d\u00e9finit un ensemble limit\u00e9 de valeurs constantes) en PHP, introduits \u00e0 partir de PHP 8.1, permettent de mieux structurer et typer votre code. Voici une documentation compl\u00e8te avec des exemples, des bonnes pratiques et des points d'attention.</p>"},{"location":"doc/enum/#1-definition-et-utilite","title":"1. D\u00e9finition et Utilit\u00e9","text":"<p>Les enums permettent de d\u00e9finir un ensemble de valeurs pr\u00e9d\u00e9finies et immuables. Cela renforce la s\u00e9curit\u00e9 de type (c'est-\u00e0-dire qu'une variable ne peut prendre que les valeurs d\u00e9finies dans l'enum) et facilite la maintenance du code en limitant les erreurs li\u00e9es \u00e0 l'utilisation de cha\u00eenes de caract\u00e8res ou de nombres \"magiques\".</p>"},{"location":"doc/enum/#2-types-denums","title":"2. Types d\u2019Enums","text":""},{"location":"doc/enum/#a-pure-enums","title":"a. Pure Enums","text":"<p>Les pure enums ne poss\u00e8dent pas de valeur associ\u00e9e (autre que leur nom). Elles servent surtout \u00e0 repr\u00e9senter des \u00e9tats ou des cat\u00e9gories.</p> <p>Exemple :</p> <pre><code>enum Status {\n    case Pending;\n    case Active;\n    case Archived;\n}\n</code></pre> <p>Explications :</p> <ul> <li>Chaque <code>case</code> (cas, c'est-\u00e0-dire une valeur constante de l'enum) repr\u00e9sente une valeur possible de l'enum.</li> <li>Vous pouvez ensuite utiliser l'enum dans vos fonctions pour garantir que seules ces valeurs sont pass\u00e9es en argument.</li> </ul>"},{"location":"doc/enum/#b-backed-enums","title":"b. Backed Enums","text":"<p>Les backed enums associent chaque cas \u00e0 une valeur scalaire (typiquement une cha\u00eene de caract\u00e8res ou un entier). Elles sont utiles lorsque vous souhaitez stocker ou \u00e9changer ces valeurs, par exemple avec une base de donn\u00e9es.</p> <p>Exemple :</p> <pre><code>enum UserRole: string {\n    case Admin = 'admin';\n    case User = 'user';\n    case Guest = 'guest';\n}\n</code></pre> <p>Explications :</p> <ul> <li>Le <code>: string</code> indique que chaque cas de l'enum aura une valeur de type cha\u00eene de caract\u00e8res.</li> <li>Vous pouvez aussi utiliser <code>int</code> si vous pr\u00e9f\u00e9rez des entiers.</li> </ul>"},{"location":"doc/enum/#3-utilisation-et-methodes","title":"3. Utilisation et M\u00e9thodes","text":"<p>Les enums en PHP peuvent \u00e9galement contenir des m\u00e9thodes. Cela permet d'ajouter une logique directement li\u00e9e aux valeurs de l'enum.</p> <p>Exemple avec m\u00e9thode :</p> <pre><code>enum Suit: string {\n    case Hearts = 'hearts';\n    case Diamonds = 'diamonds';\n    case Clubs = 'clubs';\n    case Spades = 'spades';\n\n    // M\u00e9thode : function (fonction, c'est-\u00e0-dire un bloc de code r\u00e9utilisable) retournant la couleur associ\u00e9e\n    public function color(): string {\n        return in_array($this, [self::Hearts, self::Diamonds]) ? 'red' : 'black';\n    }\n}\n</code></pre> <p>Explications :</p> <ul> <li>La m\u00e9thode <code>color()</code> d\u00e9termine la couleur en fonction du cas de l'enum.</li> <li><code>self::Hearts</code> fait r\u00e9f\u00e9rence au cas <code>Hearts</code> de l'enum en cours.</li> </ul>"},{"location":"doc/enum/#4-bonnes-pratiques","title":"4. Bonnes Pratiques","text":"<ul> <li> <p>Typage strict : Utilisez les enums dans vos d\u00e9clarations de type (type hints) pour b\u00e9n\u00e9ficier d\u2019une meilleure s\u00e9curit\u00e9.</p> <p><code>php function setStatus(Status $status): void {     // Traitement en fonction du statut }</code></p> </li> <li> <p>Utilisation des backed enums pour la persistance :     Si vous devez stocker la valeur dans une base de donn\u00e9es, optez pour les backed enums. Cela facilite la conversion et assure que seules des valeurs valides sont utilis\u00e9es.</p> </li> <li> <p>It\u00e9ration :     Vous pouvez it\u00e9rer sur les cas d\u2019un enum avec la m\u00e9thode statique <code>cases()</code>.</p> <p><code>php foreach (Status::cases() as $status) {     echo $status-&gt;name . \"\\n\"; // Affiche le nom du cas }</code></p> </li> <li> <p>Immutabilit\u00e9 :     Les enums sont immuables (leur valeur ne peut pas \u00eatre modifi\u00e9e apr\u00e8s d\u00e9finition), ce qui garantit leur constance dans le temps.</p> </li> </ul>"},{"location":"doc/enum/#5-points-dattention","title":"5. Points d\u2019Attention","text":"<ul> <li> <p>Compatibilit\u00e9 :     Les enums sont disponibles \u00e0 partir de PHP 8.1. Assurez-vous que votre environnement de d\u00e9veloppement ou de production supporte cette version.</p> </li> <li> <p>Comparaisons :     Pour comparer des enums, utilisez l'op\u00e9rateur <code>===</code> (\u00e9galit\u00e9 stricte) afin d'\u00e9viter des erreurs de comparaison.</p> </li> <li> <p>M\u00e9thode <code>from()</code> et <code>tryFrom()</code> (pour les backed enums) :</p> <ul> <li><code>Enum::from($value)</code> lance une erreur si la valeur ne correspond \u00e0 aucun cas.</li> <li><code>Enum::tryFrom($value)</code> retourne <code>null</code> en cas d'absence de correspondance.     Soyez vigilant lors de l'utilisation de ces m\u00e9thodes pour g\u00e9rer correctement les valeurs invalides.</li> <li>Extension : Les enums ne peuvent pas \u00eatre \u00e9tendus (c'est-\u00e0-dire que vous ne pouvez pas cr\u00e9er une sous-classe d'un enum). Cela renforce leur caract\u00e8re ferm\u00e9 et fixe.</li> </ul> </li> </ul>"},{"location":"doc/enum/#conclusion","title":"Conclusion","text":"<p>Les enums en PHP offrent une mani\u00e8re \u00e9l\u00e9gante et s\u00fbre de g\u00e9rer des ensembles de valeurs constantes. En combinant typage strict, immutabilit\u00e9 et possibilit\u00e9 d\u2019ajouter des m\u00e9thodes, elles aident \u00e0 rendre le code plus clair, moins sujet aux erreurs et plus facile \u00e0 maintenir. Adaptez leur utilisation selon vos besoins : utilisez les pure enums pour des cat\u00e9gories simples et les backed enums lorsque vous avez besoin d'associer des valeurs scalaires pour la persistance ou l'interaction avec d'autres syst\u00e8mes.</p> <p>N'h\u00e9sitez pas \u00e0 exp\u00e9rimenter avec ces fonctionnalit\u00e9s pour tirer pleinement parti des avantages offerts par PHP 8.1 et au-del\u00e0.</p>"},{"location":"doc/getProjectDir%28%29/","title":"getProjectDir()","text":""},{"location":"doc/getProjectDir%28%29/#documentation-complete-getprojectdir","title":"Documentation Compl\u00e8te : <code>getProjectDir()</code>","text":""},{"location":"doc/getProjectDir%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>getProjectDir()</code> est une m\u00e9thode introduite dans Symfony 4.0. Elle est disponible sur l'interface <code>KernelInterface</code> et est impl\u00e9ment\u00e9e dans la classe <code>Kernel</code>. Cette m\u00e9thode retourne le chemin absolu du r\u00e9pertoire racine de votre projet Symfony. Ce r\u00e9pertoire contient g\u00e9n\u00e9ralement des fichiers tels que <code>composer.json</code>, <code>symfony.lock</code>, et d'autres fichiers de configuration.</p>"},{"location":"doc/getProjectDir%28%29/#signature","title":"Signature","text":"<pre><code>public function getProjectDir(): string\n</code></pre>"},{"location":"doc/getProjectDir%28%29/#utilisation","title":"Utilisation","text":""},{"location":"doc/getProjectDir%28%29/#1-recuperer-le-chemin-du-repertoire-projet","title":"1. R\u00e9cup\u00e9rer le chemin du r\u00e9pertoire projet","text":"<pre><code>namespace App\\Service;\n\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\n\nclass MyService\n{\n    private KernelInterface $kernel;\n\n    public function __construct(KernelInterface $kernel)\n    {\n        $this-&gt;kernel = $kernel;\n    }\n\n    public function getProjectRootPath(): string\n    {\n        return $this-&gt;kernel-&gt;getProjectDir();\n    }\n}\n</code></pre> <p>Exemple de sortie : Si votre projet est situ\u00e9 dans <code>/var/www/symfony</code>, la m\u00e9thode <code>getProjectDir()</code> retournera cette valeur.</p>"},{"location":"doc/getProjectDir%28%29/#2-acceder-a-des-fichiers-ou-repertoires-specifiques","title":"2. Acc\u00e9der \u00e0 des fichiers ou r\u00e9pertoires sp\u00e9cifiques","text":"<p>Utilisez <code>getProjectDir()</code> pour acc\u00e9der \u00e0 des fichiers ou r\u00e9pertoires sp\u00e9cifiques dans votre projet.</p> <pre><code>public function getLogFilePath(): string\n{\n    return $this-&gt;kernel-&gt;getProjectDir() . '/var/log/prod.log';\n}\n</code></pre> <p>Exemple d'application : Lire un fichier de log ou configurer un chemin pour des fichiers g\u00e9n\u00e9r\u00e9s dynamiquement.</p>"},{"location":"doc/getProjectDir%28%29/#3-deplacer-un-fichier-uploade","title":"3. D\u00e9placer un fichier upload\u00e9","text":"<pre><code>use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\npublic function saveUploadedFile(UploadedFile $file): void\n{\n    $targetDirectory = $this-&gt;kernel-&gt;getProjectDir() . '/public/uploads';\n    if (!is_dir($targetDirectory)) {\n        mkdir($targetDirectory, 0755, true);\n    }\n    $file-&gt;move($targetDirectory, $file-&gt;getClientOriginalName());\n}\n</code></pre>"},{"location":"doc/getProjectDir%28%29/#points-dattention","title":"Points d'attention","text":"<ol> <li> <p>Ne pas confondre avec <code>getRootDir()</code> :</p> <ul> <li><code>getRootDir()</code> retourne le chemin du r\u00e9pertoire contenant le kernel (obsol\u00e8te depuis Symfony 4).</li> <li><code>getProjectDir()</code> retourne le chemin du r\u00e9pertoire racine du projet.</li> <li> <p>Attention \u00e0 la portabilit\u00e9 :</p> </li> <li> <p>Si vous manipulez des chemins avec <code>getProjectDir()</code>, utilisez <code>DIRECTORY_SEPARATOR</code> pour garantir la portabilit\u00e9 sur tous les syst\u00e8mes d\u2019exploitation.</p> </li> <li> <p>Permissions sur les r\u00e9pertoires :</p> </li> <li> <p>Lorsque vous cr\u00e9ez ou acc\u00e9dez \u00e0 des r\u00e9pertoires \u00e0 partir de <code>getProjectDir()</code>, v\u00e9rifiez toujours que les permissions syst\u00e8me sont configur\u00e9es correctement.</p> </li> <li> <p>Chemins relatifs :</p> </li> <li> <p>Ne concat\u00e9nez pas simplement des cha\u00eenes. Pr\u00e9f\u00e9rez utiliser des outils comme <code>Symfony\\Component\\Filesystem\\Filesystem</code> pour plus de robustesse.</p> </li> </ul> </li> </ol>"},{"location":"doc/getProjectDir%28%29/#mauvaises-utilisations","title":"Mauvaises Utilisations","text":""},{"location":"doc/getProjectDir%28%29/#1-stocker-des-fichiers-directement-dans-le-repertoire-du-projet","title":"1. Stocker des fichiers directement dans le r\u00e9pertoire du projet","text":"<pre><code>public function saveFile(UploadedFile $file): void\n{\n    $file-&gt;move($this-&gt;kernel-&gt;getProjectDir(), $file-&gt;getClientOriginalName());\n}\n</code></pre> <p>Probl\u00e8me :</p> <ul> <li>Stocker des fichiers directement dans le r\u00e9pertoire racine pollue la structure du projet et peut causer des conflits.</li> </ul>"},{"location":"doc/getProjectDir%28%29/#2-ne-pas-verifier-lexistence-du-repertoire-cible","title":"2. Ne pas v\u00e9rifier l\u2019existence du r\u00e9pertoire cible","text":"<pre><code>public function saveFileWithoutCheckingDir(UploadedFile $file): void\n{\n    $file-&gt;move($this-&gt;kernel-&gt;getProjectDir() . '/uploads', $file-&gt;getClientOriginalName());\n}\n</code></pre> <p>Probl\u00e8me :</p> <ul> <li>Si le r\u00e9pertoire <code>/uploads</code> n'existe pas, cette m\u00e9thode provoquera une erreur.</li> </ul>"},{"location":"doc/getProjectDir%28%29/#bonnes-pratiques","title":"Bonnes Pratiques","text":"<ol> <li> <p>V\u00e9rifiez toujours l\u2019existence des r\u00e9pertoires et cr\u00e9ez-les si n\u00e9cessaire.</p> <p><code>php if (!is_dir($targetDirectory)) {     mkdir($targetDirectory, 0755, true); }</code></p> </li> <li> <p>Utilisez des constantes pour vos chemins.</p> <ul> <li> <p>D\u00e9clarez les chemins de r\u00e9pertoires dans des constantes pour \u00e9viter les erreurs de saisie :</p> <p><code>php const UPLOADS_DIR = '/public/uploads';</code></p> </li> </ul> </li> <li> <p>Nettoyez les chemins dynamiques.</p> <ul> <li>Si vous manipulez des noms de fichiers ou r\u00e9pertoires dynamiques, nettoyez-les pour \u00e9viter les failles de s\u00e9curit\u00e9.</li> </ul> </li> </ol>"},{"location":"doc/getProjectDir%28%29/#exemples-a-ne-pas-faire","title":"Exemples \u00e0 ne pas faire","text":"<ol> <li> <p>Concat\u00e9ner des chemins sans gestion correcte des s\u00e9parateurs :</p> <p><code>php $path = $this-&gt;kernel-&gt;getProjectDir() . 'uploads';</code></p> </li> <li> <p>D\u00e9pendre de <code>getProjectDir()</code> pour tout :</p> <ul> <li>N\u2019abusez pas de cette m\u00e9thode pour obtenir des chemins \u00e0 des endroits bien d\u00e9finis comme <code>/public</code> ou <code>/var</code>.</li> <li>Pr\u00e9f\u00e9rez utiliser des services d\u00e9di\u00e9s ou des constantes configur\u00e9es.</li> </ul> </li> </ol>"},{"location":"doc/getProjectDir%28%29/#conclusion","title":"Conclusion","text":"<p>La m\u00e9thode <code>getProjectDir()</code> est un outil pratique et puissant pour travailler avec la structure de fichiers d\u2019un projet Symfony. Bien utilis\u00e9e, elle permet de rendre votre code plus lisible et maintenable. Assurez-vous d\u2019utiliser cette m\u00e9thode dans des cas pertinents et respectez les bonnes pratiques pour \u00e9viter les probl\u00e8mes li\u00e9s \u00e0 la gestion des chemins.</p>"},{"location":"doc/try%20catch/","title":"Documentation Compl\u00e8te sur les Blocs <code>try-catch</code> en PHP","text":""},{"location":"doc/try%20catch/#introduction","title":"Introduction","text":"<p>Le bloc <code>try-catch</code> en PHP est un outil fondamental pour g\u00e9rer les exceptions et assurer la robustesse de votre code. Il permet de capturer et traiter des erreurs ou situations exceptionnelles qui pourraient autrement interrompre l'ex\u00e9cution normale du programme.</p>"},{"location":"doc/try%20catch/#structure-de-base-dun-try-catch","title":"Structure de Base d'un <code>try-catch</code>","text":""},{"location":"doc/try%20catch/#syntaxe","title":"Syntaxe","text":"<pre><code>try {\n    // Code qui peut potentiellement lancer une exception\n} catch (ExceptionType $e) {\n    // Traitement de l'exception\n}\n</code></pre>"},{"location":"doc/try%20catch/#exemple-simple","title":"Exemple Simple","text":"<pre><code>try {\n    // Diviser par z\u00e9ro (erreur)\n    $result = 10 / 0;\n} catch (DivisionByZeroError $e) {\n    echo 'Erreur : ' . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#utilisation-de-blocs-try-catch-finally","title":"Utilisation de Blocs <code>try-catch-finally</code>","text":"<p>Le mot-cl\u00e9 <code>finally</code> permet d'ex\u00e9cuter du code ind\u00e9pendamment du fait qu'une exception ait \u00e9t\u00e9 lev\u00e9e ou non.</p>"},{"location":"doc/try%20catch/#exemple","title":"Exemple","text":"<pre><code>try {\n    $file = fopen(\"example.txt\", \"r\");\n    if (!$file) {\n        throw new Exception(\"Impossible d'ouvrir le fichier.\");\n    }\n} catch (Exception $e) {\n    echo 'Erreur : ' . $e-&gt;getMessage();\n} finally {\n    if (isset($file) &amp;&amp; is_resource($file)) {\n        fclose($file);\n        echo \"Fichier ferm\u00e9.\";\n    }\n}\n</code></pre>"},{"location":"doc/try%20catch/#types-dexceptions","title":"Types d'Exceptions","text":"<p>En PHP, les exceptions peuvent provenir de plusieurs sources :</p>"},{"location":"doc/try%20catch/#exceptions-standards","title":"Exceptions Standards","text":"<ul> <li><code>Exception</code>: Classe de base pour toutes les exceptions.</li> <li><code>ErrorException</code>: Repr\u00e9sente des erreurs PHP transform\u00e9es en exceptions.</li> </ul>"},{"location":"doc/try%20catch/#exceptions-specifiques","title":"Exceptions Sp\u00e9cifiques","text":"<ul> <li><code>PDOException</code>: Lev\u00e9e par PDO lors de probl\u00e8mes avec la base de donn\u00e9es.</li> <li><code>InvalidArgumentException</code>: Pour des arguments invalides dans une fonction.</li> </ul>"},{"location":"doc/try%20catch/#creation-dexceptions-personnalisees","title":"Cr\u00e9ation d'Exceptions Personnalis\u00e9es","text":"<pre><code>class CustomException extends Exception {}\n\ntry {\n    throw new CustomException(\"Erreur personnalis\u00e9e\");\n} catch (CustomException $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#bonnes-pratiques","title":"Bonnes Pratiques","text":""},{"location":"doc/try%20catch/#1-ne-capturer-que-ce-que-vous-pouvez-gerer","title":"1. Ne Capturer que ce que vous Pouvez G\u00e9rer","text":"<p>Ne capturez pas une exception si vous ne pouvez pas proposer une solution ou un traitement appropri\u00e9.</p>"},{"location":"doc/try%20catch/#exemple-a-eviter","title":"Exemple \u00e0 \u00e9viter :","text":"<pre><code>try {\n    $result = 10 / 0;\n} catch (Exception $e) {\n    // Rien \u00e0 faire ici...\n}\n</code></pre>"},{"location":"doc/try%20catch/#correct","title":"Correct :","text":"<pre><code>try {\n    $result = 10 / 0;\n} catch (DivisionByZeroError $e) {\n    echo 'Division par z\u00e9ro interdite !';\n}\n</code></pre>"},{"location":"doc/try%20catch/#2-precisez-le-type-dexception","title":"2. Pr\u00e9cisez le Type d'Exception","text":"<p>Pr\u00e9cisez les types d'exceptions que vous voulez capturer pour \u00e9viter d'attraper des erreurs inattendues.</p>"},{"location":"doc/try%20catch/#exemple_1","title":"Exemple :","text":"<pre><code>try {\n    // Code pouvant lever plusieurs types d'exceptions\n} catch (PDOException $e) {\n    echo 'Erreur de base de donn\u00e9es : ' . $e-&gt;getMessage();\n} catch (Exception $e) {\n    echo 'Erreur g\u00e9n\u00e9rale : ' . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#3-utilisez-finally-pour-liberer-des-ressources","title":"3. Utilisez  Finally pour Lib\u00e9rer des Ressources","text":"<p>Lib\u00e9rez toujours les ressources comme les fihiers ou les connexions \u00e0 la base de donn\u00e9es dans un bloc <code>finally</code>.</p>"},{"location":"doc/try%20catch/#4-ne-cachez-pas-les-exceptions-sans-logging","title":"4. Ne Cachez Pas les Exceptions Sans Logging","text":"<p>Assurez-vous de journaliser les exceptions captur\u00e9es.</p>"},{"location":"doc/try%20catch/#exemple_2","title":"Exemple :","text":"<pre><code>try {\n    throw new Exception(\"Erreur critique\");\n} catch (Exception $e) {\n    error_log($e-&gt;getMessage());\n    echo \"Une erreur s'est produite, veuillez contacter l'administrateur.\";\n}\n</code></pre>"},{"location":"doc/try%20catch/#points-dattention","title":"Points d'Attention","text":"<ol> <li> <p>Performance : Les exceptions ne doivent pas remplacer une logique de validation. Utilisez-les uniquement pour les erreurs inattendues.</p> </li> <li> <p>Propagation des Exceptions : Si une exception ne peut pas \u00eatre g\u00e9r\u00e9e localement, relancez-la avec <code>throw</code>.</p> </li> </ol> <pre><code>try {\n    // Code\n} catch (Exception $e) {\n    // Logger, puis relancer\n    error_log($e-&gt;getMessage());\n    throw $e;\n}\n</code></pre> <ol> <li>Exceptions vs Erreurs : En PHP, les erreurs fatales (\u00e9g., division par z\u00e9ro) peuvent \u00eatre captur\u00e9es depuis PHP 7 gr\u00e2ce \u00e0 \u00a0<code>Throwable</code>.</li> </ol>"},{"location":"doc/try%20catch/#exemples-avances","title":"Exemples Avanc\u00e9s","text":""},{"location":"doc/try%20catch/#propagation-des-exceptions","title":"Propagation des Exceptions","text":"<pre><code>function divide($a, $b) {\n    if ($b === 0) {\n        throw new DivisionByZeroError(\"Impossible de diviser par z\u00e9ro\");\n    }\n    return $a / $b;\n}\n\ntry {\n    echo divide(10, 0);\n} catch (DivisionByZeroError $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#exception-et-validation","title":"Exception et Validation","text":"<pre><code>function processInput($data) {\n    if (!isset($data['name'])) {\n        throw new InvalidArgumentException(\"Le nom est requis\");\n    }\n\n    // Traitement\n    return true;\n}\n\ntry {\n    processInput([]);\n} catch (InvalidArgumentException $e) {\n    echo 'Validation \u00e9chou\u00e9e : ' . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#liste-exception","title":"Liste exception","text":""},{"location":"doc/try%20catch/#1-exceptions-standard","title":"1. Exceptions Standard","text":""},{"location":"doc/try%20catch/#exception","title":"Exception","text":"<ul> <li>Classe de base pour toutes les exceptions.</li> <li>Elle peut \u00eatre utilis\u00e9e directement ou \u00e9tendue pour cr\u00e9er des exceptions personnalis\u00e9es.</li> </ul>"},{"location":"doc/try%20catch/#errorexception","title":"ErrorException","text":"<ul> <li>Transforme les erreurs PHP (comme <code>E_WARNING</code> ou <code>E_NOTICE</code>) en exceptions.</li> <li>Utilis\u00e9e souvent avec <code>set_error_handler()</code> pour capturer des erreurs classiques sous forme d'exception.</li> </ul>"},{"location":"doc/try%20catch/#2-exceptions-de-type-spl-standard-php-library","title":"2. Exceptions de Type SPL (Standard PHP Library)","text":"<p>Les exceptions SPL sont des exceptions pr\u00e9d\u00e9finies dans PHP pour des situations sp\u00e9cifiques.</p>"},{"location":"doc/try%20catch/#invalidargumentexception","title":"InvalidArgumentException","text":"<ul> <li>Lev\u00e9e lorsqu'un argument pass\u00e9 \u00e0 une fonction ou m\u00e9thode est invalide.</li> </ul>"},{"location":"doc/try%20catch/#lengthexception","title":"LengthException","text":"<ul> <li>Utilis\u00e9e lorsqu'une longueur ou une taille est invalide.</li> </ul>"},{"location":"doc/try%20catch/#outofrangeexception","title":"OutOfRangeException","text":"<ul> <li>Lev\u00e9e lorsqu'une valeur est en dehors de la plage attendue.</li> </ul>"},{"location":"doc/try%20catch/#logicexception","title":"LogicException","text":"<ul> <li>Classe de base pour des exceptions dues \u00e0 des erreurs dans la logique du programme.<ul> <li>BadFunctionCallException : Lev\u00e9e lorsqu'une fonction appel\u00e9e est invalide.</li> <li>BadMethodCallException : Variante pour des m\u00e9thodes.</li> <li>DomainException : Pour des erreurs li\u00e9es \u00e0 un domaine de valeur non valide.</li> <li>InvalidArgumentException : Arguments invalides.</li> <li>LengthException : Longueur incorrecte.</li> </ul> </li> </ul>"},{"location":"doc/try%20catch/#runtimeexception","title":"RuntimeException","text":"<ul> <li>Classe de base pour des erreurs d\u00e9tect\u00e9es uniquement \u00e0 l'ex\u00e9cution.<ul> <li>OutOfBoundsException : Pour des erreurs li\u00e9es \u00e0 des indices invalides.</li> <li>OverflowException : Pour des d\u00e9bordements.</li> <li>UnderflowException : Lorsque des ressources ou donn\u00e9es attendues manquent.</li> <li>UnexpectedValueException : Pour des valeurs inattendues.</li> </ul> </li> </ul>"},{"location":"doc/try%20catch/#3-exceptions-de-la-gestion-des-fichiers","title":"3. Exceptions de la Gestion des Fichiers","text":""},{"location":"doc/try%20catch/#filenotfoundexception","title":"FileNotFoundException","text":"<ul> <li>Lev\u00e9e lorsque l'acc\u00e8s \u00e0 un fichier sp\u00e9cifi\u00e9 \u00e9choue.</li> </ul>"},{"location":"doc/try%20catch/#directorynotfoundexception","title":"DirectoryNotFoundException","text":"<ul> <li>Lev\u00e9e pour des r\u00e9pertoires inexistants (dans des frameworks sp\u00e9cifiques comme Symfony).</li> </ul>"},{"location":"doc/try%20catch/#4-exceptions-de-base-de-donnees","title":"4. Exceptions de Base de Donn\u00e9es","text":""},{"location":"doc/try%20catch/#pdoexception","title":"PDOException","text":"<ul> <li>Lev\u00e9e par PDO pour des erreurs SQL ou des probl\u00e8mes de connexion.</li> </ul>"},{"location":"doc/try%20catch/#connectionexception","title":"ConnectionException","text":"<ul> <li>Lev\u00e9e dans des biblioth\u00e8ques sp\u00e9cifiques lorsqu'une connexion \u00e9choue.</li> </ul>"},{"location":"doc/try%20catch/#5-exceptions-http","title":"5. Exceptions HTTP","text":""},{"location":"doc/try%20catch/#httpexception","title":"HttpException","text":"<ul> <li>Utilis\u00e9e pour signaler des erreurs li\u00e9es \u00e0 HTTP (par exemple, erreur 404, 500).</li> </ul>"},{"location":"doc/try%20catch/#clientexception","title":"ClientException","text":"<ul> <li>Lev\u00e9e pour des erreurs li\u00e9es \u00e0 des requ\u00eates HTTP client.</li> </ul>"},{"location":"doc/try%20catch/#6-exceptions-pour-les-apis-et-frameworks","title":"6. Exceptions pour les APIs et Frameworks","text":""},{"location":"doc/try%20catch/#symfonycomponenthttpkernelexceptionhttpexception","title":"Symfony\\Component\\HttpKernel\\Exception\\HttpException","text":"<ul> <li>Lev\u00e9e dans Symfony pour des erreurs HTTP sp\u00e9cifiques.</li> </ul>"},{"location":"doc/try%20catch/#laravelvalidationvalidationexception","title":"Laravel\\Validation\\ValidationException","text":"<ul> <li>Lev\u00e9e lors d'une erreur de validation des donn\u00e9es dans Laravel.</li> </ul>"},{"location":"doc/try%20catch/#7-exceptions-personnalisees","title":"7. Exceptions Personnalis\u00e9es","text":""},{"location":"doc/try%20catch/#creation-dune-exception-personnalisee","title":"Cr\u00e9ation d'une Exception Personnalis\u00e9e","text":"<p>Vous pouvez \u00e9tendre la classe <code>Exception</code> pour cr\u00e9er vos propres exceptions.</p> <pre><code>class CustomException extends Exception\n{\n    public function errorMessage(): string\n    {\n        return \"Erreur personnalis\u00e9e : \" . $this-&gt;getMessage();\n    }\n}\n\ntry {\n    throw new CustomException(\"Une erreur est survenue.\");\n} catch (CustomException $e) {\n    echo $e-&gt;errorMessage();\n}\n</code></pre>"},{"location":"doc/try%20catch/#conseils-pratiques","title":"Conseils Pratiques","text":"<ol> <li>Utilisez des Exceptions Sp\u00e9cifiques : Capturez des exceptions pr\u00e9cises pour am\u00e9liorer la lisibilit\u00e9 et la gestion des erreurs.</li> <li>Propagation des Exceptions : Si une exception ne peut \u00eatre g\u00e9r\u00e9e localement, relancez-la avec <code>throw $e</code>.</li> <li>Logging : Journalisez toutes les exceptions pour faciliter le d\u00e9bogage.</li> <li>Evitez de Tout Attraper : Ne capturez pas <code>Throwable</code> ou <code>Exception</code> \u00e0 moins d'avoir une bonne raison.</li> <li>Utilisez des Messages Clairs : Les messages d'exception doivent \u00eatre explicites pour identifier rapidement les probl\u00e8mes.</li> </ol>"},{"location":"doc/try%20catch/#exemple-pratique","title":"Exemple Pratique","text":"<p>Un exemple combinant plusieurs types d'exceptions :</p> <pre><code>try {\n    $db = new PDO('mysql:host=localhost;dbname=test', 'user', 'password');\n    if (!$db) {\n        throw new PDOException(\"Connexion \u00e0 la base de donn\u00e9es \u00e9chou\u00e9e.\");\n    }\n    $result = $db-&gt;query(\"SELECT * FROM users WHERE id = 1\");\n    if (!$result) {\n        throw new UnexpectedValueException(\"Aucun r\u00e9sultat trouv\u00e9.\");\n    }\n} catch (PDOException $e) {\n    error_log($e-&gt;getMessage());\n    echo \"Erreur de base de donn\u00e9es.\";\n} catch (UnexpectedValueException $e) {\n    echo $e-&gt;getMessage();\n} catch (Exception $e) {\n    echo \"Une erreur inattendue est survenue.\";\n}\n</code></pre>"},{"location":"doc/try%20catch/#conclusion","title":"Conclusion","text":"<p>Les blocs <code>try-catch</code> sont indispensables pour g\u00e9rer les exceptions et am\u00e9liorer la r\u00e9silience de vos applications PHP. En suivant les bonnes pratiques et en faisant attention aux pi\u00e8ges courants, vous pouvez \u00e9crire un code plus robuste et maintenable.</p>"},{"location":"outils/%28outils%29/","title":"FOLDER","text":"<p>[[brevo]] [[phpCsFixer]] [[phpStan]] [[Rector doc]]</p>"},{"location":"outils/Rector%20doc/","title":"Rector","text":""},{"location":"outils/Rector%20doc/#quest-ce-que-rector","title":"\ud83c\udfaf Qu'est-ce que Rector ?","text":"<p>Rector est votre assistant personnel pour la modernisation de code PHP ! Imaginez-le comme un \"correcteur automatique\" ultra-intelligent pour votre code. Au lieu de modifier manuellement des centaines de fichiers, Rector le fait pour vous en quelques secondes.</p>"},{"location":"outils/Rector%20doc/#installation-premiers-pas","title":"\ud83d\udcbb Installation : Premiers pas","text":""},{"location":"outils/Rector%20doc/#1-installez-rector-via-composer","title":"1\ufe0f\u20e3 Installez Rector via Composer","text":"<pre><code># Cette commande installe Rector comme outil de d\u00e9veloppement\ncomposer require rector/rector --dev\n\n# V\u00e9rifiez que l'installation a r\u00e9ussi\n./vendor/bin/rector --version\n</code></pre>"},{"location":"outils/Rector%20doc/#configuration-creons-votre-fichier-rectorphp","title":"\ud83d\udee0 Configuration : Cr\u00e9ons votre fichier rector.php","text":"<p>La configuration de Rector se fait dans un fichier <code>rector.php</code>. Voyons comment le construire \u00e9tape par \u00e9tape :</p>"},{"location":"outils/Rector%20doc/#version-basique","title":"Version basique :","text":"<pre><code>&lt;?php\n\n// 1. On d\u00e9clare qu'on veut du PHP strict\ndeclare(strict_types=1);\n\n// 2. On importe les classes n\u00e9cessaires\nuse Rector\\Config\\RectorConfig;\n\n// 3. On cr\u00e9e notre configuration\nreturn static function (RectorConfig $rectorConfig): void {\n    // 4. On indique o\u00f9 chercher les fichiers\n    $rectorConfig-&gt;paths([\n        __DIR__ . '/src'  // \ud83d\udc48 Dossier principal\n    ]);\n};\n</code></pre>"},{"location":"outils/Rector%20doc/#version-plus-avancee","title":"Version plus avanc\u00e9e :","text":"<pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse Rector\\Config\\RectorConfig;\nuse Rector\\Set\\ValueObject\\LevelSetList;  // \ud83d\udc48 Pour les r\u00e8gles de niveau PHP\nuse Rector\\Symfony\\Set\\SymfonySetList;    // \ud83d\udc48 Pour les r\u00e8gles Symfony\n\nreturn static function (RectorConfig $rectorConfig): void {\n    // \ud83c\udfaf O\u00f9 chercher les fichiers\n    $rectorConfig-&gt;paths([\n        __DIR__ . '/src',          // Dossier principal\n        __DIR__ . '/tests',        // Tests \u00e9galement\n    ]);\n\n    // \ud83c\udfa8 Quelles r\u00e8gles appliquer\n    $rectorConfig-&gt;sets([\n        LevelSetList::UP_TO_PHP_74,         // \u2b50 Mise \u00e0 jour vers PHP 7.4\n        SymfonySetList::SYMFONY_54,         // \u2b50 Migration vers Symfony 5.4\n        SymfonySetList::SYMFONY_CODE_QUALITY, // \u2b50 Bonnes pratiques Symfony\n    ]);\n};\n</code></pre>"},{"location":"outils/Rector%20doc/#utilisation-comment-lancer-rector","title":"\ud83c\udfae Utilisation : Comment lancer Rector ?","text":""},{"location":"outils/Rector%20doc/#mode-test-dry-run","title":"Mode test (dry-run) :","text":"<pre><code># \ud83d\udc40 Voir ce qui va changer sans rien modifier\n./vendor/bin/rector process src --dry-run\n\n# \ud83d\udd0d Avec plus de d\u00e9tails\n./vendor/bin/rector process src --dry-run --debug\n</code></pre>"},{"location":"outils/Rector%20doc/#mode-reel","title":"Mode r\u00e9el :","text":"<pre><code># \u2728 Appliquer les changements\n./vendor/bin/rector process src\n\n# \ud83d\ude80 Sur un fichier sp\u00e9cifique\n./vendor/bin/rector process src/Controller/MonController.php\n</code></pre>"},{"location":"outils/Rector%20doc/#exemples-concrets-de-migrations","title":"\ud83d\udcda Exemples concrets de migrations","text":""},{"location":"outils/Rector%20doc/#1-exemple-migration-dun-controller","title":"1\ufe0f\u20e3 Exemple : Migration d'un Controller","text":"<p>\ud83d\udc49 Avant (Symfony 4) :</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\n/**\n * @Route(\"/api\")\n */\nclass ApiController extends Controller\n{\n    /**\n     * @Route(\"/users\", name=\"api_users\")\n     * @return Response\n     */\n    public function getUsers()\n    {\n        return $this-&gt;json($this-&gt;getDoctrine()-&gt;getRepository(User::class)-&gt;findAll());\n    }\n}\n</code></pre> <p>\ud83d\udc49 Apr\u00e8s (Symfony 5/6) :</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\n#[Route('/api')]  // \u2728 Nouvelle syntaxe d'attribut\nclass ApiController extends AbstractController  // \ud83d\udc48 Nouveau controller de base\n{\n    #[Route('/users', name: 'api_users')]\n    public function getUsers(\n        ManagerRegistry $doctrine  // \ud83d\udc48 Injection de d\u00e9pendance\n    ): Response  // \ud83d\udc48 Type de retour explicite\n    {\n        return $this-&gt;json(\n            $doctrine-&gt;getRepository(User::class)-&gt;findAll()\n        );\n    }\n}\n</code></pre>"},{"location":"outils/Rector%20doc/#2-exemple-migration-dune-entity","title":"2\ufe0f\u20e3 Exemple : Migration d'une Entity","text":"<p>\ud83d\udc49 Avant :</p> <pre><code>&lt;?php\n\nnamespace App\\Entity;\n\n/**\n * @ORM\\Entity(repositoryClass=\"App\\Repository\\UserRepository\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n}\n</code></pre> <p>\ud83d\udc49 Apr\u00e8s :</p> <pre><code>&lt;?php\n\nnamespace App\\Entity;\n\n#[ORM\\Entity(repositoryClass: UserRepository::class)]  // \u2728 Attribut moderne\nclass User\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;  // \ud83d\udc48 Type explicite + nullable\n\n    #[ORM\\Column(length: 255)]\n    private string $email;  // \ud83d\udc48 Type explicite\n}\n</code></pre>"},{"location":"outils/Rector%20doc/#cas-pratiques-configuration-pour-des-besoins-specifiques","title":"\ud83c\udfaf Cas pratiques : Configuration pour des besoins sp\u00e9cifiques","text":""},{"location":"outils/Rector%20doc/#1-migration-php-74-vers-php-80","title":"1\ufe0f\u20e3 Migration PHP 7.4 vers PHP 8.0 :","text":"<pre><code>$rectorConfig-&gt;sets([\n    LevelSetList::UP_TO_PHP_80,  // \u2b06\ufe0f Mise \u00e0 jour vers PHP 8.0\n]);\n</code></pre>"},{"location":"outils/Rector%20doc/#2-migration-symfony-avec-des-regles-specifiques","title":"2\ufe0f\u20e3 Migration Symfony avec des r\u00e8gles sp\u00e9cifiques :","text":"<pre><code>$rectorConfig-&gt;sets([\n    SymfonySetList::SYMFONY_54,         // \ud83c\udfaf Base Symfony 5.4\n    SymfonySetList::SYMFONY_52_VALIDATOR_ATTRIBUTES,  // \u2728 Validateurs en attributs\n    SymfonySetList::SYMFONY_CODE_QUALITY,  // \ud83c\udfa8 Qualit\u00e9 de code\n]);\n</code></pre>"},{"location":"outils/Rector%20doc/#3-exclure-certains-fichiers","title":"3\ufe0f\u20e3 Exclure certains fichiers :","text":"<pre><code>$rectorConfig-&gt;skip([\n    __DIR__ . '/src/Legacy/*.php',          // \ud83d\udeab Ignorer le code legacy\n    __DIR__ . '/src/Generated/*.php',       // \ud83d\udeab Ignorer le code g\u00e9n\u00e9r\u00e9\n    __DIR__ . '/src/Kernel.php',            // \ud83d\udeab Ignorer un fichier sp\u00e9cifique\n]);\n</code></pre>"},{"location":"outils/Rector%20doc/#astuces-pour-deboguer","title":"\ud83d\udd27 Astuces pour d\u00e9boguer","text":""},{"location":"outils/Rector%20doc/#si-vous-avez-des-erreurs-de-memoire","title":"Si vous avez des erreurs de m\u00e9moire :","text":"<pre><code># \ud83d\udcaa Augmenter la m\u00e9moire disponible\nphp -d memory_limit=-1 vendor/bin/rector process src\n</code></pre>"},{"location":"outils/Rector%20doc/#pour-plus-de-details-sur-les-changements","title":"Pour plus de d\u00e9tails sur les changements :","text":"<pre><code># \ud83d\udd0d Mode verbose\nvendor/bin/rector process src --dry-run --debug\n</code></pre>"},{"location":"outils/Rector%20doc/#pour-ignorer-certaines-regles","title":"Pour ignorer certaines r\u00e8gles :","text":"<pre><code>$rectorConfig-&gt;skip([\n    \\Rector\\Symfony\\Rector\\ClassMethod\\ParamTypeFromRouteRequiredRegexRector::class,\n]);\n</code></pre>"},{"location":"outils/Rector%20doc/#bonnes-pratiques","title":"\ud83d\udcdd Bonnes pratiques","text":"<ol> <li>\ud83d\udd04 Toujours faire un commit avant :</li> </ol> <pre><code>git checkout -b rector-migration\n</code></pre> <ol> <li>\ud83d\udccb Proc\u00e9der par \u00e9tapes :</li> <li>D'abord les r\u00e8gles PHP</li> <li>Ensuite les r\u00e8gles Symfony</li> <li> <p>Enfin les r\u00e8gles sp\u00e9cifiques</p> </li> <li> <p>\u2705 Tester apr\u00e8s chaque \u00e9tape :</p> </li> </ol> <pre><code># Tests unitaires\nphp bin/phpunit\n\n# Tests fonctionnels\nsymfony server:start\n</code></pre>"},{"location":"outils/brevo/","title":"Documentation : Utiliser Brevo (ex-SendinBlue) pour l'envoi d'e-mails avec PHP Symfony","text":""},{"location":"outils/brevo/#prerequis","title":"Pr\u00e9requis","text":"<ol> <li>Compte Brevo : Assurez-vous d'avoir un compte actif sur Brevo.</li> <li>Cl\u00e9 API : G\u00e9n\u00e9rez une cl\u00e9 API sur votre tableau de bord Brevo.</li> <li>Projet Symfony : Ayez un projet Symfony configur\u00e9 (version 5.4 ou ult\u00e9rieure recommand\u00e9e).</li> </ol>"},{"location":"outils/brevo/#installation","title":"Installation","text":""},{"location":"outils/brevo/#1-installer-le-sdk-brevo","title":"1. Installer le SDK Brevo","text":"<p>Brevo fournit un SDK officiel pour PHP. Installez-le en utilisant Composer :</p> <pre><code>composer require sendinblue/api-v3-sdk\n</code></pre>"},{"location":"outils/brevo/#2-installer-la-bibliotheque-symfony-mailer","title":"2. Installer la biblioth\u00e8que Symfony Mailer","text":"<p>Symfony Mailer simplifie l'envoi d'e-mails. Ajoutez-le si ce n'est pas d\u00e9j\u00e0 fait :</p> <pre><code>composer require symfony/mailer\n</code></pre>"},{"location":"outils/brevo/#configuration","title":"Configuration","text":""},{"location":"outils/brevo/#1-ajouter-la-cle-api-dans-les-variables-denvironnement","title":"1. Ajouter la cl\u00e9 API dans les variables d'environnement","text":"<p>Dans le fichier <code>.env</code>, ajoutez votre cl\u00e9 API Brevo :</p> <pre><code>BREVO_API_KEY=your_api_key_here\n</code></pre>"},{"location":"outils/brevo/#2-configurer-symfony-mailer","title":"2. Configurer Symfony Mailer","text":"<p>Dans le fichier <code>config/packages/mailer.yaml</code>, configurez Symfony Mailer pour utiliser Brevo via SMTP :</p> <pre><code>framework:\n    mailer:\n        dsn: 'smtp://smtp-relay.sendinblue.com:587?encryption=tls&amp;auth_mode=login&amp;username=your_email@domain.com&amp;password=%env(BREVO_API_KEY)%'\n</code></pre> <p>Remplacez <code>your_email@domain.com</code> par l'adresse e-mail associ\u00e9e \u00e0 votre compte Brevo.</p>"},{"location":"outils/brevo/#envoi-de-mails-avec-symfony-mailer","title":"Envoi d'e-mails avec Symfony Mailer","text":""},{"location":"outils/brevo/#1-creer-un-service-pour-lenvoi-de-mails","title":"1. Cr\u00e9er un service pour l'envoi d'e-mails","text":"<p>Dans le dossier <code>src/Service</code>, cr\u00e9ez un fichier <code>EmailService.php</code> :</p> <pre><code>&lt;?php\n\nnamespace App\\Service;\n\nuse Symfony\\Component\\Mailer\\MailerInterface;\nuse Symfony\\Component\\Mime\\Email;\n\nclass EmailService\n{\n    private $mailer;\n\n    public function __construct(MailerInterface $mailer)\n    {\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendEmail(string $to, string $subject, string $content): void\n    {\n        $email = (new Email())\n            -&gt;from('your_email@domain.com')\n            -&gt;to($to)\n            -&gt;subject($subject)\n            -&gt;html($content);\n\n        $this-&gt;mailer-&gt;send($email);\n    }\n}\n</code></pre> <p>Remplacez <code>your_email@domain.com</code> par votre adresse e-mail d'envoi.</p>"},{"location":"outils/brevo/#2-utiliser-le-service-dans-un-controleur","title":"2. Utiliser le service dans un contr\u00f4leur","text":"<p>Dans un contr\u00f4leur, injectez et utilisez le service :</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\nuse App\\Service\\EmailService;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass EmailController extends AbstractController\n{\n    private $emailService;\n\n    public function __construct(EmailService $emailService)\n    {\n        $this-&gt;emailService = $emailService;\n    }\n\n    #[Route('/send-email', name: 'send_email')]\n    public function sendEmail(): Response\n    {\n        $this-&gt;emailService-&gt;sendEmail(\n            'recipient@example.com',\n            'Test Subject',\n            '&lt;h1&gt;Hello from Symfony and Brevo!&lt;/h1&gt;'\n        );\n\n        return new Response('Email sent successfully!');\n    }\n}\n</code></pre>"},{"location":"outils/brevo/#envoi-de-mails-transactionnels-avec-le-sdk-brevo","title":"Envoi d'e-mails transactionnels avec le SDK Brevo","text":"<p>Si vous pr\u00e9f\u00e9rez utiliser directement le SDK Brevo pour envoyer des e-mails transactionnels :</p>"},{"location":"outils/brevo/#1-configuration","title":"1. Configuration","text":"<p>Ajoutez la cl\u00e9 API dans votre service :</p> <pre><code>&lt;?php\n\nnamespace App\\Service;\n\nuse SendinBlue\\Client\\Configuration;\nuse SendinBlue\\Client\\Api\\TransactionalEmailsApi;\n\nclass BrevoEmailService\n{\n    private $apiInstance;\n\n    public function __construct(string $brevoApiKey)\n    {\n        $config = Configuration::getDefaultConfiguration()-&gt;setApiKey('api-key', $brevoApiKey);\n        $this-&gt;apiInstance = new TransactionalEmailsApi(null, $config);\n    }\n\n    public function sendTransactionalEmail(string $to, string $subject, string $content): void\n    {\n        $sendSmtpEmail = new \\SendinBlue\\Client\\Model\\SendSmtpEmail([\n            'to' =&gt; [['email' =&gt; $to]],\n            'subject' =&gt; $subject,\n            'htmlContent' =&gt; $content,\n            'sender' =&gt; ['name' =&gt; 'Your Name', 'email' =&gt; 'your_email@domain.com'],\n        ]);\n\n        $this-&gt;apiInstance-&gt;sendTransacEmail($sendSmtpEmail);\n    }\n}\n</code></pre>"},{"location":"outils/brevo/#2-utilisation","title":"2. Utilisation","text":"<p>Injectez et utilisez <code>BrevoEmailService</code> dans vos contr\u00f4leurs ou services.</p>"},{"location":"outils/brevo/#conclusion","title":"Conclusion","text":"<p>Vous pouvez maintenant utiliser Symfony avec Brevo pour envoyer des e-mails via SMTP ou leur SDK API. Adaptez les exemples fournis \u00e0 vos besoins et assurez-vous de tester vos configurations avant de passer en production.</p>"},{"location":"outils/phpCsFixer/","title":"Documentation sur PHP CS Fixer","text":"<p>PHP CS Fixer est un outil permettant de formater et de corriger automatiquement le code PHP en fonction de r\u00e8gles de codage d\u00e9finies. Il est particuli\u00e8rement utile pour garantir la coh\u00e9rence du style de code dans un projet et respecter les normes \u00e9tablies (comme PSR-12).</p>"},{"location":"outils/phpCsFixer/#installation","title":"Installation","text":""},{"location":"outils/phpCsFixer/#1-installation-globale-via-composer","title":"1. Installation globale via Composer","text":"<pre><code>composer global require friendsofphp/php-cs-fixer\n</code></pre> <p>Assurez-vous que le chemin des binaires de Composer est dans votre variable <code>PATH</code>.</p>"},{"location":"outils/phpCsFixer/#2-installation-locale-via-composer","title":"2. Installation locale via Composer","text":"<p>Ajoutez PHP CS Fixer \u00e0 votre projet :</p> <pre><code>composer require --dev friendsofphp/php-cs-fixer\n</code></pre> <p>Cela installera l'outil dans le r\u00e9pertoire <code>vendor/bin</code>.</p>"},{"location":"outils/phpCsFixer/#3-telechargement-manuel","title":"3. T\u00e9l\u00e9chargement manuel","text":"<p>T\u00e9l\u00e9chargez le fichier phar depuis https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases :</p> <pre><code>wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/vX.X.X/php-cs-fixer.phar\nchmod +x php-cs-fixer.phar\nsudo mv php-cs-fixer.phar /usr/local/bin/php-cs-fixer\n</code></pre>"},{"location":"outils/phpCsFixer/#utilisation-de-base","title":"Utilisation de base","text":""},{"location":"outils/phpCsFixer/#1-formater-un-fichier-ou-un-repertoire","title":"1. Formater un fichier ou un r\u00e9pertoire","text":"<p>Pour corriger un fichier ou un r\u00e9pertoire :</p> <pre><code>php-cs-fixer fix &lt;chemin_du_fichier_ou_dossier&gt;\n</code></pre> <p>Par exemple :</p> <pre><code>php-cs-fixer fix src/\n</code></pre>"},{"location":"outils/phpCsFixer/#2-afficher-les-changements-sans-les-appliquer","title":"2. Afficher les changements sans les appliquer","text":"<p>Ajoutez l'option <code>--dry-run</code> :</p> <pre><code>php-cs-fixer fix --dry-run --diff src/\n</code></pre> <p>Cela montre uniquement les modifications qui seraient apport\u00e9es.</p>"},{"location":"outils/phpCsFixer/#3-verification-de-la-version","title":"3. V\u00e9rification de la version","text":"<pre><code>php-cs-fixer --version\n</code></pre>"},{"location":"outils/phpCsFixer/#4-afficher-laide","title":"4. Afficher l'aide","text":"<pre><code>php-cs-fixer --help\n</code></pre>"},{"location":"outils/phpCsFixer/#configuration","title":"Configuration","text":"<p>Pour personnaliser les r\u00e8gles et la configuration, cr\u00e9ez un fichier <code>.php-cs-fixer.dist.php</code> \u00e0 la racine du projet :</p>"},{"location":"outils/phpCsFixer/#exemple-de-fichier-php-cs-fixerdistphp","title":"Exemple de fichier <code>.php-cs-fixer.dist.php</code>","text":"<pre><code>&lt;?php\n\nuse PhpCsFixer\\Config;\n\nreturn (new Config())\n    -&gt;setRiskyAllowed(true) // Permet les r\u00e8gles \"risqu\u00e9es\"\n    -&gt;setRules([\n        '@PSR12' =&gt; true, // Applique les r\u00e8gles PSR-12\n        'array_syntax' =&gt; ['syntax' =&gt; 'short'], // Utilise la syntaxe courte des tableaux\n        'strict_param' =&gt; true, // Force l'utilisation de param\u00e8tres stricts\n    ])\n    -&gt;setFinder(\n        PhpCsFixer\\Finder::create()\n            -&gt;in(__DIR__ . '/src') // D\u00e9finit le r\u00e9pertoire \u00e0 analyser\n            -&gt;name('*.php')\n            -&gt;notName('*.blade.php') // Exclut certains fichiers\n            -&gt;ignoreDotFiles(true)\n            -&gt;ignoreVCS(true)\n    );\n</code></pre>"},{"location":"outils/phpCsFixer/#lancer-php-cs-fixer-avec-la-configuration","title":"Lancer PHP CS Fixer avec la configuration","text":"<pre><code>php-cs-fixer fix --config=.php-cs-fixer.dist.php\n</code></pre>"},{"location":"outils/phpCsFixer/#principales-regles-disponibles","title":"Principales r\u00e8gles disponibles","text":""},{"location":"outils/phpCsFixer/#categories-de-regles","title":"Cat\u00e9gories de r\u00e8gles","text":"<ul> <li>@PSR1 : R\u00e8gles de base pour les fichiers PHP.</li> <li>@PSR2 : Extension des r\u00e8gles PSR-1 avec des conventions de style de code.</li> <li>@PSR12 : Remplacement de PSR-2 avec des conventions modernis\u00e9es.</li> <li>@Symfony : Normes de style de code utilis\u00e9es par Symfony.</li> </ul>"},{"location":"outils/phpCsFixer/#quelques-exemples-de-regles-specifiques","title":"Quelques exemples de r\u00e8gles sp\u00e9cifiques","text":"<ul> <li><code>array_syntax</code>: D\u00e9finit la syntaxe des tableaux (<code>short</code> ou <code>long</code>).</li> <li><code>binary_operator_spaces</code>: Configure les espaces autour des op\u00e9rateurs binaires.</li> <li><code>no_trailing_whitespace</code>: Supprime les espaces en fin de ligne.</li> <li><code>single_quote</code>: Utilise des guillemets simples pour les cha\u00eenes.</li> </ul> <p>Pour la liste compl\u00e8te, consultez la commande suivante :</p> <pre><code>php-cs-fixer describe --list\n</code></pre>"},{"location":"outils/phpCsFixer/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Utiliser un fichier de configuration : Cela permet de centraliser et de standardiser les r\u00e8gles au sein d'un projet.</li> <li>V\u00e9rifier les modifications avant de les appliquer : Utilisez <code>--dry-run</code> pour \u00e9viter des changements inattendus.</li> <li>Automatiser avec un pr\u00e9-commit hook : Ajoutez un hook Git pour ex\u00e9cuter PHP CS Fixer avant chaque commit.</li> </ol>"},{"location":"outils/phpCsFixer/#exemple-de-hook-git","title":"Exemple de hook Git","text":"<p>Dans <code>.git/hooks/pre-commit</code> :</p> <pre><code>#!/bin/sh\n\nphp-cs-fixer fix --config=.php-cs-fixer.dist.php --dry-run --diff\nif [ $? -ne 0 ]; then\n    echo \"\\nStyle errors detected. Please fix them before committing.\"\n    exit 1\nfi\n</code></pre> <p>Rendez-le ex\u00e9cutable :</p> <pre><code>chmod +x .git/hooks/pre-commit\n</code></pre>"},{"location":"outils/phpCsFixer/#cas-derreurs-courantes","title":"Cas d'erreurs courantes","text":""},{"location":"outils/phpCsFixer/#1-php-cs-fixer-command-not-found","title":"1. \"php-cs-fixer: command not found\"","text":"<p>Cause : PHP CS Fixer n'est pas install\u00e9 ou n'est pas dans le <code>PATH</code>. Solution : V\u00e9rifiez votre installation et ajoutez le chemin des binaires \u00e0 la variable <code>PATH</code>.</p>"},{"location":"outils/phpCsFixer/#2-no-rules-defined","title":"2. \"No rules defined\"","text":"<p>Cause : Le fichier de configuration n'a pas de r\u00e8gles d\u00e9finies. Solution : V\u00e9rifiez votre fichier <code>.php-cs-fixer.dist.php</code> et ajoutez des r\u00e8gles.</p>"},{"location":"outils/phpCsFixer/#3-nothing-to-fix","title":"3. \"Nothing to fix\"","text":"<p>Cause : Aucun fichier ne correspond au Finder ou les fichiers sont d\u00e9j\u00e0 conformes. Solution : V\u00e9rifiez les chemins configur\u00e9s dans le Finder.</p>"},{"location":"outils/phpCsFixer/#conclusion","title":"Conclusion","text":"<p>PHP CS Fixer est un outil puissant pour maintenir un code PHP propre et coh\u00e9rent. Il s'int\u00e8gre facilement dans des workflows existants et prend en charge de nombreuses normes de codage. En suivant les bonnes pratiques et en personnalisant les r\u00e8gles, il devient un alli\u00e9 indispensable dans le d\u00e9veloppement PHP professionnel.</p> <p>Pour plus d'informations, consultez la documentation officielle : https://cs.symfony.com/</p>"},{"location":"outils/phpStan/","title":"Documentation sur PHPStan","text":""},{"location":"outils/phpStan/#introduction","title":"Introduction","text":"<p>PHPStan est un outil d'analyse statique de code PHP qui d\u00e9tecte des bugs dans votre code sans l'ex\u00e9cuter. Il aide les d\u00e9veloppeurs \u00e0 am\u00e9liorer la qualit\u00e9 de leur code en signalant les erreurs potentielles et en fournissant des suggestions pour les corriger.</p>"},{"location":"outils/phpStan/#installation","title":"Installation","text":""},{"location":"outils/phpStan/#installation-via-composer","title":"Installation via Composer","text":"<p>Pour installer PHPStan en tant que d\u00e9pendance de d\u00e9veloppement dans votre projet :</p> <pre><code>composer require --dev phpstan/phpstan\n</code></pre>"},{"location":"outils/phpStan/#installation-globale","title":"Installation globale","text":"<p>Si vous souhaitez utiliser PHPStan globalement :</p> <pre><code>composer global require phpstan/phpstan\n</code></pre> <p>Assurez-vous d'ajouter le chemin global de Composer \u00e0 votre variable <code>PATH</code> pour pouvoir ex\u00e9cuter PHPStan depuis n'importe o\u00f9.</p>"},{"location":"outils/phpStan/#configuration","title":"Configuration","text":"<p>PHPStan peut \u00eatre configur\u00e9 via un fichier <code>phpstan.neon</code> ou <code>phpstan.neon.dist</code> \u00e0 la racine de votre projet.</p>"},{"location":"outils/phpStan/#exemple-de-configuration-basique","title":"Exemple de configuration basique","text":"<pre><code>parameters:\n    level: max\n    paths:\n        - src\n        - tests\n    bootstrapFiles:\n        - vendor/autoload.php\n</code></pre>"},{"location":"outils/phpStan/#niveaux-danalyse","title":"Niveaux d'analyse","text":"<p>PHPStan offre 9 niveaux d'analyse (de 0 \u00e0 8). Le niveau 0 signale uniquement les erreurs critiques, tandis que le niveau 8 offre l'analyse la plus stricte. Pour d\u00e9finir un niveau :</p> <pre><code>parameters:\n    level: 5\n</code></pre>"},{"location":"outils/phpStan/#utilisation","title":"Utilisation","text":""},{"location":"outils/phpStan/#commande-de-base","title":"Commande de base","text":"<p>Pour analyser le dossier <code>src</code> :</p> <pre><code>vendor/bin/phpstan analyse src\n</code></pre>"},{"location":"outils/phpStan/#specifier-un-niveau-danalyse","title":"Sp\u00e9cifier un niveau d'analyse","text":"<pre><code>vendor/bin/phpstan analyse src --level=5\n</code></pre>"},{"location":"outils/phpStan/#utiliser-un-fichier-de-configuration","title":"Utiliser un fichier de configuration","text":"<p>Si un fichier de configuration existe :</p> <pre><code>vendor/bin/phpstan analyse\n</code></pre>"},{"location":"outils/phpStan/#fournir-une-configuration-explicite","title":"Fournir une configuration explicite","text":"<pre><code>vendor/bin/phpstan analyse --configuration=phpstan.neon\n</code></pre>"},{"location":"outils/phpStan/#integration-avec-des-frameworks","title":"Int\u00e9gration avec des Frameworks","text":"<p>PHPStan propose des extensions pour les frameworks comme Symfony, Laravel, etc. Ces extensions peuvent \u00eatre install\u00e9es via Composer.</p>"},{"location":"outils/phpStan/#exemple-avec-symfony","title":"Exemple avec Symfony","text":"<pre><code>composer require --dev phpstan/phpstan-symfony\n</code></pre> <p>Ajoutez l'extension \u00e0 votre fichier de configuration :</p> <pre><code>includes:\n    - vendor/phpstan/phpstan-symfony/extension.neon\n</code></pre>"},{"location":"outils/phpStan/#commandes-utiles","title":"Commandes utiles","text":""},{"location":"outils/phpStan/#verifier-linstallation-de-phpstan","title":"V\u00e9rifier l'installation de PHPStan","text":"<p>Pour v\u00e9rifier que PHPStan est install\u00e9 :</p> <pre><code>composer show phpstan/phpstan\n</code></pre>"},{"location":"outils/phpStan/#afficher-laide","title":"Afficher l'aide","text":"<p>Pour afficher toutes les options disponibles :</p> <pre><code>vendor/bin/phpstan --help\n</code></pre>"},{"location":"outils/phpStan/#resolution-des-problemes","title":"R\u00e9solution des probl\u00e8mes","text":""},{"location":"outils/phpStan/#probleme-de-memoire","title":"Probl\u00e8me de m\u00e9moire","text":"<p>Si PHPStan consomme trop de m\u00e9moire, augmentez la limite de m\u00e9moire PHP :</p> <pre><code>php -d memory_limit=2G vendor/bin/phpstan analyse\n</code></pre>"},{"location":"outils/phpStan/#suppression-des-faux-positifs","title":"Suppression des faux positifs","text":"<p>Si PHPStan signale des erreurs incorrectes, vous pouvez les ignorer dans le fichier de configuration :</p> <pre><code>parameters:\n    ignoreErrors:\n        - \"#Pattern de l'erreur#\"\n</code></pre>"},{"location":"outils/phpStan/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Int\u00e9grez PHPStan dans votre CI/CD : Ajoutez PHPStan dans votre pipeline de d\u00e9ploiement pour d\u00e9tecter les probl\u00e8mes t\u00f4t.</li> <li>Montez progressivement les niveaux : Commencez par un niveau bas et augmentez progressivement.</li> <li>Utilisez des extensions : Adaptez PHPStan \u00e0 votre projet en ajoutant des extensions sp\u00e9cifiques \u00e0 vos biblioth\u00e8ques et frameworks.</li> <li>Documentez vos suppressions : Justifiez les erreurs ignor\u00e9es pour \u00e9viter les oublis ou la confusion.</li> </ol>"},{"location":"outils/phpStan/#ressources-utiles","title":"Ressources utiles","text":"<ul> <li>Documentation officielle</li> <li>Guide des extensions</li> <li>R\u00e9f\u00e9rentiel GitHub</li> </ul> <p>En utilisant PHPStan, vous assurez une meilleure qualit\u00e9 et maintenabilit\u00e9 de votre code. Adoptez-le d\u00e8s aujourd'hui pour un d\u00e9veloppement PHP plus robuste !</p>"},{"location":"symfony/%28phpsymfony%29/","title":"FOLDER","text":"<p>[[Symfony doc]]</p> <p>[[(phpsymfonyareas)]] [[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/Symfony%20doc/","title":"Pr\u00e9sentation","text":""},{"location":"symfony/Symfony%20doc/#documentation-php-de-a-a-z","title":"Documentation PHP de A \u00e0 Z","text":""},{"location":"symfony/Symfony%20doc/#1-introduction-a-php","title":"1. Introduction \u00e0 PHP","text":"<p>PHP (Hypertext Preprocessor) est un langage de script c\u00f4t\u00e9 serveur con\u00e7u pour le d\u00e9veloppement web.</p> <pre><code>&lt;?php\n// Exemple simple de script PHP\necho \"Hello, World!\";\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#2-installation","title":"2. Installation","text":"<ol> <li>T\u00e9l\u00e9chargez XAMPP ou WAMP.</li> <li>Installez et configurez un serveur local.</li> <li>Placez vos fichiers PHP dans le dossier <code>htdocs</code> ou \u00e9quivalent.</li> </ol>"},{"location":"symfony/Symfony%20doc/#3-syntaxe-de-base","title":"3. Syntaxe de Base","text":""},{"location":"symfony/Symfony%20doc/#31-variables","title":"3.1 Variables","text":"<pre><code>&lt;?php\n$nom = \"L\u00e9onard\";\n$age = 25;\necho \"Bonjour $nom, vous avez $age ans.\";\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#32-types-de-donnees","title":"3.2 Types de Donn\u00e9es","text":"<pre><code>&lt;?php\n$entier = 42;          // Integer\n$flottant = 3.14;      // Float\n$texte = \"Bonjour\";    // String\n$booleen = true;       // Boolean\n$tableau = [1, 2, 3];  // Array\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#4-structures-de-controle","title":"4. Structures de Contr\u00f4le","text":""},{"location":"symfony/Symfony%20doc/#41-conditions","title":"4.1 Conditions","text":"<pre><code>&lt;?php\nif ($age &gt;= 18) {\n    echo \"Adulte\";\n} else {\n    echo \"Mineur\";\n}\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#42-boucles","title":"4.2 Boucles","text":""},{"location":"symfony/Symfony%20doc/#boucle-for","title":"Boucle <code>for</code>","text":"<pre><code>&lt;?php\nfor ($i = 0; $i &lt; 5; $i++) {\n    echo \"It\u00e9ration $i\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#boucle-while","title":"Boucle <code>while</code>","text":"<pre><code>&lt;?php\n$i = 0;\nwhile ($i &lt; 5) {\n    echo \"It\u00e9ration $i\\n\";\n    $i++;\n}\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#5-fonctions","title":"5. Fonctions","text":"<pre><code>&lt;?php\nfunction addition($a, $b) {\n    return $a + $b;\n}\necho addition(3, 5); // 8\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#6-manipulation-de-formulaires-html","title":"6. Manipulation de Formulaires HTML","text":"<pre><code>&lt;!-- formulaire.html --&gt;\n&lt;form action=\"traitement.php\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"nom\" placeholder=\"Votre nom\"&gt;\n    &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>&lt;?php\n// traitement.php\n$nom = $_POST['nom'];\necho \"Bonjour, $nom\";\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#7-manipulation-de-bases-de-donnees","title":"7. Manipulation de Bases de Donn\u00e9es","text":""},{"location":"symfony/Symfony%20doc/#connexion-a-mysql","title":"Connexion \u00e0 MySQL","text":"<pre><code>&lt;?php\n$conn = new mysqli(\"localhost\", \"root\", \"\", \"ma_base\");\n\nif ($conn-&gt;connect_error) {\n    die(\"Erreur de connexion : \" . $conn-&gt;connect_error);\n}\necho \"Connect\u00e9 \u00e0 la base de donn\u00e9es\";\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#requetes","title":"Requ\u00eates","text":"<pre><code>&lt;?php\n// Ins\u00e9rer des donn\u00e9es\n$conn-&gt;query(\"INSERT INTO utilisateurs (nom, email) VALUES ('Leonard', 'email@example.com')\");\n\n// R\u00e9cup\u00e9rer des donn\u00e9es\n$result = $conn-&gt;query(\"SELECT * FROM utilisateurs\");\nwhile ($row = $result-&gt;fetch_assoc()) {\n    echo $row['nom'];\n}\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#documentation-symfony-de-a-a-z","title":"Documentation Symfony de A \u00e0 Z","text":""},{"location":"symfony/Symfony%20doc/#1-introduction-a-symfony","title":"1. Introduction \u00e0 Symfony","text":"<p>Symfony est un framework PHP bas\u00e9 sur le mod\u00e8le MVC, utilis\u00e9 pour d\u00e9velopper des applications web robustes.</p>"},{"location":"symfony/Symfony%20doc/#2-installation_1","title":"2. Installation","text":"<ol> <li>Installez Composer.</li> <li> <p>Installez Symfony CLI :</p> <p><code>bash curl -sS https://get.symfony.com/cli/installer | bash</code></p> </li> <li> <p>Cr\u00e9ez un projet :</p> <p><code>bash symfony new mon_projet --webapp</code></p> </li> </ol>"},{"location":"symfony/Symfony%20doc/#3-structure-de-symfony","title":"3. Structure de Symfony","text":""},{"location":"symfony/Symfony%20doc/#dossiers-principaux","title":"Dossiers principaux :","text":"<ul> <li><code>src/</code>: Code source (contr\u00f4leurs, entit\u00e9s, etc.).</li> <li><code>templates/</code>: Templates Twig.</li> <li><code>config/</code>: Configuration.</li> </ul>"},{"location":"symfony/Symfony%20doc/#4-creation-dun-controleur","title":"4. Cr\u00e9ation d'un Contr\u00f4leur","text":"<pre><code>php bin/console make:controller HomeController\n</code></pre>"},{"location":"symfony/Symfony%20doc/#exemple-de-controleur","title":"Exemple de Contr\u00f4leur","text":"<pre><code>&lt;?php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass HomeController extends AbstractController {\n    public function index(): Response {\n        return $this-&gt;render('home/index.html.twig', [\n            'message' =&gt; 'Bienvenue sur Symfony !',\n        ]);\n    }\n}\n</code></pre>"},{"location":"symfony/Symfony%20doc/#5-routes","title":"5. Routes","text":"<p>Les routes d\u00e9finissent les URL disponibles.</p>"},{"location":"symfony/Symfony%20doc/#exemple-de-route","title":"Exemple de Route","text":"<pre><code># config/routes.yaml\nhome:\n    path: /\n    controller: App\\Controller\\HomeController::index\n</code></pre>"},{"location":"symfony/Symfony%20doc/#6-twig-le-moteur-de-templates","title":"6. Twig : Le moteur de templates","text":"<pre><code>&lt;!-- templates/home/index.html.twig --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ message }}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#7-doctrine-orm-integre","title":"7. Doctrine : ORM int\u00e9gr\u00e9","text":""},{"location":"symfony/Symfony%20doc/#configuration","title":"Configuration","text":"<pre><code>php bin/console make:entity\n</code></pre>"},{"location":"symfony/Symfony%20doc/#exemple-dentite","title":"Exemple d'Entit\u00e9","text":"<pre><code>&lt;?php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass Utilisateur {\n    #[ORM\\Id, ORM\\GeneratedValue, ORM\\Column(type: \"integer\")]\n    private $id;\n\n    #[ORM\\Column(type: \"string\", length: 100)]\n    private $nom;\n}\n?&gt;\n</code></pre>"},{"location":"symfony/Symfony%20doc/#migration","title":"Migration","text":"<pre><code>php bin/console make:migration\nphp bin/console doctrine:migrations:migrate\n</code></pre>"},{"location":"symfony/Symfony%20doc/#8-formulaires","title":"8. Formulaires","text":"<pre><code>php bin/console make:form\n</code></pre>"},{"location":"symfony/Symfony%20doc/#exemple-de-formulaire","title":"Exemple de Formulaire","text":"<pre><code>&lt;?php\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass UtilisateurType extends AbstractType {\n    public function buildForm(FormBuilderInterface $builder, array $options) {\n        $builder\n            -&gt;add('nom');\n    }\n}\n?&gt;\n</code></pre>"},{"location":"symfony/areas/%28phpsymfonyareas%29/","title":"FOLDER","text":"<p>[[API Platform]] [[Asset management]] [[Bundles]] [[Cache]] [[Configuration]] [[Console Commands]] [[Controler]] [[Event Dispatcher]] [[Forms]] [[Internationalization (i18n)]] [[Messenger]] [[Migrations]] [[Profiler &amp; debuging]] [[Security]] [[Services &amp; Dependency Injection]] [[testing]] [[validation]]</p> <p>[[(phpsymfony)]]</p>"},{"location":"symfony/areas/API%20Platform/","title":"API Platform","text":""},{"location":"symfony/areas/API%20Platform/#documentation-symfony-api-platform","title":"Documentation Symfony : API Platform","text":""},{"location":"symfony/areas/API%20Platform/#description","title":"Description","text":"<p>API Platform est un framework bas\u00e9 sur Symfony pour d\u00e9velopper des API REST et GraphQL. Il permet de cr\u00e9er rapidement des API conformes aux meilleures pratiques de l'industrie, avec une configuration minimale. API Platform inclut des outils pour la cr\u00e9ation de ressources, la gestion de la pagination, la validation des donn\u00e9es, et l'authentification.</p>"},{"location":"symfony/areas/API%20Platform/#installation-de-api-platform","title":"Installation de API Platform","text":"<p>Pour installer API Platform dans un projet Symfony, vous pouvez utiliser Composer :</p> <pre><code>composer require api\n</code></pre> <p>Cela ajoute API Platform et ses d\u00e9pendances \u00e0 votre projet Symfony.</p>"},{"location":"symfony/areas/API%20Platform/#configuration-de-base","title":"Configuration de base","text":"<p>API Platform suit une approche convention-over-configuration. Les ressources sont d\u00e9finies par des entit\u00e9s Doctrine annot\u00e9es ou des ressources personnalis\u00e9es avec des contr\u00f4leurs.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-ressource-simple","title":"Exemple de ressource simple","text":"<pre><code>// src/Entity/Book.php\n\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource\n * @ORM\\Entity()\n */\nclass Book\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\")\n     */\n    private $title;\n\n    // getters et setters...\n}\n</code></pre> <ul> <li>@ApiResource : Annotation qui permet \u00e0 API Platform de consid\u00e9rer cette entit\u00e9 comme une ressource API.</li> <li>@ORM\\Entity : Indique que <code>Book</code> est une entit\u00e9 Doctrine.</li> </ul>"},{"location":"symfony/areas/API%20Platform/#routes-et-endpoints-automatiques","title":"Routes et Endpoints Automatiques","text":"<p>API Platform g\u00e9n\u00e8re automatiquement des routes pour toutes les ressources annot\u00e9es. Par exemple, pour l'entit\u00e9 <code>Book</code>, API Platform cr\u00e9e des routes pour :</p> <ul> <li><code>GET /api/books</code> pour r\u00e9cup\u00e9rer la liste des livres</li> <li><code>POST /api/books</code> pour cr\u00e9er un livre</li> <li><code>GET /api/books/{id}</code> pour r\u00e9cup\u00e9rer un livre par son identifiant</li> <li><code>PUT /api/books/{id}</code> pour modifier un livre</li> <li><code>DELETE /api/books/{id}</code> pour supprimer un livre</li> </ul>"},{"location":"symfony/areas/API%20Platform/#personnalisation-des-endpoints","title":"Personnalisation des Endpoints","text":"<p>Vous pouvez personnaliser les comportements de vos ressources API \u00e0 l'aide de l'annotation <code>@ApiResource</code>.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-personnalisation-dun-endpoint","title":"Exemple de personnalisation d'un endpoint","text":"<pre><code>// src/Entity/Book.php\n\n/**\n * @ApiResource(\n *     collectionOperations={\"get\"={\"path\"=\"/books\"}},\n *     itemOperations={\"get\"={\"path\"=\"/books/{id}\"}},\n *     attributes={\"pagination_enabled\"=false}\n * )\n */\nclass Book\n{\n    // ...\n}\n</code></pre> <ul> <li>collectionOperations : D\u00e9finit les op\u00e9rations disponibles pour la collection de ressources.</li> <li>itemOperations : D\u00e9finit les op\u00e9rations disponibles pour un \u00e9l\u00e9ment sp\u00e9cifique.</li> <li>pagination_enabled : Active ou d\u00e9sactive la pagination.</li> </ul>"},{"location":"symfony/areas/API%20Platform/#filtrage-et-recherche","title":"Filtrage et Recherche","text":"<p>API Platform prend en charge le filtrage, la recherche et la pagination des ressources de mani\u00e8re native. Vous pouvez ajouter des filtres en utilisant l'annotation <code>@ApiFilter</code>.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-filtrage","title":"Exemple de filtrage","text":"<pre><code>// src/Entity/Book.php\n\nuse ApiPlatform\\Core\\Annotation\\ApiFilter;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\SearchFilter;\n\n/**\n * @ApiResource\n * @ApiFilter(SearchFilter::class, properties={\"title\": \"partial\"})\n * @ORM\\Entity()\n */\nclass Book\n{\n    // ...\n}\n</code></pre> <ul> <li>SearchFilter : Permet de filtrer les ressources par un champ sp\u00e9cifique. Ici, la recherche est partielle sur le champ <code>title</code>.</li> </ul>"},{"location":"symfony/areas/API%20Platform/#validation-des-donnees","title":"Validation des Donn\u00e9es","text":"<p>API Platform int\u00e8gre le composant de validation de Symfony pour valider les donn\u00e9es envoy\u00e9es dans les requ\u00eates. Vous pouvez utiliser des annotations comme <code>@Assert\\NotBlank</code>, <code>@Assert\\Length</code>, etc.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-validation","title":"Exemple de validation","text":"<pre><code>// src/Entity/Book.php\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ApiResource\n * @ORM\\Entity()\n */\nclass Book\n{\n    /**\n     * @ORM\\Column(type=\"string\")\n     * @Assert\\NotBlank\n     * @Assert\\Length(min=5)\n     */\n    private $title;\n\n    // ...\n}\n</code></pre> <ul> <li>@Assert\\NotBlank : Assure que le champ <code>title</code> n'est pas vide.</li> <li>@Assert\\Length(min=5) : V\u00e9rifie que le titre a une longueur minimale de 5 caract\u00e8res.</li> </ul>"},{"location":"symfony/areas/API%20Platform/#authentification-et-securite","title":"Authentification et S\u00e9curit\u00e9","text":"<p>API Platform s'int\u00e8gre avec le syst\u00e8me de s\u00e9curit\u00e9 de Symfony pour g\u00e9rer l'authentification et les autorisations. Vous pouvez utiliser des tokens JWT, OAuth2, ou des m\u00e9canismes d'authentification personnalis\u00e9s.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-dauthentification-via-jwt","title":"Exemple d'authentification via JWT","text":"<ol> <li> <p>Installer le bundle <code>lexik/jwt-authentication-bundle</code> :</p> <p><code>bash composer require lexik/jwt-authentication-bundle</code></p> </li> <li> <p>Configurer les param\u00e8tres JWT dans <code>config/packages/lexik_jwt_authentication.yaml</code> :</p> <p><code>yaml lexik_jwt_authentication:     secret_key: '%env(JWT_SECRET_KEY)%'     public_key: '%env(JWT_PUBLIC_KEY)%'     pass_phrase: '%env(JWT_PASSPHRASE)%'     token_ttl: 3600</code></p> </li> </ol>"},{"location":"symfony/areas/API%20Platform/#pagination","title":"Pagination","text":"<p>La pagination est activ\u00e9e par d\u00e9faut pour les collections de ressources, mais elle peut \u00eatre configur\u00e9e ou d\u00e9sactiv\u00e9e selon vos besoins.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-desactivation-de-la-pagination","title":"Exemple de d\u00e9sactivation de la pagination","text":"<pre><code>// src/Entity/Book.php\n\n/**\n * @ApiResource(\n *     attributes={\"pagination_enabled\"=false}\n * )\n */\nclass Book\n{\n    // ...\n}\n</code></pre>"},{"location":"symfony/areas/API%20Platform/#support-graphql","title":"Support GraphQL","text":"<p>API Platform supporte GraphQL en plus de REST. Une fois configur\u00e9, vous pouvez effectuer des requ\u00eates GraphQL pour acc\u00e9der \u00e0 vos ressources.</p>"},{"location":"symfony/areas/API%20Platform/#exemple-de-requete-graphql","title":"Exemple de requ\u00eate GraphQL","text":"<pre><code>query {\n  books {\n    id\n    title\n  }\n}\n</code></pre>"},{"location":"symfony/areas/API%20Platform/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Utiliser des DTOs : Pour une meilleure gestion des donn\u00e9es, vous pouvez utiliser des Data Transfer Objects (DTOs) au lieu d'exposer directement vos entit\u00e9s.</li> <li>G\u00e9rer les relations : API Platform g\u00e8re les relations entre entit\u00e9s (par exemple, ManyToOne, OneToMany) et peut automatiquement inclure ou exclure ces relations dans les r\u00e9ponses.</li> <li>S\u00e9curiser les API : Toujours s\u00e9curiser les endpoints sensibles en utilisant les m\u00e9canismes d'authentification et d'autorisation de Symfony.</li> <li>Utiliser les filtres : Exploitez les filtres comme <code>SearchFilter</code>, <code>DateFilter</code>, etc., pour ajouter des options de recherche et de filtrage sur vos API.</li> </ol>"},{"location":"symfony/areas/API%20Platform/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation officielle d'API Platform</li> <li>API Platform GitHub</li> <li>GraphQL avec API Platform</li> <li>Symfony Security et API Platform</li> </ul>"},{"location":"symfony/areas/Asset%20management/","title":"Asset Management","text":""},{"location":"symfony/areas/Asset%20management/#documentation-symfony-asset-management","title":"Documentation Symfony : Asset Management","text":""},{"location":"symfony/areas/Asset%20management/#description","title":"Description","text":"<p>L'Asset Management dans Symfony permet de g\u00e9rer les fichiers statiques comme les feuilles de style (CSS), les images et les fichiers JavaScript. Symfony fournit un syst\u00e8me puissant et flexible pour inclure, versionner et optimiser ces ressources dans une application web.</p>"},{"location":"symfony/areas/Asset%20management/#configuration-des-assets","title":"Configuration des assets","text":"<p>Symfony utilise le composant Asset pour g\u00e9rer les ressources publiques. Par d\u00e9faut, les fichiers sont stock\u00e9s dans le r\u00e9pertoire <code>public/</code>, et vous pouvez acc\u00e9der aux fichiers via l'URL du site.</p>"},{"location":"symfony/areas/Asset%20management/#activer-le-gestionnaire-dassets","title":"Activer le gestionnaire d'assets","text":"<p>Si vous utilisez Symfony Flex, le gestionnaire d'assets est install\u00e9 et configur\u00e9 automatiquement. Sinon, vous pouvez l'ajouter \u00e0 votre projet en ex\u00e9cutant :</p> <pre><code>composer require symfony/asset\n</code></pre> <p>Vous pouvez ensuite configurer les assets dans <code>config/packages/assets.yaml</code> :</p> <pre><code># config/packages/assets.yaml\nframework:\n    assets:\n        version: 'v1'  # Version de vos assets pour le cache\n        version_format: '%%s?version=%%s'  # Format de version\n        packages:\n            my_assets:\n                base_path: '/path/to/assets'  # Chemin relatif de vos assets\n</code></pre>"},{"location":"symfony/areas/Asset%20management/#utilisation-des-assets-dans-les-templates-twig","title":"Utilisation des assets dans les templates Twig","text":"<p>Vous pouvez inclure des fichiers d'assets dans vos templates Twig \u00e0 l'aide de la fonction <code>asset()</code>.</p>"},{"location":"symfony/areas/Asset%20management/#exemple-avec-css","title":"Exemple avec CSS :","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"{{ asset('styles.css') }}\"&gt;\n</code></pre> <p>Cela g\u00e9n\u00e9rera un lien vers <code>public/styles.css</code> ou une version avec un hash si la gestion de version est activ\u00e9e.</p>"},{"location":"symfony/areas/Asset%20management/#exemple-avec-javascript","title":"Exemple avec JavaScript :","text":"<pre><code>&lt;script src=\"{{ asset('scripts/app.js') }}\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"symfony/areas/Asset%20management/#exemple-avec-des-images","title":"Exemple avec des images :","text":"<pre><code>&lt;img src=\"{{ asset('images/logo.png') }}\" alt=\"Logo\"&gt;\n</code></pre>"},{"location":"symfony/areas/Asset%20management/#versionnement-des-assets","title":"Versionnement des Assets","text":"<p>Symfony permet de versionner automatiquement vos assets pour assurer qu'ils sont correctement rafra\u00eechis lors de la mise \u00e0 jour des fichiers, ce qui \u00e9vite les probl\u00e8mes de cache dans les navigateurs.</p>"},{"location":"symfony/areas/Asset%20management/#utilisation-du-versionnement-avec-webpack-encore","title":"Utilisation du versionnement avec Webpack Encore","text":"<p>Symfony recommande d'utiliser Webpack Encore pour g\u00e9rer les assets. Webpack Encore g\u00e8re la compilation, la minification et le versionnement des fichiers JavaScript, CSS et images.</p> <ol> <li>Installation de Webpack Encore :</li> </ol> <pre><code>composer require symfony/webpack-encore-bundle\nnpm install\n</code></pre> <ol> <li>Compilation des assets avec Webpack Encore :</li> </ol> <p>Dans le fichier <code>webpack.config.js</code> :</p> <pre><code>const Encore = require('@symfony/webpack-encore');\n\nEncore\n    .setOutputPath('public/build/')\n    .setPublicPath('/build')\n    .addEntry('app', './assets/js/app.js')\n    .enableSassLoader()\n    .enableVersioning()\n;\n\nmodule.exports = Encore.getWebpackConfig();\n</code></pre> <ol> <li>Utilisation dans Twig :</li> </ol> <pre><code>&lt;script src=\"{{ asset('build/app.js') }}\"&gt;&lt;/script&gt;\n</code></pre> <p>Cela inclura la version avec un hash unique pour chaque changement de fichier (ex : <code>app.abc123.js</code>).</p>"},{"location":"symfony/areas/Asset%20management/#gestion-des-assets-dimages","title":"Gestion des assets d'images","text":"<p>Symfony permet de g\u00e9rer les images dans le r\u00e9pertoire <code>public/</code>, mais aussi dans des r\u00e9pertoires sp\u00e9cifiques pour chaque environnement (par exemple, diff\u00e9rentes images pour la production et le d\u00e9veloppement).</p>"},{"location":"symfony/areas/Asset%20management/#exemple-de-gestion-dimage-dans-twig","title":"Exemple de gestion d'image dans Twig :","text":"<pre><code>&lt;img src=\"{{ asset('images/logo.png') }}\" alt=\"Logo\"&gt;\n</code></pre> <p>Cela g\u00e9n\u00e9rera un chemin vers le fichier image dans le dossier <code>public/images</code>.</p>"},{"location":"symfony/areas/Asset%20management/#gestion-des-chemins-dassets-avec-des-packages-personnalises","title":"Gestion des chemins d'assets avec des packages personnalis\u00e9s","text":"<p>Vous pouvez d\u00e9finir des packages d'assets personnalis\u00e9s pour g\u00e9rer des ressources dans plusieurs emplacements, en dehors du r\u00e9pertoire <code>public/</code>.</p>"},{"location":"symfony/areas/Asset%20management/#exemple-de-configuration-de-packages","title":"Exemple de configuration de packages :","text":"<pre><code># config/packages/assets.yaml\nframework:\n    assets:\n        packages:\n            custom_assets:\n                base_path: '/assets'\n</code></pre> <p>Dans votre template Twig :</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"{{ asset('styles.css', 'custom_assets') }}\"&gt;\n</code></pre> <p>Cela g\u00e9n\u00e9rera le chemin vers <code>/assets/styles.css</code>.</p>"},{"location":"symfony/areas/Asset%20management/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Utiliser Webpack Encore : Webpack Encore facilite grandement le travail de gestion des assets. Il vous permet de g\u00e9rer la compilation, la minification, et la gestion de la version des fichiers.</li> <li>Versionner les assets : Toujours versionner vos assets (avec Webpack Encore ou manuellement) pour \u00e9viter les probl\u00e8mes de cache dans les navigateurs des utilisateurs.</li> <li>Utiliser des fichiers statiques dans <code>public/</code> : Placez toujours vos fichiers statiques (CSS, JS, images) dans le r\u00e9pertoire <code>public/</code> ou dans un sous-r\u00e9pertoire de <code>public/</code>.</li> <li>Optimiser les images : Utilisez des outils de compression d'images pour optimiser la taille de vos fichiers image et r\u00e9duire les temps de chargement.</li> <li>Exploiter les CDN pour les assets externes : Si vous utilisez des biblioth\u00e8ques JavaScript ou CSS populaires, vous pouvez \u00e9galement les servir \u00e0 partir de CDN pour am\u00e9liorer les performances.</li> </ol>"},{"location":"symfony/areas/Asset%20management/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Symfony Asset Component</li> <li>Symfony Webpack Encore</li> <li>Symfony Documentation sur les Assets</li> </ul>"},{"location":"symfony/areas/Bundles/","title":"Bundles","text":""},{"location":"symfony/areas/Bundles/#documentation-symfony-bundles","title":"Documentation Symfony : Bundles","text":""},{"location":"symfony/areas/Bundles/#description","title":"Description","text":"<p>Un Bundle dans Symfony est une unit\u00e9 modulaire qui regroupe des fonctionnalit\u00e9s sp\u00e9cifiques \u00e0 une application. Un bundle peut contenir des contr\u00f4leurs, des services, des configurations, des entit\u00e9s, des templates, des routes, et d'autres ressources li\u00e9es \u00e0 une fonctionnalit\u00e9 sp\u00e9cifique. L'utilisation de bundles permet d'organiser et de r\u00e9utiliser facilement du code au sein d'une application ou \u00e0 travers plusieurs projets.</p>"},{"location":"symfony/areas/Bundles/#types-de-bundles","title":"Types de Bundles","text":"<ol> <li> <p>Bundles Internes : Les bundles cr\u00e9\u00e9s sp\u00e9cifiquement pour une application Symfony. Ils sont souvent utilis\u00e9s pour regrouper une fonctionnalit\u00e9 dans un module s\u00e9par\u00e9, mais au sein du m\u00eame projet.</p> </li> <li> <p>Bundles Externes (ou tiers) : Les bundles fournis par la communaut\u00e9 ou des entreprises pour ajouter des fonctionnalit\u00e9s \u00e0 une application Symfony. Ces bundles peuvent \u00eatre install\u00e9s via Composer.</p> </li> <li> <p>Bundles Symfony Standards : Symfony lui-m\u00eame inclut des bundles standard pour des fonctionnalit\u00e9s de base, tels que :</p> <ul> <li>FrameworkBundle : Contient les composants de base de Symfony.</li> <li>SecurityBundle : Permet la gestion de la s\u00e9curit\u00e9 (authentification, autorisation).</li> <li>TwigBundle : Permet l'int\u00e9gration du moteur de templates Twig.</li> <li>DoctrineBundle : Int\u00e9gration de Doctrine ORM avec Symfony.</li> </ul> </li> </ol>"},{"location":"symfony/areas/Bundles/#creer-un-bundle","title":"Cr\u00e9er un Bundle","text":"<p>Les bundles sont g\u00e9n\u00e9ralement cr\u00e9\u00e9s en suivant une structure sp\u00e9cifique dans le dossier <code>src/</code> de l'application Symfony.</p>"},{"location":"symfony/areas/Bundles/#exemple-de-structure-dun-bundle","title":"Exemple de Structure d'un Bundle","text":"<pre><code>src/\n  MyBundle/\n    Controller/\n      DefaultController.php\n    DependencyInjection/\n      MyBundleExtension.php\n    Resources/\n      config/\n        services.yaml\n      views/\n        default/index.html.twig\n    MyBundle.php\n</code></pre> <ul> <li>Controller/ : Contient les contr\u00f4leurs sp\u00e9cifiques au bundle.</li> <li>DependencyInjection/ : Contient les classes de configuration pour l'injection de d\u00e9pendances.</li> <li>Resources/ : Contient les ressources (configurations, templates, traductions, etc.).</li> <li>MyBundle.php : Le fichier principal du bundle.</li> </ul>"},{"location":"symfony/areas/Bundles/#exemple-de-creation-dun-bundle-simple","title":"Exemple de Cr\u00e9ation d'un Bundle Simple","text":"<pre><code>// src/MyBundle/MyBundle.php\nnamespace App\\MyBundle;\n\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass MyBundle extends Bundle\n{\n    public function getContainerExtension()\n    {\n        // Retourne l'extension de configuration\n    }\n}\n</code></pre> <p>Le fichier <code>MyBundle.php</code> est la classe principale qui h\u00e9rite de <code>Symfony\\Component\\HttpKernel\\Bundle\\Bundle</code>. Cette classe sert de point d'entr\u00e9e pour Symfony afin d\u2019enregistrer le bundle.</p>"},{"location":"symfony/areas/Bundles/#utiliser-un-bundle-externe","title":"Utiliser un Bundle Externe","text":"<p>Les bundles externes peuvent \u00eatre install\u00e9s via Composer et ajout\u00e9s \u00e0 la configuration de Symfony dans le fichier <code>config/bundles.php</code>.</p>"},{"location":"symfony/areas/Bundles/#exemple-dinstallation-dun-bundle-via-composer","title":"Exemple d'Installation d'un Bundle via Composer","text":"<pre><code>composer require doctrine/orm\n</code></pre> <p>Une fois install\u00e9, le bundle sera automatiquement ajout\u00e9 \u00e0 <code>config/bundles.php</code> :</p> <pre><code>// config/bundles.php\nreturn [\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class =&gt; ['all' =&gt; true],\n    Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle::class =&gt; ['all' =&gt; true],\n];\n</code></pre>"},{"location":"symfony/areas/Bundles/#activer-un-bundle","title":"Activer un Bundle","text":"<p>Symfony charge automatiquement les bundles list\u00e9s dans <code>config/bundles.php</code>. Toutefois, vous pouvez contr\u00f4ler la charge des bundles en fonction de l\u2019environnement (par exemple, <code>dev</code>, <code>prod</code>).</p>"},{"location":"symfony/areas/Bundles/#exemple-dactivation-dun-bundle-dans-un-environnement-specifique","title":"Exemple d'Activation d'un Bundle dans un Environnement Sp\u00e9cifique","text":"<pre><code>// config/bundles.php\nreturn [\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class =&gt; ['all' =&gt; true],\n    Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle::class =&gt; ['dev' =&gt; true],\n];\n</code></pre> <p>Dans cet exemple, le bundle <code>DoctrineBundle</code> ne sera activ\u00e9 que dans l'environnement <code>dev</code>.</p>"},{"location":"symfony/areas/Bundles/#utilisation-des-bundles","title":"Utilisation des Bundles","text":"<p>Les bundles peuvent \u00eatre utilis\u00e9s pour organiser des fonctionnalit\u00e9s dans une application. Par exemple, un bundle d\u00e9di\u00e9 \u00e0 l'authentification contiendrait des contr\u00f4leurs, des services, et des configurations de s\u00e9curit\u00e9.</p>"},{"location":"symfony/areas/Bundles/#exemple-dutilisation-dun-bundle-personnalise","title":"Exemple d'Utilisation d'un Bundle Personnalis\u00e9","text":"<ol> <li>Cr\u00e9er un Contr\u00f4leur dans le Bundle</li> </ol> <pre><code>// src/MyBundle/Controller/DefaultController.php\nnamespace App\\MyBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DefaultController extends AbstractController\n{\n    public function index(): Response\n    {\n        return $this-&gt;render('@MyBundle/default/index.html.twig');\n    }\n}\n</code></pre> <ol> <li>Cr\u00e9er une Vue Twig pour le Bundle</li> </ol> <pre><code>{# src/MyBundle/Resources/views/default/index.html.twig #}\n&lt;h1&gt;Bienvenue dans le Bundle !&lt;/h1&gt;\n</code></pre> <ol> <li>D\u00e9clarer une Route pour le Contr\u00f4leur</li> </ol> <pre><code># config/routes.yaml\nmy_bundle_default:\n    path: /my-bundle\n    controller: App\\MyBundle\\Controller\\DefaultController::index\n</code></pre>"},{"location":"symfony/areas/Bundles/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Organisation des Bundles : Organisez les bundles par fonctionnalit\u00e9 (ex : gestion des utilisateurs, gestion des produits, etc.).</li> <li>Ne pas trop fragmenter : Si le code n'est pas r\u00e9utilisable dans d'autres projets, il peut \u00eatre pr\u00e9f\u00e9rable de ne pas cr\u00e9er un bundle.</li> <li>Composer pour les bundles externes : Installez des bundles externes via Composer et assurez-vous qu'ils sont bien configur\u00e9s dans <code>config/bundles.php</code>.</li> <li>Surveiller la compatibilit\u00e9 des versions : V\u00e9rifiez que les versions des bundles externes sont compatibles avec la version de Symfony utilis\u00e9e dans votre projet.</li> </ul>"},{"location":"symfony/areas/Bundles/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation Symfony : Bundles</li> <li>Composant Bundles sur GitHub</li> </ul>"},{"location":"symfony/areas/Cache/","title":"Cache","text":""},{"location":"symfony/areas/Cache/#documentation-symfony-le-cache","title":"Documentation Symfony : Le Cache","text":""},{"location":"symfony/areas/Cache/#description","title":"Description","text":"<p>Le cache dans Symfony est utilis\u00e9 pour stocker temporairement des donn\u00e9es qui ne changent pas fr\u00e9quemment, permettant ainsi de r\u00e9duire les co\u00fbts de calcul et de rendre l'application plus rapide. Symfony offre un syst\u00e8me de cache flexible et puissant, qui peut \u00eatre utilis\u00e9 pour le cache des donn\u00e9es, des vues, des requ\u00eates, et plus encore.</p>"},{"location":"symfony/areas/Cache/#types-de-cache-en-symfony","title":"Types de Cache en Symfony","text":"<ol> <li>Cache de donn\u00e9es : Utilis\u00e9 pour stocker des donn\u00e9es sp\u00e9cifiques comme des r\u00e9sultats de requ\u00eates, des objets, etc.</li> <li>Cache HTTP : Utilis\u00e9 pour mettre en cache les r\u00e9ponses HTTP, comme les pages HTML.</li> <li>Cache des m\u00e9tadonn\u00e9es : Utilis\u00e9 pour stocker des informations suppl\u00e9mentaires comme les entit\u00e9s Doctrine ou la configuration de l'application.T</li> </ol>"},{"location":"symfony/areas/Cache/#installation-du-cache","title":"Installation du Cache","text":"<p>Symfony utilise le composant <code>Cache</code> qui peut \u00eatre install\u00e9 via Composer :</p> <pre><code>composer require symfony/cache\n</code></pre>"},{"location":"symfony/areas/Cache/#utilisation-du-cache","title":"Utilisation du Cache","text":""},{"location":"symfony/areas/Cache/#service-cache","title":"Service Cache","text":"<p>Le service <code>CacheInterface</code> est le point d'acc\u00e8s pour manipuler les diff\u00e9rents caches dans Symfony.</p> <pre><code>use Symfony\\Contracts\\Cache\\CacheInterface;\n\nclass MyService\n{\n    private $cache;\n\n    public function __construct(CacheInterface $cache)\n    {\n        $this-&gt;cache = $cache;\n    }\n\n    public function getData()\n    {\n        // Exemple d'utilisation du cache\n        $data = $this-&gt;cache-&gt;get('key', function (ItemInterface $item) {\n            // Si la donn\u00e9e n'est pas en cache, calculer et stocker la donn\u00e9e\n            $item-&gt;expiresAfter(3600); // Expiration apr\u00e8s 1 heure\n            return 'Donn\u00e9es calcul\u00e9es ou r\u00e9cup\u00e9r\u00e9es';\n        });\n\n        return $data;\n    }\n}\n</code></pre> <p>Dans cet exemple, la m\u00e9thode <code>get()</code> v\u00e9rifie d'abord si la donn\u00e9e est pr\u00e9sente dans le cache. Si ce n\u2019est pas le cas, elle ex\u00e9cute la fonction de rappel pour calculer ou r\u00e9cup\u00e9rer la donn\u00e9e avant de la stocker dans le cache.</p>"},{"location":"symfony/areas/Cache/#cache-des-reponses-http","title":"Cache des R\u00e9ponses HTTP","text":"<p>Symfony permet de mettre en cache les r\u00e9ponses HTTP \u00e0 l'aide des annotations ou des contr\u00f4leurs. Par exemple :</p> <pre><code>use Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass PageController\n{\n    /**\n     * @Route(\"/cache-test\", name=\"cache_test\")\n     */\n    public function index()\n    {\n        $response = new Response('Page en cache');\n        $response-&gt;setCache([\n            'public' =&gt; true,\n            'max_age' =&gt; 3600,\n            's_maxage' =&gt; 3600,\n            'must_revalidate' =&gt; true,\n        ]);\n\n        return $response;\n    }\n}\n</code></pre> <p>Dans cet exemple, le cache HTTP est configur\u00e9 avec une dur\u00e9e de vie de 1 heure pour les utilisateurs et les proxys.</p>"},{"location":"symfony/areas/Cache/#cache-des-donnees-avec-cachepool","title":"Cache des Donn\u00e9es avec <code>CachePool</code>","text":"<p>Symfony offre des pools de cache comme <code>FilesystemCache</code>, <code>ApcuCache</code>, <code>RedisCache</code>, etc. Ces pools peuvent \u00eatre utilis\u00e9s pour stocker et r\u00e9cup\u00e9rer des donn\u00e9es dans diff\u00e9rentes solutions de stockage.</p> <p>Exemple avec un cache bas\u00e9 sur le syst\u00e8me de fichiers :</p> <pre><code>use Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter();\n\n// Mise en cache d'une donn\u00e9e\n$cache-&gt;get('key', function (ItemInterface $item) {\n    $item-&gt;expiresAfter(3600); // Expiration apr\u00e8s 1 heure\n    return 'Donn\u00e9es mises en cache sur le syst\u00e8me de fichiers';\n});\n</code></pre>"},{"location":"symfony/areas/Cache/#configuration-du-cache","title":"Configuration du Cache","text":"<p>La configuration du cache se fait principalement dans le fichier <code>config/packages/cache.yaml</code>. Voici un exemple de configuration pour utiliser Redis comme cache de donn\u00e9es :</p> <pre><code>framework:\n    cache:\n        pools:\n            app.cache.redis:\n                adapter: 'cache.adapter.redis'\n                default_lifetime: 3600\n                provider: '%env(REDIS_URL)%'\n</code></pre> <p>Dans cet exemple, Redis est configur\u00e9 comme un adaptateur pour le cache des donn\u00e9es. Vous pouvez \u00e9galement utiliser <code>cache.adapter.filesystem</code> ou d'autres solutions comme <code>cache.adapter.memcached</code>.</p>"},{"location":"symfony/areas/Cache/#gestion-du-cache","title":"Gestion du Cache","text":""},{"location":"symfony/areas/Cache/#vider-le-cache","title":"Vider le Cache","text":"<p>Pour vider le cache d'une application Symfony, utilisez la commande suivante :</p> <pre><code>php bin/console cache:clear\n</code></pre> <p>Cette commande supprime tout le cache de l'application (y compris le cache des routes, du framework, etc.) et le r\u00e9g\u00e9n\u00e8re selon la configuration actuelle.</p>"},{"location":"symfony/areas/Cache/#expiration-du-cache","title":"Expiration du Cache","text":"<p>Les caches peuvent expirer apr\u00e8s un certain d\u00e9lai en utilisant la m\u00e9thode <code>expiresAfter()</code>.</p> <pre><code>$item-&gt;expiresAfter(3600); // Expiration apr\u00e8s 1 heure\n</code></pre> <p>Cela garantit que les donn\u00e9es seront stock\u00e9es pendant une p\u00e9riode d\u00e9termin\u00e9e avant que le cache ne soit automatiquement invalid\u00e9.</p>"},{"location":"symfony/areas/Cache/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Utiliser les pools de cache pour une gestion fine : Utilisez des pools de cache pour diff\u00e9rencier les types de donn\u00e9es ou d'utilisateurs (par exemple, cache pour les r\u00e9sultats de base de donn\u00e9es, cache pour les pages HTML).</li> <li>Cache des requ\u00eates Doctrine : Symfony offre des m\u00e9canismes pour mettre en cache les r\u00e9sultats des requ\u00eates Doctrine en utilisant <code>DoctrineCache</code> ou en configurant directement des entit\u00e9s Doctrine avec le cache.</li> <li>S\u00e9curiser le cache : Lorsque vous travaillez avec des caches sensibles, assurez-vous qu'ils ne contiennent pas d'informations priv\u00e9es. Utilisez des m\u00e9canismes comme <code>cache.adapter.filesystem</code> et cryptez les donn\u00e9es sensibles.</li> <li>R\u00e9glage du cache pour les environnements de production : Assurez-vous que le cache est bien configur\u00e9 pour les environnements de production en activant le cache optimis\u00e9 dans <code>config/packages/prod/cache.yaml</code>.</li> <li>Surveiller les performances : Surveillez la taille du cache et les performances de vos adaptateurs (par exemple, Redis ou Memcached) pour \u00e9viter la surcharge et garantir une efficacit\u00e9 maximale.</li> </ol>"},{"location":"symfony/areas/Cache/#commandes-utiles","title":"Commandes Utiles","text":"<ul> <li><code>php bin/console cache:clear</code> : Vide le cache de l'application.</li> <li><code>php bin/console cache:warmup</code> : Pr\u00e9chauffe le cache en pr\u00e9chargeant des donn\u00e9es ou des ressources.</li> <li><code>php bin/console debug:container cache</code> : Affiche les services li\u00e9s au cache.</li> </ul>"},{"location":"symfony/areas/Cache/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Symfony Cache Component Documentation</li> <li>Doctrine Cache Documentation</li> <li>Redis Cache Adapter Documentation</li> </ul>"},{"location":"symfony/areas/Configuration/","title":"Configuration","text":""},{"location":"symfony/areas/Configuration/#documentation-symfony-configuration","title":"Documentation Symfony : Configuration","text":""},{"location":"symfony/areas/Configuration/#description","title":"Description","text":"<p>La configuration dans Symfony est un aspect cl\u00e9 du framework qui permet de personnaliser et d'adapter le comportement de l'application en fonction des besoins sp\u00e9cifiques. La configuration peut \u00eatre d\u00e9finie dans plusieurs formats, dont YAML, XML et PHP, et elle s'int\u00e8gre principalement dans les fichiers de configuration du dossier <code>config/</code>.</p>"},{"location":"symfony/areas/Configuration/#fichiers-de-configuration","title":"Fichiers de Configuration","text":"<p>Les fichiers de configuration sont utilis\u00e9s pour d\u00e9finir les services, les routes, la s\u00e9curit\u00e9, les param\u00e8tres et plus encore. Voici les principaux fichiers de configuration utilis\u00e9s dans Symfony :</p> <ul> <li>config/packages/ : Contient la configuration des diff\u00e9rents paquets install\u00e9s.</li> <li>config/routes/ : D\u00e9finit les configurations des routes.</li> <li>config/services.yaml : Contient la configuration des services (injection de d\u00e9pendances).</li> <li>config/parameters.yaml : Contient les param\u00e8tres globaux de l'application.</li> </ul>"},{"location":"symfony/areas/Configuration/#configuration-des-services-servicesyaml","title":"Configuration des Services (services.yaml)","text":"<p>Les services sont des objets que vous pouvez configurer et injecter dans les contr\u00f4leurs, commandes, ou autres services. Voici un exemple de configuration de service :</p>"},{"location":"symfony/areas/Configuration/#exemple-de-configuration-de-service","title":"Exemple de configuration de service","text":"<pre><code># config/services.yaml\nservices:\n    App\\Service\\MyService:\n        arguments:\n            $param1: 'value'\n            $param2: '@service_id'\n</code></pre> <ul> <li>App\\Service\\MyService : C'est la classe que vous voulez configurer.</li> <li>arguments : Les param\u00e8tres pass\u00e9s au constructeur de la classe. Les param\u00e8tres peuvent \u00eatre des valeurs ou des services existants (pr\u00e9fix\u00e9s par <code>@</code>).</li> </ul>"},{"location":"symfony/areas/Configuration/#configuration-des-routes-routesyaml","title":"Configuration des Routes (routes.yaml)","text":"<p>Les routes permettent de d\u00e9finir les URL qui pointent vers les actions des contr\u00f4leurs. Voici un exemple de configuration d'une route :</p>"},{"location":"symfony/areas/Configuration/#exemple-de-configuration-de-route","title":"Exemple de configuration de route","text":"<pre><code># config/routes.yaml\nhome:\n    path: /home\n    controller: App\\Controller\\HomeController::index\n</code></pre> <ul> <li>home : Le nom de la route.</li> <li>path : L'URL associ\u00e9e \u00e0 la route.</li> <li>controller : Le contr\u00f4leur et la m\u00e9thode qui traitent la requ\u00eate.</li> </ul>"},{"location":"symfony/areas/Configuration/#parametres-parametersyaml","title":"Param\u00e8tres (parameters.yaml)","text":"<p>Les param\u00e8tres sont utilis\u00e9s pour stocker des valeurs qui peuvent \u00eatre r\u00e9utilis\u00e9es dans plusieurs parties de la configuration (par exemple, les informations de base de donn\u00e9es, les cl\u00e9s API, etc.).</p>"},{"location":"symfony/areas/Configuration/#exemple-de-configuration-de-parametres","title":"Exemple de configuration de param\u00e8tres","text":"<pre><code># config/parameters.yaml\nparameters:\n    app_name: 'Mon Application'\n    app_env: 'prod'\n</code></pre> <p>Vous pouvez ensuite r\u00e9cup\u00e9rer ces param\u00e8tres dans votre code comme suit :</p> <pre><code>$param = $this-&gt;getParameter('app_name');\n</code></pre>"},{"location":"symfony/areas/Configuration/#configuration-de-la-securite-securityyaml","title":"Configuration de la S\u00e9curit\u00e9 (security.yaml)","text":"<p>La configuration de la s\u00e9curit\u00e9 permet de d\u00e9finir les r\u00e8gles d'acc\u00e8s et d'authentification dans l'application.</p>"},{"location":"symfony/areas/Configuration/#exemple-de-configuration-de-securite","title":"Exemple de configuration de s\u00e9curit\u00e9","text":"<pre><code># config/packages/security.yaml\nsecurity:\n    encoders:\n        App\\Entity\\User:\n            algorithm: bcrypt\n    providers:\n        in_memory: { memory: ~ }\n    firewalls:\n        main:\n            pattern: ^/\n            form_login:\n                login_path: login\n                check_path: login\n            logout:\n                path: /logout\n</code></pre> <ul> <li>encoders : D\u00e9finit l'algorithme de hachage pour le mot de passe.</li> <li>providers : D\u00e9finit la source des utilisateurs (par exemple, en m\u00e9moire ou une base de donn\u00e9es).</li> <li>firewalls : D\u00e9finit les r\u00e8gles de s\u00e9curit\u00e9 des diff\u00e9rentes parties de l'application.</li> </ul>"},{"location":"symfony/areas/Configuration/#configuration-des-parametres-denvironnement","title":"Configuration des Param\u00e8tres d'Environnement","text":"<p>Symfony permet d'utiliser des variables d'environnement d\u00e9finies dans un fichier <code>.env</code> ou directement dans le syst\u00e8me d'exploitation.</p>"},{"location":"symfony/areas/Configuration/#exemple-de-fichier-env","title":"Exemple de fichier <code>.env</code>","text":"<pre><code>APP_ENV=dev\nAPP_SECRET=your_secret_key\n</code></pre>"},{"location":"symfony/areas/Configuration/#exemple-de-recuperation-dune-variable-denvironnement","title":"Exemple de r\u00e9cup\u00e9ration d'une variable d'environnement","text":"<pre><code># config/services.yaml\nparameters:\n    app_secret: '%env(APP_SECRET)%'\n</code></pre> <ul> <li>%env(APP_SECRET)% : R\u00e9cup\u00e8re la valeur de la variable d'environnement <code>APP_SECRET</code>.</li> </ul>"},{"location":"symfony/areas/Configuration/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Organisation claire : Organisez vos fichiers de configuration dans des r\u00e9pertoires logiques comme <code>config/packages/</code> pour les paquets, <code>config/services.yaml</code> pour les services, et <code>config/routes.yaml</code> pour les routes.</li> <li>Utilisation des param\u00e8tres : Utilisez les param\u00e8tres pour \u00e9viter de r\u00e9p\u00e9ter des valeurs dans plusieurs fichiers de configuration.</li> <li>Variables d'environnement : Utilisez les variables d'environnement pour g\u00e9rer les configurations sensibles et les configurations sp\u00e9cifiques \u00e0 l'environnement (dev, prod, test).</li> <li>Nouveaux services : Pour ajouter de nouveaux services ou de nouvelles d\u00e9pendances, assurez-vous de les configurer dans le fichier <code>services.yaml</code> afin qu'ils soient correctement inject\u00e9s dans vos contr\u00f4leurs et autres services.</li> </ul>"},{"location":"symfony/areas/Configuration/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation officielle Symfony : Configuration</li> <li>Symfony Configuration Cheat Sheet</li> </ul>"},{"location":"symfony/areas/Console%20Commands/","title":"Console Commands","text":""},{"location":"symfony/areas/Console%20Commands/#documentation-symfony-console-commands","title":"Documentation Symfony : Console Commands","text":""},{"location":"symfony/areas/Console%20Commands/#description","title":"Description","text":"<p>Les Console Commands dans Symfony permettent de cr\u00e9er des commandes en ligne de commande qui sont ex\u00e9cut\u00e9es dans le terminal. Ces commandes peuvent \u00eatre utilis\u00e9es pour automatiser des t\u00e2ches r\u00e9currentes, ex\u00e9cuter des scripts ou interagir avec votre application depuis la ligne de commande.</p> <p>Symfony fournit un outil de ligne de commande int\u00e9gr\u00e9, <code>bin/console</code>, qui permet d'ex\u00e9cuter des commandes syst\u00e8me ou des commandes personnalis\u00e9es.</p>"},{"location":"symfony/areas/Console%20Commands/#creer-une-commande-symfony","title":"Cr\u00e9er une Commande Symfony","text":"<p>Les commandes Symfony sont cr\u00e9\u00e9es en \u00e9tendant la classe <code>Command</code> de Symfony.</p>"},{"location":"symfony/areas/Console%20Commands/#exemple-de-commande-symfony","title":"Exemple de Commande Symfony","text":"<pre><code>// src/Command/HelloCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass HelloCommand extends Command\n{\n    protected static $defaultName = 'app:hello';\n\n    protected function configure()\n    {\n        $this-&gt;setDescription('Affiche un message de bienvenue');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output-&gt;writeln('Bonjour Symfony!');\n        return Command::SUCCESS;\n    }\n}\n</code></pre> <p>Dans cet exemple :</p> <ul> <li>La classe <code>HelloCommand</code> \u00e9tend <code>Command</code>.</li> <li>Le nom de la commande est d\u00e9fini par la constante <code>protected static $defaultName = 'app:hello';</code>.</li> <li>La m\u00e9thode <code>execute()</code> d\u00e9finit la logique qui sera ex\u00e9cut\u00e9e lors de l'appel de la commande.</li> </ul>"},{"location":"symfony/areas/Console%20Commands/#enregistrer-la-commande","title":"Enregistrer la Commande","text":"<p>Les commandes personnalis\u00e9es doivent \u00eatre enregistr\u00e9es pour \u00eatre reconnues par Symfony. Ce processus se fait automatiquement avec la commande <code>make:command</code>, mais vous pouvez aussi enregistrer la commande manuellement en la d\u00e9clarant dans les services.</p>"},{"location":"symfony/areas/Console%20Commands/#exemple-denregistrement-manuel","title":"Exemple d'Enregistrement Manuel","text":"<p>Si vous n'utilisez pas <code>make:command</code>, vous pouvez enregistrer la commande dans <code>config/services.yaml</code> :</p> <pre><code># config/services.yaml\nservices:\n    App\\Command\\HelloCommand:\n        tags: ['console.command']\n</code></pre> <p>Le tag <code>console.command</code> permet \u00e0 Symfony d'enregistrer la commande pour qu'elle soit accessible via <code>bin/console</code>.</p>"},{"location":"symfony/areas/Console%20Commands/#executer-une-commande","title":"Ex\u00e9cuter une Commande","text":"<p>Une fois la commande d\u00e9finie et enregistr\u00e9e, vous pouvez l'ex\u00e9cuter via la ligne de commande :</p> <pre><code>bin/console app:hello\n</code></pre> <p>Cela ex\u00e9cutera la commande et affichera le message <code>Bonjour Symfony!</code> dans le terminal.</p>"},{"location":"symfony/areas/Console%20Commands/#parametres-et-arguments","title":"Param\u00e8tres et Arguments","text":"<p>Les commandes peuvent accepter des param\u00e8tres et des arguments pour rendre les commandes dynamiques.</p>"},{"location":"symfony/areas/Console%20Commands/#exemple-de-commande-avec-argument","title":"Exemple de Commande avec Argument","text":"<pre><code>// src/Command/GreetCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    protected static $defaultName = 'app:greet';\n\n    protected function configure()\n    {\n        $this-&gt;setDescription('Affiche un message de salutation')\n             -&gt;addArgument('name', InputArgument::REQUIRED, 'Le nom de la personne');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input-&gt;getArgument('name');\n        $output-&gt;writeln('Bonjour, ' . $name . '!');\n        return Command::SUCCESS;\n    }\n}\n</code></pre> <p>Ex\u00e9cution de la commande avec un argument :</p> <pre><code>bin/console app:greet John\n</code></pre> <p>R\u00e9sultat :</p> <pre><code>Bonjour, John!\n</code></pre>"},{"location":"symfony/areas/Console%20Commands/#types-de-parametres","title":"Types de Param\u00e8tres","text":"<ul> <li>InputArgument::REQUIRED : L'argument est obligatoire.</li> <li>InputArgument::OPTIONAL : L'argument est facultatif.</li> </ul>"},{"location":"symfony/areas/Console%20Commands/#options","title":"Options","text":"<p>Les options sont similaires aux arguments mais elles sont nomm\u00e9es et sont souvent facultatives.</p>"},{"location":"symfony/areas/Console%20Commands/#exemple-de-commande-avec-option","title":"Exemple de Commande avec Option","text":"<pre><code>// src/Command/OptionCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass OptionCommand extends Command\n{\n    protected static $defaultName = 'app:option';\n\n    protected function configure()\n    {\n        $this-&gt;setDescription('Affiche un message avec une option')\n             -&gt;addOption('upper', null, InputOption::VALUE_NONE, 'Affiche en majuscules');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $message = 'Bonjour Symfony!';\n\n        if ($input-&gt;getOption('upper')) {\n            $message = strtoupper($message);\n        }\n\n        $output-&gt;writeln($message);\n        return Command::SUCCESS;\n    }\n}\n</code></pre> <p>Ex\u00e9cution de la commande avec une option :</p> <pre><code>bin/console app:option --upper\n</code></pre> <p>R\u00e9sultat :</p> <pre><code>BONJOUR SYMFONY!\n</code></pre>"},{"location":"symfony/areas/Console%20Commands/#types-doptions","title":"Types d'Options","text":"<ul> <li>InputOption::VALUE_NONE : L'option ne prend pas de valeur.</li> <li>InputOption::VALUE_REQUIRED : L'option n\u00e9cessite une valeur.</li> <li>InputOption::VALUE_OPTIONAL : L'option peut prendre une valeur, mais ce n'est pas obligatoire.</li> </ul>"},{"location":"symfony/areas/Console%20Commands/#gestion-des-erreurs","title":"Gestion des Erreurs","text":"<p>Lorsque des erreurs surviennent dans l'ex\u00e9cution d'une commande, vous pouvez g\u00e9rer les exceptions ou valider les entr\u00e9es.</p>"},{"location":"symfony/areas/Console%20Commands/#exemple-de-gestion-derreur","title":"Exemple de Gestion d'Erreur","text":"<pre><code>// src/Command/ErrorCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\nclass ErrorCommand extends Command\n{\n    protected static $defaultName = 'app:error';\n\n    protected function configure()\n    {\n        $this-&gt;setDescription('Commande avec gestion d\\'erreur')\n             -&gt;addArgument('age', InputArgument::REQUIRED, 'L\\'\u00e2ge de la personne');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $age = $input-&gt;getArgument('age');\n\n        if ($age &lt; 0) {\n            throw new InvalidArgumentException('L\\'\u00e2ge ne peut pas \u00eatre n\u00e9gatif');\n        }\n\n        $output-&gt;writeln('Age: ' . $age);\n        return Command::SUCCESS;\n    }\n}\n</code></pre> <p>Ex\u00e9cution avec erreur :</p> <pre><code>bin/console app:error -5\n</code></pre> <p>Cela lancera une exception <code>InvalidArgumentException</code> avec le message d'erreur.</p>"},{"location":"symfony/areas/Console%20Commands/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Nommez correctement vos commandes : Utilisez des noms clairs et logiques, tels que <code>app:generate:report</code> ou <code>app:user:create</code>.</li> <li>Documentez les commandes : Ajoutez des descriptions et des exemples d'utilisation dans la m\u00e9thode <code>configure()</code> pour aider les utilisateurs.</li> <li>Validez les entr\u00e9es : Validez les arguments et options afin d\u2019\u00e9viter des erreurs d'ex\u00e9cution.</li> <li>Utilisez des services dans les commandes : Injectez des services dans vos commandes pour effectuer des actions plus complexes.</li> </ul>"},{"location":"symfony/areas/Console%20Commands/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation officielle Symfony : Console</li> <li>Liste des Commandes Symfony par d\u00e9faut</li> </ul>"},{"location":"symfony/areas/Controler/","title":"Controllers","text":""},{"location":"symfony/areas/Controler/#documentation-symfony-controller","title":"Documentation Symfony : Controller","text":""},{"location":"symfony/areas/Controler/#description","title":"Description","text":"<p>Les contr\u00f4leurs dans Symfony sont responsables de traiter les requ\u00eates HTTP entrantes, d'ex\u00e9cuter la logique m\u00e9tier n\u00e9cessaire, puis de renvoyer une r\u00e9ponse. Les contr\u00f4leurs sont des classes PHP qui contiennent des m\u00e9thodes ex\u00e9cut\u00e9es lorsque les utilisateurs acc\u00e8dent \u00e0 des URL sp\u00e9cifiques via des routes d\u00e9finies.</p>"},{"location":"symfony/areas/Controler/#definition-dun-controleur","title":"D\u00e9finition d'un contr\u00f4leur","text":"<p>Un contr\u00f4leur Symfony est une classe qui contient des m\u00e9thodes appel\u00e9es actions. Chaque action est associ\u00e9e \u00e0 une route sp\u00e9cifique. Les actions peuvent renvoyer des r\u00e9ponses simples ou des objets plus complexes, comme des vues ou des redirections.</p> <ol> <li>Structure basique d'un contr\u00f4leur</li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/\", name=\"homepage\")\n     */\n    public function index(): Response\n    {\n        return new Response('Bienvenue sur la page d\\'accueil!');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#methodes-des-controleurs","title":"M\u00e9thodes des contr\u00f4leurs","text":"<p>Les m\u00e9thodes des contr\u00f4leurs sont g\u00e9n\u00e9ralement annot\u00e9es avec des annotations de routage pour associer l'action \u00e0 une route sp\u00e9cifique. Elles peuvent aussi recevoir des param\u00e8tres provenant de la route.</p> <ol> <li>Exemple de m\u00e9thode avec param\u00e8tre dans la route</li> </ol> <pre><code>// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass ProductController\n{\n    /**\n     * @Route(\"/product/{id}\", name=\"product_show\")\n     */\n    public function show($id): Response\n    {\n        // Logique pour r\u00e9cup\u00e9rer le produit par ID\n        return new Response(\"Produit ID: $id\");\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#retourner-une-reponse-dans-un-controleur","title":"Retourner une r\u00e9ponse dans un contr\u00f4leur","text":"<ol> <li>Retourner un objet <code>Response</code></li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/about\", name=\"about\")\n     */\n    public function about(): Response\n    {\n        return new Response('Page \u00e0 propos');\n    }\n}\n</code></pre> <ol> <li>Retourner une vue avec <code>render()</code></li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/home\", name=\"home\")\n     */\n    public function home(): Response\n    {\n        return $this-&gt;render('home/index.html.twig');\n    }\n}\n</code></pre> <ol> <li>Retourner une redirection avec <code>redirectToRoute()</code></li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/redirect\", name=\"redirect\")\n     */\n    public function redirectToHome(): RedirectResponse\n    {\n        return $this-&gt;redirectToRoute('homepage');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#parametres-de-methode","title":"Param\u00e8tres de m\u00e9thode","text":"<p>Les param\u00e8tres de m\u00e9thode peuvent \u00eatre pass\u00e9s automatiquement depuis la route. Si un param\u00e8tre de route est d\u00e9fini, il sera inject\u00e9 directement dans la m\u00e9thode.</p> <ol> <li>Exemple de param\u00e8tre de route</li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/user/{username}\", name=\"user_profile\")\n     */\n    public function profile($username): Response\n    {\n        return new Response(\"Profil de l'utilisateur : $username\");\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#utilisation-de-services-dans-les-controleurs","title":"Utilisation de services dans les contr\u00f4leurs","text":"<p>Les services Symfony, comme le gestionnaire de session ou le service Doctrine, peuvent \u00eatre inject\u00e9s dans les contr\u00f4leurs pour effectuer des t\u00e2ches complexes.</p> <ol> <li>Exemple d'injection de service (Doctrine)</li> </ol> <pre><code>// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Repository\\ProductRepository;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass ProductController\n{\n    /**\n     * @Route(\"/products\", name=\"product_list\")\n     */\n    public function list(ProductRepository $productRepository): Response\n    {\n        $products = $productRepository-&gt;findAll();\n        return $this-&gt;render('product/list.html.twig', [\n            'products' =&gt; $products\n        ]);\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Symfony permet de g\u00e9rer les erreurs directement depuis les contr\u00f4leurs ou via des gestionnaires d'\u00e9v\u00e9nements personnalis\u00e9s. Vous pouvez \u00e9galement rediriger ou afficher des messages d'erreur lorsque n\u00e9cessaire.</p> <ol> <li>Exemple de gestion d'erreur avec <code>try-catch</code></li> </ol> <pre><code>// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\nclass ProductController\n{\n    /**\n     * @Route(\"/product/{id}\", name=\"product_show\")\n     */\n    public function show($id): Response\n    {\n        try {\n            // Logique pour r\u00e9cup\u00e9rer le produit\n            throw new NotFoundHttpException('Produit non trouv\u00e9');\n        } catch (NotFoundHttpException $e) {\n            return new Response('Erreur: ' . $e-&gt;getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Controler/#conseils-pratiques","title":"Conseils pratiques","text":"<ul> <li>Nommer les m\u00e9thodes des contr\u00f4leurs de mani\u00e8re descriptive : Choisissez des noms qui expliquent clairement ce que fait chaque action.</li> <li>Utiliser les annotations de routage pour simplifier les routes : Elles permettent de lier directement une URL \u00e0 une m\u00e9thode du contr\u00f4leur.</li> <li>Exploiter les services Symfony : Utilisez les services (comme le <code>Doctrine</code>, la gestion des sessions, ou des services personnalis\u00e9s) pour ajouter des fonctionnalit\u00e9s \u00e0 vos actions.</li> <li>S\u00e9curiser les actions : Utilisez <code>@IsGranted()</code> ou <code>denyAccessUnlessGranted()</code> pour contr\u00f4ler l'acc\u00e8s \u00e0 certaines actions.</li> </ul>"},{"location":"symfony/areas/Controler/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Controllers Documentation</li> <li>Routing and Controllers</li> <li>Symfony HTTP Foundation</li> </ul>"},{"location":"symfony/areas/Event%20Dispatcher/","title":"Event Dispatcher","text":""},{"location":"symfony/areas/Event%20Dispatcher/#documentation-symfony-event-dispatcher","title":"Documentation Symfony : Event Dispatcher","text":""},{"location":"symfony/areas/Event%20Dispatcher/#description","title":"Description","text":"<p>L'Event Dispatcher (ou distributeur d'\u00e9v\u00e9nements) est un composant de Symfony permettant de g\u00e9rer la communication entre les diff\u00e9rentes parties d'une application en utilisant des \u00e9v\u00e9nements et des \u00e9couteurs d'\u00e9v\u00e9nements. Ce m\u00e9canisme permet de s\u00e9parer les pr\u00e9occupations et d'ajouter des fonctionnalit\u00e9s \u00e0 votre application sans toucher au code existant.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#concepts-de-base","title":"Concepts de Base","text":"<ol> <li> <p>\u00c9v\u00e9nements : Un \u00e9v\u00e9nement est une notification qu'un changement ou une action importante s'est produite dans l'application. Un \u00e9v\u00e9nement contient souvent des informations sur ce qui s'est pass\u00e9.</p> </li> <li> <p>\u00c9couteurs d'\u00e9v\u00e9nements : Un \u00e9couteur est une fonction ou une m\u00e9thode qui \"\u00e9coute\" un \u00e9v\u00e9nement particulier. Lorsqu'un \u00e9v\u00e9nement est d\u00e9clench\u00e9, l'\u00e9couteur r\u00e9agit \u00e0 l'\u00e9v\u00e9nement.</p> </li> <li> <p>Distributeur d'\u00e9v\u00e9nements : Le distributeur est responsable de l'enregistrement des \u00e9couteurs et de la gestion de l'ex\u00e9cution des \u00e9couteurs lorsqu'un \u00e9v\u00e9nement est d\u00e9clench\u00e9.</p> </li> </ol>"},{"location":"symfony/areas/Event%20Dispatcher/#declencher-un-evenement","title":"D\u00e9clencher un \u00c9v\u00e9nement","text":"<p>Pour d\u00e9clencher un \u00e9v\u00e9nement, vous utilisez la m\u00e9thode <code>dispatch()</code> du distributeur d'\u00e9v\u00e9nements.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#exemple-de-declenchement-devenement","title":"Exemple de D\u00e9clenchement d'\u00c9v\u00e9nement","text":"<pre><code>// src/Event/CustomEvent.php\nnamespace App\\Event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass CustomEvent extends Event\n{\n    public const NAME = 'app.custom_event';\n\n    private $message;\n\n    public function __construct($message)\n    {\n        $this-&gt;message = $message;\n    }\n\n    public function getMessage()\n    {\n        return $this-&gt;message;\n    }\n}\n</code></pre> <pre><code>// src/Controller/CustomController.php\nnamespace App\\Controller;\n\nuse App\\Event\\CustomEvent;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CustomController extends AbstractController\n{\n    public function triggerEvent(EventDispatcherInterface $eventDispatcher)\n    {\n        $event = new CustomEvent('Hello, Event!');\n        $eventDispatcher-&gt;dispatch($event, CustomEvent::NAME);\n\n        return new Response('Event triggered!');\n    }\n}\n</code></pre> <p>Dans cet exemple, un \u00e9v\u00e9nement personnalis\u00e9 <code>CustomEvent</code> est d\u00e9clench\u00e9 dans un contr\u00f4leur.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#creer-un-ecouteur-devenement","title":"Cr\u00e9er un \u00c9couteur d'\u00c9v\u00e9nement","text":"<p>Les \u00e9couteurs r\u00e9agissent aux \u00e9v\u00e9nements d\u00e9clench\u00e9s. Vous devez les configurer dans le fichier <code>services.yaml</code>.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#exemple-de-creation-dun-ecouteur","title":"Exemple de Cr\u00e9ation d'un \u00c9couteur","text":"<pre><code>// src/EventListener/CustomEventListener.php\nnamespace App\\EventListener;\n\nuse App\\Event\\CustomEvent;\n\nclass CustomEventListener\n{\n    public function onCustomEvent(CustomEvent $event)\n    {\n        // Action effectu\u00e9e lors du d\u00e9clenchement de l'\u00e9v\u00e9nement\n        echo $event-&gt;getMessage();\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Event%20Dispatcher/#configurer-lecouteur-dans-servicesyaml","title":"Configurer l'\u00c9couteur dans <code>services.yaml</code>","text":"<pre><code># config/services.yaml\nservices:\n    App\\EventListener\\CustomEventListener:\n        tags:\n            - { name: 'kernel.event_listener', event: 'app.custom_event', method: 'onCustomEvent' }\n</code></pre> <p>L'\u00e9couteur <code>CustomEventListener</code> r\u00e9agit \u00e0 l'\u00e9v\u00e9nement <code>app.custom_event</code> en appelant la m\u00e9thode <code>onCustomEvent</code>.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#parametres-et-retour-de-dispatch","title":"Param\u00e8tres et Retour de <code>dispatch()</code>","text":"<p>La m\u00e9thode <code>dispatch()</code> permet de d\u00e9clencher un \u00e9v\u00e9nement et de passer des donn\u00e9es suppl\u00e9mentaires \u00e0 l'\u00e9v\u00e9nement. Elle retourne l'objet \u00e9v\u00e9nement, ce qui permet de cha\u00eener les appels.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#exemple-de-passage-de-parametres-et-chaining","title":"Exemple de Passage de Param\u00e8tres et Chaining","text":"<pre><code>$event = new CustomEvent('Hello, Event!');\n$returnedEvent = $eventDispatcher-&gt;dispatch($event, CustomEvent::NAME);\n\n// Vous pouvez acc\u00e9der aux donn\u00e9es de l'\u00e9v\u00e9nement apr\u00e8s sa propagation\necho $returnedEvent-&gt;getMessage();\n</code></pre>"},{"location":"symfony/areas/Event%20Dispatcher/#evenements-avec-priorite","title":"\u00c9v\u00e9nements avec Priorit\u00e9","text":"<p>Vous pouvez sp\u00e9cifier la priorit\u00e9 d'un \u00e9couteur d'\u00e9v\u00e9nement. Par d\u00e9faut, la priorit\u00e9 est <code>0</code>, mais vous pouvez la modifier pour ex\u00e9cuter un \u00e9couteur avant ou apr\u00e8s d'autres \u00e9couteurs.</p> <pre><code># config/services.yaml\nservices:\n    App\\EventListener\\CustomEventListener:\n        tags:\n            - { name: 'kernel.event_listener', event: 'app.custom_event', method: 'onCustomEvent', priority: 10 }\n</code></pre> <p>Dans cet exemple, l'\u00e9couteur sera ex\u00e9cut\u00e9 avant les autres \u00e9couteurs avec une priorit\u00e9 inf\u00e9rieure.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#evenements-de-type-subscriber","title":"\u00c9v\u00e9nements de Type Subscriber","text":"<p>Un Event Subscriber (ou abonn\u00e9 \u00e0 un \u00e9v\u00e9nement) est une autre mani\u00e8re d'\u00e9couter des \u00e9v\u00e9nements. Un subscriber est une classe qui \u00e9coute plusieurs \u00e9v\u00e9nements. Vous devez impl\u00e9menter l'interface <code>EventSubscriberInterface</code>.</p>"},{"location":"symfony/areas/Event%20Dispatcher/#exemple-de-subscriber","title":"Exemple de Subscriber","text":"<pre><code>// src/EventSubscriber/CustomEventSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse App\\Event\\CustomEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CustomEventSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            CustomEvent::NAME =&gt; 'onCustomEvent',\n        ];\n    }\n\n    public function onCustomEvent(CustomEvent $event)\n    {\n        // Logic to handle event\n        echo $event-&gt;getMessage();\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Event%20Dispatcher/#configurer-le-subscriber-dans-servicesyaml","title":"Configurer le Subscriber dans <code>services.yaml</code>","text":"<pre><code># config/services.yaml\nservices:\n    App\\EventSubscriber\\CustomEventSubscriber:\n        tags:\n            - { name: 'kernel.event_subscriber' }\n</code></pre>"},{"location":"symfony/areas/Event%20Dispatcher/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>S\u00e9parer les responsabilit\u00e9s : Utilisez des \u00e9v\u00e9nements pour s\u00e9parer les pr\u00e9occupations dans votre application. Par exemple, utilisez un \u00e9v\u00e9nement pour notifier que des donn\u00e9es ont \u00e9t\u00e9 mises \u00e0 jour, puis laissez un autre service ou une autre partie de l'application g\u00e9rer ce changement.</li> <li>Utilisation de Priorit\u00e9s : G\u00e9rez l'ordre d'ex\u00e9cution des \u00e9couteurs en utilisant la priorit\u00e9. Cela vous permet de garantir que certains \u00e9couteurs sont ex\u00e9cut\u00e9s avant ou apr\u00e8s d'autres.</li> <li>Abonn\u00e9s aux \u00e9v\u00e9nements pour plus de flexibilit\u00e9 : Les abonn\u00e9s sont id\u00e9aux si vous devez \u00e9couter plusieurs \u00e9v\u00e9nements avec une seule classe.</li> <li>Testez vos \u00e9v\u00e9nements et \u00e9couteurs : Assurez-vous que les \u00e9v\u00e9nements et leurs \u00e9couteurs sont correctement test\u00e9s pour garantir leur bon fonctionnement.</li> </ul>"},{"location":"symfony/areas/Event%20Dispatcher/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation Symfony : Event Dispatcher</li> <li>EventDispatcherInterface</li> </ul>"},{"location":"symfony/areas/Forms/","title":"Forms","text":""},{"location":"symfony/areas/Forms/#documentation-symfony-les-forms","title":"Documentation Symfony : Les Forms","text":"<p>[[createForm()]]</p>"},{"location":"symfony/areas/Forms/#description","title":"Description","text":"<p>Le composant Forms de Symfony permet de g\u00e9rer la cr\u00e9ation, la validation et l'affichage des formulaires dans une application web. Il fournit des outils puissants pour simplifier le processus de traitement des formulaires en combinant la gestion des donn\u00e9es, des erreurs et de l'affichage.</p>"},{"location":"symfony/areas/Forms/#creation-dun-formulaire","title":"Cr\u00e9ation d'un formulaire","text":"<ol> <li>Cr\u00e9ation d'une classe de formulaire Symfony utilise des classes de formulaire pour d\u00e9finir les champs et leurs options. Vous devez cr\u00e9er une classe de formulaire, g\u00e9n\u00e9ralement dans le r\u00e9pertoire <code>src/Form/</code>.</li> </ol> <pre><code>// src/Form/ContactType.php\nnamespace App\\Form;\n\nuse App\\Entity\\Contact;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass ContactType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            -&gt;add('name', TextType::class)\n            -&gt;add('email', EmailType::class)\n            -&gt;add('submit', SubmitType::class);\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver-&gt;setDefaults([\n            'data_class' =&gt; Contact::class,\n        ]);\n    }\n}\n</code></pre> <p>Dans cet exemple, nous avons d\u00e9fini un formulaire <code>ContactType</code> avec un champ <code>name</code>, un champ <code>email</code>, et un bouton <code>submit</code>.</p> <ol> <li>Cr\u00e9ation du formulaire dans un contr\u00f4leur</li> </ol> <pre><code>// src/Controller/ContactController.php\nnamespace App\\Controller;\n\nuse App\\Form\\ContactType;\nuse App\\Entity\\Contact;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass ContactController extends AbstractController\n{\n    /**\n     * @Route(\"/contact\", name=\"contact\")\n     */\n    public function contact(Request $request): Response\n    {\n        $contact = new Contact();\n\n        $form = $this-&gt;createForm(ContactType::class, $contact);\n\n        $form-&gt;handleRequest($request);\n\n        if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n            // Traitement des donn\u00e9es du formulaire\n            // Exemple: Enregistrer les donn\u00e9es dans la base de donn\u00e9es\n\n            return $this-&gt;redirectToRoute('success');\n        }\n\n        return $this-&gt;render('contact/index.html.twig', [\n            'form' =&gt; $form-&gt;createView(),\n        ]);\n    }\n}\n</code></pre> <p>Ici, le formulaire est cr\u00e9\u00e9 et manipul\u00e9 dans le contr\u00f4leur. Nous passons \u00e9galement la vue du formulaire \u00e0 notre template.</p>"},{"location":"symfony/areas/Forms/#affichage-dun-formulaire","title":"Affichage d'un formulaire","text":"<p>Une fois le formulaire cr\u00e9\u00e9 et pass\u00e9 au contr\u00f4leur, vous pouvez afficher le formulaire dans le template.</p> <pre><code>{# templates/contact/index.html.twig #}\n&lt;form method=\"post\"&gt;\n    {{ form_start(form) }}\n    {{ form_row(form.name) }}\n    {{ form_row(form.email) }}\n    {{ form_row(form.submit) }}\n    {{ form_end(form) }}\n&lt;/form&gt;\n</code></pre> <p>Les fonctions [[form_start()]], [[form_row()]], et [[form_end()]] sont utilis\u00e9es pour rendre le formulaire dans le template.</p>"},{"location":"symfony/areas/Forms/#validation-des-formulaires","title":"Validation des formulaires","text":"<p>Symfony fournit un syst\u00e8me de validation des formulaires bas\u00e9 sur les contraintes.</p> <ol> <li>Exemple d'ajout de contraintes de validation</li> </ol> <pre><code>// src/Entity/Contact.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Contact\n{\n    /**\n     * @Assert\\NotBlank()\n     * @Assert\\Length(min=2)\n     */\n    private $name;\n\n    /**\n     * @Assert\\NotBlank()\n     * @Assert\\Email()\n     */\n    private $email;\n\n    // getters and setters\n}\n</code></pre> <p>Les annotations <code>@Assert\\NotBlank()</code> et <code>@Assert\\Length(min=2)</code> d\u00e9finissent des contraintes de validation pour le champ <code>name</code>, et <code>@Assert\\Email()</code> valide le format de l'email.</p> <ol> <li>Afficher les erreurs de validation dans le template</li> </ol> <pre><code>{# templates/contact/index.html.twig #}\n&lt;form method=\"post\"&gt;\n    {{ form_start(form) }}\n    {{ form_row(form.name) }}\n    {% if form.name.vars.errors|length &gt; 0 %}\n        &lt;div class=\"errors\"&gt;\n            {% for error in form.name.vars.errors %}\n                &lt;p&gt;{{ error.message }}&lt;/p&gt;\n            {% endfor %}\n        &lt;/div&gt;\n    {% endif %}\n    {{ form_row(form.email) }}\n    {{ form_row(form.submit) }}\n    {{ form_end(form) }}\n&lt;/form&gt;\n</code></pre>"},{"location":"symfony/areas/Forms/#types-de-champs-de-formulaire-courants","title":"Types de champs de formulaire courants","text":"<p>Symfony offre de nombreux types de champs pour vos formulaires. Voici quelques-uns des types les plus utilis\u00e9s :</p> <ul> <li>TextType : Champ de texte simple.</li> <li>EmailType : Champ pour une adresse email.</li> <li>PasswordType : Champ pour un mot de passe.</li> <li>IntegerType : Champ pour un entier.</li> <li>ChoiceType : Liste d\u00e9roulante.</li> <li>DateType : Champ de s\u00e9lection de date.</li> </ul> <p>Exemple avec le type <code>ChoiceType</code> :</p> <pre><code>$builder-&gt;add('category', ChoiceType::class, [\n    'choices' =&gt; [\n        'Option 1' =&gt; 1,\n        'Option 2' =&gt; 2,\n        'Option 3' =&gt; 3,\n    ],\n]);\n</code></pre>"},{"location":"symfony/areas/Forms/#gestion-de-la-soumission-du-formulaire","title":"Gestion de la soumission du formulaire","text":"<p>Pour g\u00e9rer la soumission du formulaire, vous devez utiliser la m\u00e9thode <code>handleRequest()</code> et v\u00e9rifier si le formulaire a \u00e9t\u00e9 soumis et s'il est valide.</p> <pre><code>$form-&gt;handleRequest($request);\n\nif ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n    // Traitement des donn\u00e9es du formulaire\n}\n</code></pre> <ul> <li>isSubmitted() : V\u00e9rifie si le formulaire a \u00e9t\u00e9 soumis.</li> <li>isValid() : V\u00e9rifie si le formulaire est valide en fonction des contraintes de validation.</li> </ul>"},{"location":"symfony/areas/Forms/#conseils-pratiques","title":"Conseils pratiques","text":"<ul> <li>Utilisation des Form Types : Cr\u00e9ez des classes de formulaire s\u00e9par\u00e9es pour chaque entit\u00e9 afin d'am\u00e9liorer la r\u00e9utilisabilit\u00e9.</li> <li>Validation : Utilisez les annotations de validation directement dans les entit\u00e9s pour garantir la validit\u00e9 des donn\u00e9es.</li> <li>Rendu personnalis\u00e9 : Utilisez <code>form_row()</code> et <code>form_widget()</code> pour personnaliser le rendu de chaque champ si n\u00e9cessaire.</li> </ul>"},{"location":"symfony/areas/Forms/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony - Formulaires</li> <li>Symfony - Form Types</li> </ul>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/","title":"Internationalization","text":""},{"location":"symfony/areas/Internationalization%20%28i18n%29/#documentation-symfony-internationalization-i18n","title":"Documentation Symfony : Internationalization (i18n)","text":""},{"location":"symfony/areas/Internationalization%20%28i18n%29/#description","title":"Description","text":"<p>L'internationalisation (i18n) dans Symfony permet de rendre votre application accessible dans plusieurs langues. Symfony fournit des outils pour g\u00e9rer les traductions, la gestion des locales et l'adaptation des formats de date, heure, monnaie, etc.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#configuration-de-la-locale","title":"Configuration de la locale","text":"<p>La locale d\u00e9finit la langue et les param\u00e8tres culturels de votre application (comme le format de date, la devise, etc.).</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#configuration-de-la-locale-par-defaut","title":"Configuration de la locale par d\u00e9faut","text":"<p>Dans le fichier <code>config/packages/framework.yaml</code>, vous pouvez configurer la locale par d\u00e9faut :</p> <pre><code>framework:\n    default_locale: en\n</code></pre> <p>Cela d\u00e9finit la langue par d\u00e9faut sur l'anglais (en).</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#changer-la-locale-dynamiquement","title":"Changer la locale dynamiquement","text":"<p>Vous pouvez modifier la locale en fonction des pr\u00e9f\u00e9rences de l'utilisateur ou de l'URL. Pour cela, vous pouvez utiliser un <code>LocaleListener</code> ou un service personnalis\u00e9.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#exemple-avec-un-controleur","title":"Exemple avec un contr\u00f4leur :","text":"<pre><code>// src/Controller/LanguageController.php\n\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\n\nclass LanguageController\n{\n    /**\n     * @Route(\"/language/{locale}\", name=\"set_language\")\n     */\n    public function setLanguage($locale, SessionInterface $session)\n    {\n        $session-&gt;set('_locale', $locale);\n        return new RedirectResponse($session-&gt;get('_previous', '/'));\n    }\n}\n</code></pre> <p>Ici, nous d\u00e9finissons un contr\u00f4leur pour changer la langue et la stocker dans la session.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#traductions-avec-symfony","title":"Traductions avec Symfony","text":"<p>Symfony utilise des fichiers de traduction pour stocker les traductions des cha\u00eenes de texte dans l'application. Ces fichiers sont plac\u00e9s dans le r\u00e9pertoire <code>translations/</code> et sont utilis\u00e9s selon la locale active.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#structure-des-fichiers-de-traduction","title":"Structure des fichiers de traduction","text":"<p>Les fichiers de traduction sont organis\u00e9s par langue et peuvent \u00eatre de type <code>.yaml</code>, <code>.xlf</code>, <code>.php</code>, etc.</p> <p>Par exemple, un fichier de traduction pour l'anglais (<code>messages.en.yaml</code>) :</p> <pre><code># translations/messages.en.yaml\ngreeting: \"Hello\"\n</code></pre> <p>Et un fichier pour le fran\u00e7ais (<code>messages.fr.yaml</code>) :</p> <pre><code># translations/messages.fr.yaml\ngreeting: \"Bonjour\"\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#utilisation-des-traductions-dans-le-code","title":"Utilisation des traductions dans le code","text":"<p>Vous pouvez utiliser les traductions dans vos contr\u00f4leurs et templates en utilisant la fonction <code>trans</code> de Symfony.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#dans-un-controleur","title":"Dans un contr\u00f4leur :","text":"<pre><code>// src/Controller/HelloController.php\n\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass HelloController\n{\n    public function greet(TranslatorInterface $translator)\n    {\n        $greeting = $translator-&gt;trans('greeting');\n        return new Response($greeting);\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#dans-un-template-twig","title":"Dans un template Twig :","text":"<pre><code>{# templates/hello/greet.html.twig #}\n\n&lt;h1&gt;{{ 'greeting'|trans }}&lt;/h1&gt;\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#gestion-des-formats-specifiques-a-la-locale","title":"Gestion des formats sp\u00e9cifiques \u00e0 la locale","text":"<p>Symfony permet \u00e9galement d'adapter le format des dates, heures, nombres et devises selon la locale active.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#exemple-avec-des-dates","title":"Exemple avec des dates :","text":"<pre><code>use Symfony\\Component\\Intl\\DateFormatter\\IntlDateFormatter;\n\n$date = new \\DateTime();\n$formatter = new IntlDateFormatter('fr_FR', IntlDateFormatter::LONG, IntlDateFormatter::NONE);\necho $formatter-&gt;format($date);  // Affiche la date format\u00e9e en fran\u00e7ais\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#exemple-avec-des-devises","title":"Exemple avec des devises :","text":"<pre><code>use Symfony\\Component\\Intl\\NumberFormatter\\NumberFormatter;\n\n$currencyFormatter = new NumberFormatter('fr_FR', NumberFormatter::CURRENCY);\necho $currencyFormatter-&gt;formatCurrency(1234.56, 'EUR');  // Affiche 1\u00a0234,56\u00a0\u20ac\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#routage-avec-locale","title":"Routage avec locale","text":"<p>Symfony vous permet de g\u00e9rer les routes avec ou sans la locale dans l'URL.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#exemple-de-route-avec-locale-dans-lurl","title":"Exemple de route avec locale dans l'URL :","text":"<pre><code># config/routes.yaml\nhome:\n    path: /{_locale}/home\n    controller: App\\Controller\\HomeController::index\n    requirements:\n        _locale: en|fr|de\n</code></pre> <p>Cette configuration rend l'URL dynamique selon la locale choisie, par exemple <code>/en/home</code> ou <code>/fr/home</code>.</p>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#definir-la-locale-a-partir-de-lurl","title":"D\u00e9finir la locale \u00e0 partir de l'URL","text":"<p>Dans votre contr\u00f4leur, vous pouvez r\u00e9cup\u00e9rer la locale de l'URL via le param\u00e8tre <code>_locale</code>.</p> <pre><code>public function index($_locale)\n{\n    // $_locale est la locale extraite de l'URL\n    // Vous pouvez l'utiliser pour changer dynamiquement la locale de l'application\n}\n</code></pre>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Stocker la locale dans la session : Si vous souhaitez que l'utilisateur garde sa langue pr\u00e9f\u00e9r\u00e9e entre les diff\u00e9rentes pages de votre application, stockez la locale dans la session ou dans un cookie.</li> <li>Utiliser des fallback : Lorsque vous ajoutez des traductions, assurez-vous de pr\u00e9voir une langue par d\u00e9faut en cas de traduction manquante.</li> <li>Utiliser des fichiers YAML ou XLIFF : Les fichiers de traduction en format YAML ou XLIFF sont tr\u00e8s pratiques pour g\u00e9rer plusieurs langues. L'option XLIFF est particuli\u00e8rement utile pour une traduction professionnelle.</li> <li>Traduction de format de donn\u00e9es : Utilisez la fonction <code>trans</code> pour tout texte que vous souhaitez traduire, y compris les messages d'erreur, les messages de validation, etc.</li> <li>Optimisation des traductions : Si vous avez un grand nombre de traductions, pensez \u00e0 utiliser le cache de traduction pour am\u00e9liorer les performances de votre application.</li> </ol>"},{"location":"symfony/areas/Internationalization%20%28i18n%29/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation officielle Symfony i18n</li> <li>Symfony Localization</li> <li>Traduction avec Symfony et Twig</li> </ul>"},{"location":"symfony/areas/Messenger/","title":"Messenger","text":""},{"location":"symfony/areas/Messenger/#documentation-symfony-messenger","title":"Documentation Symfony : Messenger","text":""},{"location":"symfony/areas/Messenger/#description","title":"Description","text":"<p>Symfony Messenger est un composant permettant de g\u00e9rer l'envoi, la r\u00e9ception et le traitement des messages dans une application. Il facilite l'impl\u00e9mentation de l'architecture asynchrone, en utilisant des files d'attente et des transports comme RabbitMQ, SQS, ou m\u00eame des bases de donn\u00e9es.</p>"},{"location":"symfony/areas/Messenger/#installation-du-composant-messenger","title":"Installation du Composant Messenger","text":"<p>Pour installer Messenger dans votre projet Symfony, utilisez Composer :</p> <pre><code>composer require symfony/messenger\n</code></pre> <p>Cela ajoute le composant Messenger ainsi que les d\u00e9pendances n\u00e9cessaires au projet.</p>"},{"location":"symfony/areas/Messenger/#configuration-de-messenger","title":"Configuration de Messenger","text":"<p>La configuration de Messenger se fait principalement dans le fichier <code>config/packages/messenger.yaml</code>. Vous pouvez d\u00e9finir les diff\u00e9rents transports (syst\u00e8mes de files d'attente) et routes (comment les messages sont achemin\u00e9s).</p> <p>Exemple de configuration de transport utilisant Doctrine :</p> <pre><code>framework:\n    messenger:\n        buses:\n            default:\n                default_middleware: true\n                middleware:\n                    - 'Symfony\\Component\\Messenger\\Middleware\\AddBusNameStamp'\n        routing:\n            'App\\Message\\YourMessage': async # Route vers un transport sp\u00e9cifique\n        transports:\n            async: '%env(MESSENGER_TRANSPORT_DSN)%'\n</code></pre> <ul> <li>Transports : d\u00e9finissent o\u00f9 et comment les messages seront envoy\u00e9s (par exemple, vers RabbitMQ, une base de donn\u00e9es ou un autre syst\u00e8me).</li> <li>Buses : organisent la gestion des messages, en permettant de d\u00e9finir les bus de messages (par exemple, <code>default</code>, <code>command</code>, <code>event</code>).</li> <li>Routing : permet de sp\u00e9cifier quel transport utiliser pour chaque type de message.</li> </ul>"},{"location":"symfony/areas/Messenger/#creation-dun-message","title":"Cr\u00e9ation d'un Message","text":"<p>Un message dans Symfony Messenger est une simple classe PHP. Vous pouvez cr\u00e9er un message en d\u00e9finissant ses propri\u00e9t\u00e9s et ses m\u00e9thodes n\u00e9cessaires.</p> <p>Exemple d'une classe <code>Message</code> :</p> <pre><code>namespace App\\Message;\n\nclass MyMessage\n{\n    private string $content;\n\n    public function __construct(string $content)\n    {\n        $this-&gt;content = $content;\n    }\n\n    public function getContent(): string\n    {\n        return $this-&gt;content;\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Messenger/#envoi-dun-message","title":"Envoi d'un Message","text":"<p>Pour envoyer un message, vous utilisez le service <code>MessageBusInterface</code>, qui permet de dispatcher les messages vers leurs handlers.</p> <pre><code>use Symfony\\Component\\Messenger\\MessageBusInterface;\nuse App\\Message\\MyMessage;\n\nclass MyController\n{\n    private MessageBusInterface $bus;\n\n    public function __construct(MessageBusInterface $bus)\n    {\n        $this-&gt;bus = $bus;\n    }\n\n    public function sendMessage()\n    {\n        $message = new MyMessage('Hello, Symfony Messenger!');\n        $this-&gt;bus-&gt;dispatch($message);\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Messenger/#traitement-des-messages-handler","title":"Traitement des Messages (Handler)","text":"<p>Un handler est une classe responsable du traitement d'un message. Un handler est li\u00e9 \u00e0 un message sp\u00e9cifique.</p> <p>Exemple d'un handler pour le message <code>MyMessage</code> :</p> <pre><code>namespace App\\Handler;\n\nuse App\\Message\\MyMessage;\nuse Symfony\\Component\\Messenger\\Handler\\MessageHandlerInterface;\n\nclass MyMessageHandler implements MessageHandlerInterface\n{\n    public function __invoke(MyMessage $message)\n    {\n        // Traitement du message\n        echo 'Message re\u00e7u : ' . $message-&gt;getContent();\n    }\n}\n</code></pre> <p>Le handler doit impl\u00e9menter l'interface <code>MessageHandlerInterface</code> et d\u00e9finir une m\u00e9thode <code>__invoke()</code> qui sera appel\u00e9e pour traiter le message.</p>"},{"location":"symfony/areas/Messenger/#traitement-asynchrone","title":"Traitement Asynchrone","text":"<p>Symfony Messenger permet de traiter les messages de mani\u00e8re asynchrone en les envoyant dans une file d'attente (comme RabbitMQ, SQS, etc.) et en les traitant via un worker.</p> <p>Configuration de la route pour le transport <code>async</code> :</p> <pre><code>framework:\n    messenger:\n        routing:\n            'App\\Message\\MyMessage': async\n        transports:\n            async: 'amqp://localhost'\n</code></pre> <p>Ex\u00e9cution du worker qui traite les messages asynchrones :</p> <pre><code>php bin/console messenger:consume async\n</code></pre> <p>Le worker consommera les messages de la file d'attente et ex\u00e9cutera les handlers correspondants.</p>"},{"location":"symfony/areas/Messenger/#middleware","title":"Middleware","text":"<p>Les middlewares sont des composants qui peuvent \u00eatre ajout\u00e9s \u00e0 la pile de traitement des messages. Chaque message passera par les middlewares avant d'\u00eatre envoy\u00e9 ou apr\u00e8s sa r\u00e9ception.</p> <p>Exemple de middleware personnalis\u00e9 :</p> <pre><code>namespace App\\Middleware;\n\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Middleware\\StackInterface;\nuse Symfony\\Component\\Messenger\\Middleware\\MiddlewareInterface;\n\nclass MyMiddleware implements MiddlewareInterface\n{\n    public function handle(Envelope $envelope, StackInterface $stack): Envelope\n    {\n        // Code ex\u00e9cut\u00e9 avant le traitement du message\n        echo 'Avant le traitement du message';\n\n        $envelope = $stack-&gt;next()-&gt;handle($envelope, $stack);\n\n        // Code ex\u00e9cut\u00e9 apr\u00e8s le traitement du message\n        echo 'Apr\u00e8s le traitement du message';\n\n        return $envelope;\n    }\n}\n</code></pre> <p>Les middlewares peuvent \u00eatre configur\u00e9s dans <code>messenger.yaml</code> et sont utilis\u00e9s pour effectuer des t\u00e2ches comme la journalisation, la gestion des erreurs ou des transactions.</p>"},{"location":"symfony/areas/Messenger/#environnement-de-production-worker","title":"Environnement de Production : Worker","text":"<p>En production, vous devez lancer un worker pour consommer les messages de mani\u00e8re continue. Utilisez la commande suivante pour d\u00e9marrer un worker en arri\u00e8re-plan :</p> <pre><code>php bin/console messenger:consume async --time-limit=3600\n</code></pre> <p>Cette commande consommera les messages de la file <code>async</code> pendant une heure, par exemple.</p>"},{"location":"symfony/areas/Messenger/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Traitement des erreurs : Utilisez les middlewares pour g\u00e9rer les erreurs ou les \u00e9checs de traitement, et consid\u00e9rez l'utilisation d'un transport comme un syst\u00e8me de <code>retry</code> en cas d'\u00e9chec.</li> <li>Performance : Les workers doivent \u00eatre ex\u00e9cut\u00e9s en permanence dans des environnements de production pour garantir un traitement rapide des messages. Utilisez des outils comme <code>supervisord</code> pour g\u00e9rer le processus en arri\u00e8re-plan.</li> <li>Scalabilit\u00e9 : Lorsque vous travaillez avec un grand nombre de messages, assurez-vous d'utiliser un transport scalable (comme RabbitMQ ou SQS) et d'avoir des workers qui consomment les messages en parall\u00e8le.</li> <li>S\u00e9curisation des messages : Si vous travaillez avec des donn\u00e9es sensibles, assurez-vous que les messages sont crypt\u00e9s ou qu'ils ne contiennent pas d'informations priv\u00e9es.</li> </ul>"},{"location":"symfony/areas/Messenger/#commandes-utiles","title":"Commandes Utiles","text":"<ul> <li><code>php bin/console messenger:consume async</code> : D\u00e9marre un worker pour consommer les messages.</li> <li><code>php bin/console messenger:flush</code> : Vide les messages qui n'ont pas encore \u00e9t\u00e9 trait\u00e9s dans les files d'attente.</li> <li><code>php bin/console messenger:show</code> : Affiche les informations de transport pour les messages.</li> </ul>"},{"location":"symfony/areas/Messenger/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Symfony Messenger Documentation</li> <li>RabbitMQ Symfony Messenger Example</li> </ul>"},{"location":"symfony/areas/Migrations/","title":"Migrations","text":""},{"location":"symfony/areas/Migrations/#documentation-symfony-migrations","title":"Documentation Symfony : Migrations","text":""},{"location":"symfony/areas/Migrations/#description","title":"Description","text":"<p>Les migrations dans Symfony permettent de g\u00e9rer l'\u00e9volution de la base de donn\u00e9es au fil du temps, de mani\u00e8re structur\u00e9e et contr\u00f4l\u00e9e. En utilisant Doctrine Migrations, vous pouvez versionner les changements de sch\u00e9ma de la base de donn\u00e9es, les appliquer et les annuler de mani\u00e8re fiable et r\u00e9p\u00e9table.</p>"},{"location":"symfony/areas/Migrations/#installation-et-configuration","title":"Installation et Configuration","text":""},{"location":"symfony/areas/Migrations/#installation-du-bundle-doctrine-migrations","title":"Installation du bundle Doctrine Migrations","text":"<p>Si vous utilisez Symfony Flex, Doctrine Migrations est install\u00e9 automatiquement. Sinon, vous pouvez l'ajouter \u00e0 votre projet avec la commande suivante :</p> <pre><code>composer require doctrine/doctrine-migrations-bundle\n</code></pre> <p>Apr\u00e8s installation, vous devez vous assurer que le fichier de configuration <code>config/packages/doctrine_migrations.yaml</code> existe et est correctement configur\u00e9.</p> <p>Exemple de configuration dans <code>doctrine_migrations.yaml</code> :</p> <pre><code>doctrine_migrations:\n    migration_paths:\n        'DoctrineMigrations': '%kernel.project_dir%/migrations'\n    storage:\n        table_storage:\n            table_name: 'migration_versions'\n</code></pre> <p>Le r\u00e9pertoire des migrations par d\u00e9faut est <code>migrations/</code> dans votre projet.</p>"},{"location":"symfony/areas/Migrations/#creation-dune-migration","title":"Cr\u00e9ation d'une migration","text":"<p>Une migration est un fichier PHP g\u00e9n\u00e9r\u00e9 automatiquement \u00e0 partir des changements apport\u00e9s \u00e0 votre sch\u00e9ma de base de donn\u00e9es. Pour cr\u00e9er une migration, utilisez la commande suivante :</p> <pre><code>php bin/console doctrine:migrations:diff\n</code></pre> <p>Cette commande compare l'\u00e9tat actuel de votre base de donn\u00e9es avec les entit\u00e9s Doctrine et g\u00e9n\u00e8re un fichier de migration qui contient les instructions SQL n\u00e9cessaires pour mettre \u00e0 jour la base de donn\u00e9es.</p> <p>Exemple de fichier de migration g\u00e9n\u00e9r\u00e9 :</p> <pre><code>&lt;?php\n\nnamespace DoctrineMigrations;\n\nuse Doctrine\\DBAL\\Schema\\Schema;\nuse Doctrine\\Migrations\\AbstractMigration;\n\nclass Version20231215000000 extends AbstractMigration\n{\n    public function up(Schema $schema): void\n    {\n        // Cr\u00e9er une table\n        $this-&gt;addSql('CREATE TABLE user (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id))');\n    }\n\n    public function down(Schema $schema): void\n    {\n        // Annuler la migration\n        $this-&gt;addSql('DROP TABLE user');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Migrations/#execution-des-migrations","title":"Ex\u00e9cution des Migrations","text":"<p>Une fois la migration g\u00e9n\u00e9r\u00e9e, vous pouvez l'ex\u00e9cuter avec la commande suivante :</p> <pre><code>php bin/console doctrine:migrations:migrate\n</code></pre> <p>Cela appliquera les migrations non ex\u00e9cut\u00e9es et mettra \u00e0 jour la base de donn\u00e9es en cons\u00e9quence. Il est recommand\u00e9 d'utiliser cette commande sur votre environnement de production avec pr\u00e9caution, car elle modifie directement la base de donn\u00e9es.</p>"},{"location":"symfony/areas/Migrations/#option-pour-forcer-lexecution-sans-confirmation","title":"Option pour forcer l'ex\u00e9cution sans confirmation :","text":"<pre><code>php bin/console doctrine:migrations:migrate --no-interaction\n</code></pre>"},{"location":"symfony/areas/Migrations/#annulation-dune-migration","title":"Annulation d'une Migration","text":"<p>Si vous souhaitez annuler une migration ou revenir \u00e0 une version pr\u00e9c\u00e9dente de la base de donn\u00e9es, vous pouvez utiliser la commande suivante :</p> <pre><code>php bin/console doctrine:migrations:rollback\n</code></pre> <p>Cela annule la derni\u00e8re migration ex\u00e9cut\u00e9e et revient \u00e0 l'\u00e9tat pr\u00e9c\u00e9dent de la base de donn\u00e9es.</p>"},{"location":"symfony/areas/Migrations/#affichage-de-letat-des-migrations","title":"Affichage de l'\u00e9tat des Migrations","text":"<p>Vous pouvez afficher l'\u00e9tat des migrations (qu'elles ont \u00e9t\u00e9 appliqu\u00e9es ou non) en utilisant la commande suivante :</p> <pre><code>php bin/console doctrine:migrations:status\n</code></pre> <p>Cela fournit une liste de toutes les migrations avec leurs versions et leur \u00e9tat (appliqu\u00e9 ou non).</p>"},{"location":"symfony/areas/Migrations/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Utiliser les migrations sur tous les environnements : Les migrations doivent \u00eatre utilis\u00e9es de mani\u00e8re coh\u00e9rente sur tous les environnements (d\u00e9veloppement, test, production) pour garantir la synchronisation du sch\u00e9ma de la base de donn\u00e9es.</li> <li>Ne pas modifier manuellement les migrations g\u00e9n\u00e9r\u00e9es : \u00c9vitez de modifier manuellement les fichiers de migration g\u00e9n\u00e9r\u00e9s, sauf si vous avez une bonne raison. Mieux vaut g\u00e9n\u00e9rer une nouvelle migration pour chaque changement de sch\u00e9ma.</li> <li>Versionner les fichiers de migration : Les fichiers de migration doivent \u00eatre versionn\u00e9s dans votre syst\u00e8me de contr\u00f4le de version (par exemple, Git) pour assurer la tra\u00e7abilit\u00e9 des changements de la base de donn\u00e9es.</li> <li>Effectuer des sauvegardes avant les migrations : Avant d'appliquer des migrations sur des bases de donn\u00e9es sensibles (par exemple, en production), il est conseill\u00e9 de faire des sauvegardes pour pouvoir revenir en arri\u00e8re en cas d'erreur.</li> <li>Tests des migrations dans un environnement de d\u00e9veloppement : Toujours tester vos migrations sur un environnement local ou de d\u00e9veloppement avant de les appliquer en production.</li> </ol>"},{"location":"symfony/areas/Migrations/#commandes-utiles","title":"Commandes Utiles","text":"<ul> <li><code>doctrine:migrations:diff</code> : Cr\u00e9e une nouvelle migration bas\u00e9e sur les diff\u00e9rences entre les entit\u00e9s et la base de donn\u00e9es.</li> <li><code>doctrine:migrations:migrate</code> : Ex\u00e9cute les migrations non appliqu\u00e9es.</li> <li><code>doctrine:migrations:rollback</code> : Annule la derni\u00e8re migration.</li> <li><code>doctrine:migrations:status</code> : Affiche l'\u00e9tat actuel des migrations.</li> <li><code>doctrine:migrations:generate</code> : G\u00e9n\u00e9re un squelette de migration vide (utile pour les migrations manuelles).</li> </ul>"},{"location":"symfony/areas/Migrations/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Symfony Doctrine Migrations Documentation</li> <li>Doctrine Migrations Documentation</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/","title":"Profiler & Debugging","text":""},{"location":"symfony/areas/Profiler%20%26%20debuging/#documentation-symfony-profiler-debugging-tool","title":"Documentation Symfony : Profiler &amp; Debugging Tool","text":""},{"location":"symfony/areas/Profiler%20%26%20debuging/#description","title":"Description","text":"<p>Le Profiler Symfony est un outil puissant pour le d\u00e9bogage et l'analyse des applications Symfony. Il permet de collecter des informations d\u00e9taill\u00e9es sur l'ex\u00e9cution des requ\u00eates HTTP, l'\u00e9tat des services, la base de donn\u00e9es, la performance, les logs, et bien plus encore. Le Profiler s'int\u00e8gre directement dans l'interface d'administration de Symfony et est particuli\u00e8rement utile pendant le d\u00e9veloppement.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#installation","title":"Installation","text":"<p>Le Profiler est inclus par d\u00e9faut dans Symfony lors de l'installation du package web profiler.</p> <p>Pour l'installer ou v\u00e9rifier sa pr\u00e9sence, vous pouvez utiliser Composer :</p> <pre><code>composer require symfony/web-profiler-bundle --dev\n</code></pre> <p>Le Profiler est uniquement activ\u00e9 en environnement dev (d\u00e9veloppement), donc il ne sera pas utilis\u00e9 en production.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#acceder-au-profiler","title":"Acc\u00e9der au Profiler","text":"<p>Une fois install\u00e9, le Profiler peut \u00eatre consult\u00e9 via une barre d'outils en bas de chaque page de l'application lorsque vous \u00eates en environnement de d\u00e9veloppement. En cliquant sur l'ic\u00f4ne du Profiler, vous acc\u00e9dez \u00e0 un tableau de bord d\u00e9taillant toutes les informations li\u00e9es \u00e0 la requ\u00eate.</p> <ul> <li>Barre de Profiler : Affich\u00e9e en bas de la page, elle donne un acc\u00e8s rapide aux diff\u00e9rentes informations du Profiler (temps d'ex\u00e9cution, requ\u00eates SQL, services utilis\u00e9s, etc.).</li> <li>URL du Profiler : Vous pouvez \u00e9galement acc\u00e9der au Profiler via l'URL <code>/_profiler</code> dans votre application.</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#fonctionnalites-du-profiler","title":"Fonctionnalit\u00e9s du Profiler","text":"<p>Le Profiler offre plusieurs panneaux pour analyser en profondeur votre application Symfony :</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#1-information-generale","title":"1. Information G\u00e9n\u00e9rale","text":"<p>Contient des informations de base sur la requ\u00eate HTTP en cours (m\u00e9thode HTTP, URI, IP, etc.), ainsi que le temps d'ex\u00e9cution et le statut HTTP.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#2-performance","title":"2. Performance","text":"<p>Montre les performances globales de la requ\u00eate, y compris :</p> <ul> <li>Le temps de traitement</li> <li>Le temps d'ex\u00e9cution de chaque middleware</li> <li>La quantit\u00e9 de m\u00e9moire utilis\u00e9e</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#3-logs","title":"3. Logs","text":"<p>Affiche les logs g\u00e9n\u00e9r\u00e9s durant la requ\u00eate, tri\u00e9s par niveau (DEBUG, INFO, ERROR, etc.).</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#4-base-de-donnees","title":"4. Base de donn\u00e9es","text":"<p>Affiche les requ\u00eates SQL ex\u00e9cut\u00e9es pendant la requ\u00eate, leur dur\u00e9e d'ex\u00e9cution et le nombre de fois qu'elles ont \u00e9t\u00e9 appel\u00e9es.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#5-services","title":"5. Services","text":"<p>Affiche la liste des services utilis\u00e9s dans la requ\u00eate, avec leurs param\u00e8tres et leur \u00e9tat d'initialisation.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#6-routes","title":"6. Routes","text":"<p>Permet d'explorer les routes utilis\u00e9es, les contr\u00f4leurs associ\u00e9s et les param\u00e8tres pass\u00e9s.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#7-twig","title":"7. Twig","text":"<p>Affiche des informations sur le rendu des templates Twig, le temps pass\u00e9 dans chaque template et les variables utilis\u00e9es.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#8-request","title":"8. Request","text":"<p>D\u00e9taille les informations relatives \u00e0 la requ\u00eate HTTP, comme les headers, les cookies, et les param\u00e8tres de la requ\u00eate.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#9-session","title":"9. Session","text":"<p>Affiche les donn\u00e9es stock\u00e9es dans la session de l'utilisateur, comme les variables et les flash messages.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#utiliser-le-profiler-en-commande","title":"Utiliser le Profiler en Commande","text":"<p>Le Profiler peut aussi \u00eatre utilis\u00e9 via des commandes en ligne pour explorer les informations de la requ\u00eate en profondeur.</p> <pre><code>php bin/console debug:router    # Liste les routes disponibles\nphp bin/console debug:container    # Liste les services du conteneur\nphp bin/console debug:twig    # Affiche les templates Twig utilis\u00e9s\n</code></pre> <p>Ces commandes fournissent des informations utiles directement dans le terminal pour une analyse rapide.</p>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#personnalisation","title":"Personnalisation","text":"<p>Le Profiler peut \u00eatre personnalis\u00e9 en fonction des besoins de votre application. Par exemple, vous pouvez activer ou d\u00e9sactiver certains panneaux ou ajouter de nouveaux collecteurs de donn\u00e9es.</p> <p>Exemple de configuration pour d\u00e9sactiver un panneau dans le fichier <code>config/packages/dev/web_profiler.yaml</code> :</p> <pre><code>web_profiler:\n    toolbar: true\n    intercept_redirects: false\n    panels:\n        - request\n        - time\n        - database\n        - security\n</code></pre>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#deboguer-avec-le-profiler","title":"D\u00e9boguer avec le Profiler","text":"<p>Le Profiler est l'outil id\u00e9al pour d\u00e9boguer une application Symfony. Voici quelques conseils pour l'utiliser efficacement :</p> <ul> <li>Performance : Utilisez le panneau de performance pour identifier les goulets d'\u00e9tranglement dans votre application (temps d'ex\u00e9cution lent ou requ\u00eates SQL trop nombreuses).</li> <li>Base de donn\u00e9es : Surveillez les requ\u00eates SQL, en particulier leur nombre et leur dur\u00e9e. Cela vous permet d'identifier les requ\u00eates co\u00fbteuses ou inutiles.</li> <li>Logs : Si vous avez des erreurs ou des comportements inattendus, examinez les logs du Profiler pour voir si des exceptions ou des messages d'erreur sont g\u00e9n\u00e9r\u00e9s pendant la requ\u00eate.</li> <li>Services : V\u00e9rifiez que les services sont correctement inject\u00e9s et initialis\u00e9s, ce qui est particuli\u00e8rement utile si un service ne fonctionne pas comme pr\u00e9vu.</li> <li>Twig : Utilisez l'onglet Twig pour analyser le rendu des templates et v\u00e9rifier que les variables sont correctement transmises \u00e0 chaque vue.</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#cas-derreur-courants","title":"Cas d'Erreur Courants","text":"<ul> <li>Probl\u00e8me d'affichage du Profiler : Si vous ne voyez pas la barre du Profiler en bas de votre page, assurez-vous que l'environnement est en mode <code>dev</code> et que le bundle est correctement install\u00e9.</li> <li>Panel manquant : Si un panneau ne s'affiche pas dans le Profiler, il peut \u00eatre d\u00e9sactiv\u00e9 dans la configuration ou ne pas \u00eatre collect\u00e9 pour cette requ\u00eate particuli\u00e8re.</li> <li>Probl\u00e8me de performance : Si votre application est lente, v\u00e9rifiez le nombre de requ\u00eates SQL ex\u00e9cut\u00e9es et la quantit\u00e9 de m\u00e9moire utilis\u00e9e pendant la requ\u00eate. Un nombre \u00e9lev\u00e9 de requ\u00eates ou un temps de rendu \u00e9lev\u00e9 peut \u00eatre la cause de la lenteur.</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Utilisez le Profiler pour inspecter chaque requ\u00eate HTTP pendant le d\u00e9veloppement, cela vous aide \u00e0 identifier les probl\u00e8mes rapidement.</li> <li>Ne laissez jamais le Profiler activ\u00e9 en production, car il peut exposer des donn\u00e9es sensibles et ralentir les performances de l'application.</li> <li>Combinez l'utilisation du Profiler avec des outils de profiling externes comme Xdebug pour obtenir des informations encore plus d\u00e9taill\u00e9es.</li> </ul>"},{"location":"symfony/areas/Profiler%20%26%20debuging/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Symfony Profiler Documentation</li> <li>Symfony Debugging Tools</li> </ul>"},{"location":"symfony/areas/Security/","title":"Security","text":""},{"location":"symfony/areas/Security/#documentation-symfony-security","title":"Documentation Symfony : Security","text":""},{"location":"symfony/areas/Security/#description","title":"Description","text":"<p>Le composant Security de Symfony fournit une infrastructure compl\u00e8te pour la gestion de la s\u00e9curit\u00e9 dans une application web, notamment l'authentification, l'autorisation et la gestion des r\u00f4les. Il permet de prot\u00e9ger les ressources sensibles et d'assurer que seuls les utilisateurs autoris\u00e9s peuvent y acc\u00e9der.</p>"},{"location":"symfony/areas/Security/#concepts-de-base","title":"Concepts de Base","text":"<ol> <li> <p>Authentification : Le processus qui permet d'identifier un utilisateur. Cela peut \u00eatre r\u00e9alis\u00e9 via des formulaires de connexion, des jetons API, des cookies, etc.</p> </li> <li> <p>Autorisation : La v\u00e9rification des permissions d'un utilisateur apr\u00e8s son identification, afin de d\u00e9terminer si l'utilisateur peut acc\u00e9der \u00e0 une ressource ou effectuer une action.</p> </li> <li> <p>R\u00f4les : Les r\u00f4les sont des attributs attribu\u00e9s aux utilisateurs pour d\u00e9terminer leurs privil\u00e8ges dans l'application. Par exemple, <code>ROLE_USER</code> ou <code>ROLE_ADMIN</code>.</p> </li> <li> <p>Firewalls : Ils servent \u00e0 prot\u00e9ger diff\u00e9rentes parties de l'application en fonction de l'URL, du type de requ\u00eate ou du m\u00e9canisme d'authentification (ex : formulaire de connexion, API REST, etc.).</p> </li> <li> <p>Access Control : La gestion des permissions pour les utilisateurs selon leurs r\u00f4les et les ressources auxquelles ils acc\u00e8dent.</p> </li> </ol>"},{"location":"symfony/areas/Security/#configuration-de-la-securite","title":"Configuration de la S\u00e9curit\u00e9","text":"<p>La configuration de la s\u00e9curit\u00e9 se fait dans le fichier <code>config/packages/security.yaml</code>. Ce fichier contient les r\u00e8gles relatives aux firewalls, access control, et les providers.</p>"},{"location":"symfony/areas/Security/#exemple-de-configuration-de-base","title":"Exemple de Configuration de Base","text":"<pre><code># config/packages/security.yaml\nsecurity:\n    # Firewall pour l'authentification via formulaire\n    firewalls:\n        # S\u00e9curisation du login\n        login:\n            pattern: ^/login$\n            security: false\n\n        # S\u00e9curisation des pages prot\u00e9g\u00e9es\n        main:\n            pattern: ^/(?!login).*$\n            form_login:\n                login_path: login\n                check_path: login\n            logout:\n                path: /logout\n            security: true\n\n    # Contr\u00f4le d'acc\u00e8s\n    access_control:\n        - { path: ^/admin, roles: ROLE_ADMIN }\n        - { path: ^/profile, roles: ROLE_USER }\n</code></pre>"},{"location":"symfony/areas/Security/#authentification-par-formulaire","title":"Authentification par Formulaire","text":"<p>L'authentification par formulaire est l'une des m\u00e9thodes les plus courantes pour authentifier les utilisateurs. Elle permet \u00e0 l'utilisateur de se connecter en envoyant son nom d'utilisateur et son mot de passe via un formulaire.</p>"},{"location":"symfony/areas/Security/#exemple-dauthentification-via-formulaire","title":"Exemple d'Authentification via Formulaire","text":"<pre><code># config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            form_login:\n                login_path: login\n                check_path: login\n                default_target_path: /dashboard\n</code></pre> <ol> <li>login_path : Le chemin de la page de connexion.</li> <li>check_path : Le chemin auquel les donn\u00e9es du formulaire sont envoy\u00e9es pour v\u00e9rifier l'authentification.</li> </ol>"},{"location":"symfony/areas/Security/#exemple-de-controleur-pour-la-connexion","title":"Exemple de Contr\u00f4leur pour la Connexion","text":"<pre><code>// src/Controller/SecurityController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass SecurityController extends AbstractController\n{\n    /**\n     * @Route(\"/login\", name=\"login\")\n     */\n    public function login()\n    {\n        // La vue du formulaire de connexion\n        return $this-&gt;render('security/login.html.twig');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Security/#access-control-controle-dacces","title":"Access Control (Contr\u00f4le d'Acc\u00e8s)","text":"<p>Le contr\u00f4le d'acc\u00e8s permet de restreindre l'acc\u00e8s aux pages selon les r\u00f4les d'un utilisateur. Il se fait dans la section <code>access_control</code> de <code>security.yaml</code>.</p>"},{"location":"symfony/areas/Security/#exemple-de-controle-dacces","title":"Exemple de Contr\u00f4le d'Acc\u00e8s","text":"<pre><code># config/packages/security.yaml\nsecurity:\n    access_control:\n        - { path: ^/admin, roles: ROLE_ADMIN }\n        - { path: ^/profile, roles: ROLE_USER }\n</code></pre> <p>Dans cet exemple, seules les personnes ayant le r\u00f4le <code>ROLE_ADMIN</code> peuvent acc\u00e9der aux pages sous <code>/admin</code>, et celles ayant le r\u00f4le <code>ROLE_USER</code> peuvent acc\u00e9der \u00e0 <code>/profile</code>.</p>"},{"location":"symfony/areas/Security/#roles-utilisateurs","title":"R\u00f4les Utilisateurs","text":"<p>Les r\u00f4les sont utilis\u00e9s pour d\u00e9finir les permissions des utilisateurs. Ils sont g\u00e9n\u00e9ralement associ\u00e9s \u00e0 un utilisateur lors de l'authentification.</p>"},{"location":"symfony/areas/Security/#exemple-dassignation-de-roles","title":"Exemple d'Assignation de R\u00f4les","text":"<pre><code>// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\nclass User implements UserInterface\n{\n    private $roles = [];\n\n    public function getRoles()\n    {\n        return $this-&gt;roles;\n    }\n\n    public function setRoles(array $roles)\n    {\n        $this-&gt;roles = $roles;\n    }\n}\n</code></pre> <p>Un utilisateur peut se voir attribuer plusieurs r\u00f4les, comme <code>ROLE_USER</code>, <code>ROLE_ADMIN</code>, ou d'autres r\u00f4les personnalis\u00e9s.</p>"},{"location":"symfony/areas/Security/#gestion-de-la-session","title":"Gestion de la Session","text":"<p>Le composant Security g\u00e8re \u00e9galement la session des utilisateurs apr\u00e8s leur authentification. Le session handler est automatiquement configur\u00e9, mais vous pouvez personnaliser son comportement.</p>"},{"location":"symfony/areas/Security/#exemple-de-recuperation-de-lutilisateur-actuel","title":"Exemple de R\u00e9cup\u00e9ration de l'Utilisateur Actuel","text":"<pre><code>// Dans un contr\u00f4leur\n$user = $this-&gt;getUser();  // R\u00e9cup\u00e8re l'utilisateur actuellement authentifi\u00e9\n</code></pre>"},{"location":"symfony/areas/Security/#methodes-utiles-dans-le-composant-security","title":"M\u00e9thodes Utiles dans le Composant Security","text":"<ul> <li>getUser() : R\u00e9cup\u00e8re l'utilisateur actuellement authentifi\u00e9.</li> <li>[[isGranted()]] : V\u00e9rifie si l'utilisateur a les droits d'acc\u00e9der \u00e0 une ressource.</li> <li>[[denyAccessUnlessGranted()]] : D\u00e9clenche une exception si l'utilisateur n'a pas les permissions n\u00e9cessaires.</li> </ul>"},{"location":"symfony/areas/Security/#exemple-dutilisation-de-isgranted-et-denyaccessunlessgranted","title":"Exemple d'Utilisation de <code>isGranted()</code> et <code>denyAccessUnlessGranted()</code>","text":"<pre><code>// Dans un contr\u00f4leur\nif ($this-&gt;isGranted('ROLE_ADMIN')) {\n    // L'utilisateur est un administrateur\n} else {\n    // L'utilisateur n'est pas autoris\u00e9\n    $this-&gt;denyAccessUnlessGranted('ROLE_ADMIN');\n}\n</code></pre>"},{"location":"symfony/areas/Security/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>S\u00e9curisez toujours les pages sensibles : Utilisez des firewalls pour prot\u00e9ger les pages et les ressources sensibles.</li> <li>Utilisez des r\u00f4les clairs et pr\u00e9cis : Ne vous contentez pas de <code>ROLE_ADMIN</code> ou <code>ROLE_USER</code>, d\u00e9finissez des r\u00f4les plus fins pour des contr\u00f4les d'acc\u00e8s plus d\u00e9taill\u00e9s.</li> <li>V\u00e9rifiez les permissions dans les contr\u00f4leurs : Utilisez <code>isGranted()</code> ou <code>denyAccessUnlessGranted()</code> pour ajouter des v\u00e9rifications de s\u00e9curit\u00e9 dans vos contr\u00f4leurs.</li> <li>Mise en \u0153uvre de l'authentification multi-facteurs (MFA) : Symfony permet d'int\u00e9grer facilement des m\u00e9canismes de s\u00e9curit\u00e9 avanc\u00e9s comme l'authentification par code SMS, email, ou autre m\u00e9thode suppl\u00e9mentaire.</li> </ul>"},{"location":"symfony/areas/Security/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation Symfony : Security</li> <li>Composant Security sur GitHub</li> </ul>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/","title":"Services & Dependency Injection","text":""},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#documentation-symfony-services-dependency-injection","title":"Documentation Symfony : Services &amp; Dependency Injection","text":""},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#description","title":"Description","text":"<p>Le Service Container et l'Injection de D\u00e9pendances (DI) sont des concepts cl\u00e9s dans Symfony. Le conteneur de services permet de centraliser et g\u00e9rer la configuration des services, tandis que l'injection de d\u00e9pendances consiste \u00e0 fournir \u00e0 un objet ses d\u00e9pendances au lieu de les cr\u00e9er lui-m\u00eame. Symfony utilise le conteneur de services pour injecter ces d\u00e9pendances automatiquement.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#concepts-de-base","title":"Concepts de base","text":"<ol> <li> <p>Service : Un service est une classe qui effectue une t\u00e2che sp\u00e9cifique dans l'application. Par exemple, un service peut \u00eatre un gestionnaire de base de donn\u00e9es, un service de mail ou un service de calculs.</p> </li> <li> <p>Injection de D\u00e9pendances (DI) : L'injection de d\u00e9pendances est un design pattern qui consiste \u00e0 passer les d\u00e9pendances d'une classe par son constructeur ou un setter plut\u00f4t que de les cr\u00e9er \u00e0 l'int\u00e9rieur de la classe elle-m\u00eame.</p> </li> <li> <p>Conteneur de Services : Symfony utilise un conteneur de services pour g\u00e9rer l'instanciation des objets. Le conteneur est responsable de la gestion de la cr\u00e9ation, de la configuration et de l'injection des d\u00e9pendances.</p> </li> </ol>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#declaration-des-services","title":"D\u00e9claration des Services","text":"<p>Les services peuvent \u00eatre d\u00e9clar\u00e9s de deux mani\u00e8res principales : par autoconfiguration (automatique) ou dans le fichier services.yaml.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#exemple-de-declaration-manuelle-servicesyaml","title":"Exemple de D\u00e9claration Manuelle (services.yaml)","text":"<pre><code># config/services.yaml\nservices:\n    App\\Service\\Mailer:\n        arguments:\n            $mailerTransport: '@mailer_transport_service'\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#exemple-de-declaration-avec-autoconfiguration","title":"Exemple de D\u00e9claration avec Autoconfiguration","text":"<pre><code># config/services.yaml\nservices:\n    App\\Service\\Mailer:\n        autowire: true  # Active l'autowiring\n        autoconfigure: true  # Active la configuration automatique des services\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#autowiring","title":"Autowiring","text":"<p>L'autowiring permet \u00e0 Symfony de deviner automatiquement quelles d\u00e9pendances injecter dans un service. Il suffit de d\u00e9clarer le type des d\u00e9pendances dans le constructeur de votre service, et Symfony les injecte automatiquement.</p> <p>Exemple avec autowiring :</p> <pre><code>// src/Service/Mailer.php\nnamespace App\\Service;\n\nuse Symfony\\Component\\Mailer\\MailerInterface;\n\nclass Mailer\n{\n    private $mailer;\n\n    // Symfony injecte automatiquement MailerInterface\n    public function __construct(MailerInterface $mailer)\n    {\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendMail($recipient, $message)\n    {\n        // Utiliser $this-&gt;mailer pour envoyer un e-mail\n    }\n}\n</code></pre> <p>Dans cet exemple, Symfony injecte automatiquement le service <code>MailerInterface</code> dans le service <code>Mailer</code>.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#injection-via-le-constructeur","title":"Injection via le Constructeur","text":"<p>L'injection par le constructeur est la m\u00e9thode la plus courante pour fournir des d\u00e9pendances \u00e0 un service.</p> <pre><code>// src/Service/MyService.php\nnamespace App\\Service;\n\nclass MyService\n{\n    private $logger;\n\n    public function __construct(\\Psr\\Log\\LoggerInterface $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n\n    public function performAction()\n    {\n        $this-&gt;logger-&gt;info('Action performed!');\n    }\n}\n</code></pre> <p>Le service <code>LoggerInterface</code> sera automatiquement inject\u00e9 par Symfony, en fonction des besoins.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#injection-via-les-setters","title":"Injection via les Setters","text":"<p>Il est \u00e9galement possible d'injecter des d\u00e9pendances via des m\u00e9thodes setter.</p> <pre><code>// src/Service/MyService.php\nnamespace App\\Service;\n\nclass MyService\n{\n    private $logger;\n\n    // Injection via setter\n    public function setLogger(\\Psr\\Log\\LoggerInterface $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n\n    public function performAction()\n    {\n        $this-&gt;logger-&gt;info('Action performed!');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#utilisation-de-services-dans-un-controleur","title":"Utilisation de Services dans un Contr\u00f4leur","text":"<p>Les services sont automatiquement inject\u00e9s dans les contr\u00f4leurs gr\u00e2ce \u00e0 l'autowiring ou en les d\u00e9clarant explicitement.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#exemple-avec-autowiring-dans-un-controleur","title":"Exemple avec Autowiring dans un Contr\u00f4leur :","text":"<pre><code>// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse App\\Service\\Mailer;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass MyController extends AbstractController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendEmail()\n    {\n        // Utiliser le service Mailer\n        $this-&gt;mailer-&gt;sendMail('example@example.com', 'Hello World');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#exemple-sans-autowiring-dans-un-controleur","title":"Exemple sans Autowiring dans un Contr\u00f4leur :","text":"<pre><code>// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse App\\Service\\Mailer;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass MyController extends AbstractController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendEmail()\n    {\n        $this-&gt;mailer-&gt;sendMail('example@example.com', 'Hello World');\n    }\n}\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#services-de-peripherie-singleton-vs-prototype","title":"Services de P\u00e9riph\u00e9rie (Singleton vs Prototype)","text":"<p>Par d\u00e9faut, les services sont cr\u00e9\u00e9s en singleton, c'est-\u00e0-dire qu'une seule instance du service est partag\u00e9e. Cependant, vous pouvez cr\u00e9er des services avec une port\u00e9e prototype pour que Symfony en cr\u00e9e une nouvelle instance \u00e0 chaque fois qu'ils sont inject\u00e9s.</p> <p>Exemple de service prototype :</p> <pre><code># config/services.yaml\nservices:\n    App\\Service\\RandomService:\n        scope: prototype\n</code></pre> <p>Cela signifie qu'\u00e0 chaque appel ou injection de ce service, Symfony cr\u00e9e une nouvelle instance de <code>RandomService</code>.</p>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#acceder-aux-services-dans-le-code","title":"Acc\u00e9der aux Services dans le Code","text":"<p>Il est \u00e9galement possible d'acc\u00e9der manuellement aux services via le conteneur de services dans un contr\u00f4leur ou un autre service. Cependant, cela est g\u00e9n\u00e9ralement d\u00e9conseill\u00e9 car il contourne l'injection de d\u00e9pendances.</p> <pre><code>// Dans un contr\u00f4leur\n$myService = $this-&gt;container-&gt;get(MyService::class);\n</code></pre>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ul> <li>Privil\u00e9gier l'injection par le constructeur : Utilisez l'injection par constructeur pour garantir que vos services ont toutes les d\u00e9pendances n\u00e9cessaires d\u00e8s leur cr\u00e9ation.</li> <li>Evitez l'acc\u00e8s direct au conteneur : Utilisez l'injection de d\u00e9pendances plut\u00f4t que d'acc\u00e9der directement aux services via le conteneur.</li> <li>S\u00e9parer les responsabilit\u00e9s : Utilisez des services pour encapsuler des fonctionnalit\u00e9s sp\u00e9cifiques et r\u00e9utilisables dans votre application, et ne mettez pas trop de logique dans les contr\u00f4leurs.</li> <li>Utilisez des groupes de services : Utilisez les tags dans le fichier <code>services.yaml</code> pour organiser vos services et cr\u00e9er des services group\u00e9s si n\u00e9cessaire.</li> </ul>"},{"location":"symfony/areas/Services%20%26%20Dependency%20Injection/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation Symfony : Services</li> <li>Injection de d\u00e9pendances Symfony</li> </ul>"},{"location":"symfony/areas/Testing/","title":"Testing","text":""},{"location":"symfony/areas/Testing/#documentation-symfony-testing","title":"Documentation Symfony : Testing","text":""},{"location":"symfony/areas/Testing/#description","title":"Description","text":"<p>Les tests dans Symfony sont essentiels pour garantir que votre application fonctionne correctement. Symfony supporte divers types de tests, comme les tests unitaires, fonctionnels et d'int\u00e9gration. Il fournit des outils comme PHPUnit pour effectuer les tests, et le framework Symfony propose des fonctionnalit\u00e9s pratiques pour faciliter la r\u00e9daction et l'ex\u00e9cution des tests.</p>"},{"location":"symfony/areas/Testing/#types-de-tests-dans-symfony","title":"Types de Tests dans Symfony","text":"<ol> <li> <p>Tests Unitaires     Les tests unitaires sont utilis\u00e9s pour tester des parties sp\u00e9cifiques du code, comme les m\u00e9thodes d'une classe.</p> </li> <li> <p>Tests Fonctionnels     Les tests fonctionnels simulent une requ\u00eate HTTP et testent le comportement global de votre application, y compris l'interaction entre les composants.</p> </li> <li> <p>Tests d'Int\u00e9gration     Les tests d'int\u00e9gration v\u00e9rifient l'interaction entre plusieurs composants ou services de votre application.</p> </li> </ol>"},{"location":"symfony/areas/Testing/#outils-de-test-dans-symfony","title":"Outils de Test dans Symfony","text":"<ul> <li>PHPUnit : Symfony utilise PHPUnit comme framework de test principal. PHPUnit est un framework pour effectuer des tests unitaires et fonctionnels en PHP.</li> <li>WebTestCase : Pour les tests fonctionnels, Symfony fournit la classe <code>WebTestCase</code>, qui permet de simuler des requ\u00eates HTTP et de v\u00e9rifier les r\u00e9ponses.</li> <li>Mocking : Utilisation de \"mocks\" pour simuler les objets dans les tests unitaires.</li> </ul>"},{"location":"symfony/areas/Testing/#configurer-phpunit","title":"Configurer PHPUnit","text":""},{"location":"symfony/areas/Testing/#exemple-de-configuration-phpunit-phpunitxml","title":"Exemple de configuration PHPUnit (<code>phpunit.xml</code>)","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;phpunit bootstrap=\"vendor/autoload.php\"&gt;\n    &lt;testsuites&gt;\n        &lt;testsuite name=\"Symfony Project Test Suite\"&gt;\n            &lt;directory&gt;./tests&lt;/directory&gt;\n        &lt;/testsuite&gt;\n    &lt;/testsuites&gt;\n&lt;/phpunit&gt;\n</code></pre> <ul> <li>bootstrap : Inclut l'autoload de Composer pour charger les classes de l'application.</li> <li>testsuites : D\u00e9finit le r\u00e9pertoire o\u00f9 PHPUnit recherche les tests.</li> </ul>"},{"location":"symfony/areas/Testing/#ecrire-des-tests-unitaires","title":"\u00c9crire des Tests Unitaires","text":"<p>Les tests unitaires v\u00e9rifient que chaque m\u00e9thode ou fonction se comporte comme pr\u00e9vu. Pour \u00e9crire un test unitaire, il est essentiel de comprendre comment les d\u00e9pendances sont g\u00e9r\u00e9es et comment les mocker si n\u00e9cessaire.</p>"},{"location":"symfony/areas/Testing/#exemple-de-test-unitaire","title":"Exemple de test unitaire","text":"<pre><code>// tests/Service/MyServiceTest.php\n\nuse PHPUnit\\Framework\\TestCase;\nuse App\\Service\\MyService;\n\nclass MyServiceTest extends TestCase\n{\n    public function testAddition()\n    {\n        $service = new MyService();\n        $result = $service-&gt;add(2, 3);\n        $this-&gt;assertEquals(5, $result);\n    }\n}\n</code></pre> <ul> <li>TestCase : Classe de base pour les tests.</li> <li>assertEquals : V\u00e9rifie que les valeurs pass\u00e9es en argument sont \u00e9gales.</li> </ul>"},{"location":"symfony/areas/Testing/#ecrire-des-tests-fonctionnels","title":"\u00c9crire des Tests Fonctionnels","text":"<p>Les tests fonctionnels permettent de tester des fonctionnalit\u00e9s compl\u00e8tes de l'application, y compris l'interaction avec le serveur HTTP.</p>"},{"location":"symfony/areas/Testing/#exemple-de-test-fonctionnel","title":"Exemple de test fonctionnel","text":"<pre><code>// tests/Controller/HomeControllerTest.php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass HomeControllerTest extends WebTestCase\n{\n    public function testIndex()\n    {\n        $client = static::createClient();\n        $crawler = $client-&gt;request('GET', '/');\n\n        $this-&gt;assertResponseIsSuccessful();\n        $this-&gt;assertSelectorTextContains('h1', 'Welcome to Symfony');\n    }\n}\n</code></pre> <ul> <li>createClient : Cr\u00e9e un client HTTP simul\u00e9 pour envoyer des requ\u00eates.</li> <li>request : Envoie une requ\u00eate HTTP.</li> <li>assertResponseIsSuccessful : V\u00e9rifie que la r\u00e9ponse a un statut HTTP 2xx.</li> <li>assertSelectorTextContains : V\u00e9rifie que le texte sp\u00e9cifi\u00e9 est pr\u00e9sent dans le s\u00e9lecteur CSS.</li> </ul>"},{"location":"symfony/areas/Testing/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":"<p>Les tests d'int\u00e9gration v\u00e9rifient que les diff\u00e9rents composants de votre application interagissent correctement entre eux.</p>"},{"location":"symfony/areas/Testing/#exemple-de-test-dintegration","title":"Exemple de test d'int\u00e9gration","text":"<pre><code>// tests/Service/UserServiceTest.php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse App\\Service\\UserService;\n\nclass UserServiceTest extends KernelTestCase\n{\n    public function testCreateUser()\n    {\n        self::bootKernel();\n        $container = self::$container;\n\n        $userService = $container-&gt;get(UserService::class);\n        $user = $userService-&gt;createUser('John Doe', 'john@example.com');\n\n        $this-&gt;assertInstanceOf(User::class, $user);\n        $this-&gt;assertEquals('John Doe', $user-&gt;getName());\n    }\n}\n</code></pre> <ul> <li>bootKernel : D\u00e9marre le noyau de Symfony pour acc\u00e9der aux services.</li> <li>self::$container : Acc\u00e8de au conteneur de services pour r\u00e9cup\u00e9rer un service sp\u00e9cifique.</li> </ul>"},{"location":"symfony/areas/Testing/#tester-les-formulaires","title":"Tester les Formulaires","text":"<p>Symfony offre des m\u00e9thodes pour tester facilement les formulaires et les soumissions de donn\u00e9es.</p>"},{"location":"symfony/areas/Testing/#exemple-de-test-de-formulaire","title":"Exemple de test de formulaire","text":"<pre><code>// tests/Form/ContactFormTest.php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass ContactFormTest extends WebTestCase\n{\n    public function testSubmitForm()\n    {\n        $client = static::createClient();\n        $crawler = $client-&gt;request('GET', '/contact');\n\n        $form = $crawler-&gt;selectButton('Submit')-&gt;form();\n        $form['contact[name]'] = 'John Doe';\n        $form['contact[email]'] = 'john@example.com';\n\n        $client-&gt;submit($form);\n\n        $this-&gt;assertResponseRedirects('/thank-you');\n    }\n}\n</code></pre> <ul> <li>selectButton : S\u00e9lectionne un bouton de formulaire pour l'interaction.</li> <li>form : R\u00e9cup\u00e8re le formulaire pour y ins\u00e9rer des donn\u00e9es.</li> <li>submit : Soumet le formulaire et v\u00e9rifie la redirection.</li> </ul>"},{"location":"symfony/areas/Testing/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":"<ol> <li>Organisez vos tests : Placez vos tests dans des r\u00e9pertoires comme <code>tests/Controller</code>, <code>tests/Service</code>, ou <code>tests/Entity</code>.</li> <li>Isoler les tests : Essayez de rendre vos tests ind\u00e9pendants. Utilisez des mocks et des stubs pour simuler les d\u00e9pendances externes.</li> <li>Utilisez les assertions adapt\u00e9es : Symfony et PHPUnit offrent une large gamme de m\u00e9thodes d'assertion pour valider les r\u00e9sultats (par exemple, <code>assertResponseIsSuccessful</code>, <code>assertSelectorTextContains</code>, etc.).</li> <li>Ex\u00e9cutez les tests r\u00e9guli\u00e8rement : Assurez-vous d'ex\u00e9cuter vos tests fr\u00e9quemment pour v\u00e9rifier que les changements n'introduisent pas de r\u00e9gressions.</li> <li>Utilisez les tests fonctionnels pour tester des comportements complets : Les tests fonctionnels sont particuli\u00e8rement utiles pour valider des flux utilisateurs, comme des soumissions de formulaire ou des connexions.</li> </ol>"},{"location":"symfony/areas/Testing/#ressources-complementaires","title":"Ressources Compl\u00e9mentaires","text":"<ul> <li>Documentation officielle Symfony : Testing</li> <li>PHPUnit</li> <li>Symfony WebTestCase</li> </ul>"},{"location":"symfony/areas/templates%20twig/","title":"Templates Twig","text":""},{"location":"symfony/areas/templates%20twig/#documentation-symfony-templates-twig","title":"Documentation Symfony : Templates (Twig)","text":""},{"location":"symfony/areas/templates%20twig/#description","title":"Description","text":"<p>Twig est le moteur de templates par d\u00e9faut de Symfony. Il permet de s\u00e9parer la logique de l'affichage et de la gestion des donn\u00e9es, facilitant ainsi le d\u00e9veloppement d'applications web bien structur\u00e9es. Twig est un moteur de templates puissant, flexible et s\u00e9curis\u00e9.</p>"},{"location":"symfony/areas/templates%20twig/#integration-de-twig-dans-symfony","title":"Int\u00e9gration de Twig dans Symfony","text":"<p>Symfony utilise Twig pour rendre les vues. Un template Twig est g\u00e9n\u00e9ralement un fichier avec l'extension <code>.html.twig</code>, situ\u00e9 dans le r\u00e9pertoire <code>templates/</code> de votre projet Symfony.</p>"},{"location":"symfony/areas/templates%20twig/#structure-de-base-dun-template","title":"Structure de base d'un template","text":"<p>Un template Twig contient du code HTML et des balises Twig pour l'insertion de donn\u00e9es dynamiques.</p> <ol> <li>Exemple d'un template Twig simple</li> </ol> <pre><code>{# templates/default/index.html.twig #}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Dans l'exemple ci-dessus, <code>{{ title }}</code> et <code>{{ message }}</code> sont des variables Twig qui seront remplies par des donn\u00e9es provenant du contr\u00f4leur.</p>"},{"location":"symfony/areas/templates%20twig/#passer-des-donnees-a-un-template","title":"Passer des donn\u00e9es \u00e0 un template","text":"<p>Dans Symfony, les donn\u00e9es sont transmises aux templates via le contr\u00f4leur. Vous utilisez la m\u00e9thode <code>render()</code> pour envoyer un template \u00e0 l'utilisateur avec les donn\u00e9es.</p> <ol> <li>Exemple de passage de donn\u00e9es au template</li> </ol> <pre><code>// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController\n{\n    /**\n     * @Route(\"/\", name=\"home\")\n     */\n    public function index(): Response\n    {\n        $title = \"Page d'accueil\";\n        $message = \"Bienvenue sur notre site Symfony!\";\n\n        return $this-&gt;render('default/index.html.twig', [\n            'title' =&gt; $title,\n            'message' =&gt; $message,\n        ]);\n    }\n}\n</code></pre> <p>Ici, les variables <code>$title</code> et <code>$message</code> sont envoy\u00e9es au template Twig.</p>"},{"location":"symfony/areas/templates%20twig/#structures-conditionnelles-et-boucles","title":"Structures conditionnelles et boucles","text":"<p>Twig prend en charge les structures conditionnelles et les boucles pour rendre les templates plus dynamiques.</p> <ol> <li>Conditionnelle dans Twig</li> </ol> <pre><code>{# templates/default/index.html.twig #}\n{% if user is defined %}\n    &lt;p&gt;Bonjour, {{ user.name }}!&lt;/p&gt;\n{% else %}\n    &lt;p&gt;Bienvenue, invit\u00e9!&lt;/p&gt;\n{% endif %}\n</code></pre> <ol> <li>Boucle dans Twig</li> </ol> <pre><code>{# templates/default/products.html.twig #}\n&lt;ul&gt;\n    {% for product in products %}\n        &lt;li&gt;{{ product.name }} - {{ product.price }}\u20ac&lt;/li&gt;\n    {% else %}\n        &lt;li&gt;Aucun produit disponible.&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"symfony/areas/templates%20twig/#heritage-de-templates","title":"H\u00e9ritage de templates","text":"<p>L'h\u00e9ritage de templates permet de r\u00e9utiliser des parties communes dans plusieurs pages, ce qui simplifie la gestion des mises \u00e0 jour de l'interface utilisateur.</p> <ol> <li>Exemple d'h\u00e9ritage de template</li> </ol> <pre><code>{# templates/base.html.twig #}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{% block title %}Mon Application Symfony{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;{% block header %}Bienvenue sur mon site{% endblock %}&lt;/h1&gt;\n    &lt;/header&gt;\n\n    &lt;div&gt;\n        {% block content %}{% endblock %}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Dans ce fichier de base, les blocs <code>title</code>, <code>header</code> et <code>content</code> peuvent \u00eatre red\u00e9finis dans des templates enfants.</p> <pre><code>{# templates/default/index.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block title %}Accueil - Mon Application{% endblock %}\n\n{% block content %}\n    &lt;h2&gt;Page d'accueil&lt;/h2&gt;\n    &lt;p&gt;Bienvenue sur la page d'accueil.&lt;/p&gt;\n{% endblock %}\n</code></pre>"},{"location":"symfony/areas/templates%20twig/#filtres-twig","title":"Filtres Twig","text":"<p>Twig offre de nombreux filtres pour manipuler les variables avant de les afficher.</p> <ol> <li> <p>Exemples de filtres</p> </li> <li> <p><code>|lower</code> : Convertir une cha\u00eene en minuscules</p> </li> </ol> <pre><code>{{ 'HELLO WORLD'|lower }}  {# Affiche: hello world #}\n</code></pre> <ul> <li><code>|date</code> : Formater une date</li> </ul> <pre><code>{{ \"now\"|date(\"Y-m-d H:i:s\") }}  {# Affiche: 2024-12-16 10:45:00 #}\n</code></pre> <ul> <li><code>|escape</code> : \u00c9chapper une cha\u00eene pour \u00e9viter les attaques XSS</li> </ul> <pre><code>{{ user_input|escape }}\n</code></pre>"},{"location":"symfony/areas/templates%20twig/#inclusions-et-macros","title":"Inclusions et macros","text":"<p>Twig permet d'inclure des fragments de templates ou d'utiliser des macros pour encapsuler du code r\u00e9utilisable.</p> <ol> <li>Inclusion d'un template</li> </ol> <pre><code>{# templates/default/header.html.twig #}\n&lt;header&gt;\n    &lt;nav&gt;\n        &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre> <pre><code>{# templates/default/index.html.twig #}\n{% include 'default/header.html.twig' %}\n</code></pre> <ol> <li>Macro dans Twig</li> </ol> <pre><code>{# templates/macros.html.twig #}\n{% macro input(name, value) %}\n    &lt;input type=\"text\" name=\"{{ name }}\" value=\"{{ value }}\"&gt;\n{% endmacro %}\n</code></pre> <pre><code>{# templates/default/index.html.twig #}\n{% import 'macros.html.twig' as macros %}\n{{ macros.input('username', 'John Doe') }}\n</code></pre>"},{"location":"symfony/areas/templates%20twig/#conseils-pratiques","title":"Conseils pratiques","text":"<ul> <li>Organisation des templates : Placez tous vos fichiers Twig dans le dossier <code>templates/</code> pour bien organiser votre code.</li> <li>Performance : Utilisez les filtres Twig avec parcimonie dans les boucles pour \u00e9viter les ralentissements.</li> <li>S\u00e9curit\u00e9 : Toujours \u00e9chapper les donn\u00e9es venant de l'utilisateur avec le filtre <code>escape</code> pour pr\u00e9venir les attaques XSS.</li> <li>Modularit\u00e9 : Profitez de l'h\u00e9ritage et de l'inclusion pour maintenir vos templates DRY (Don't Repeat Yourself).</li> </ul>"},{"location":"symfony/areas/templates%20twig/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony - Template et Twig</li> <li>Documentation Twig</li> </ul>"},{"location":"symfony/areas/validation/","title":"Validation","text":""},{"location":"symfony/areas/validation/#documentation-symfony-la-validation","title":"Documentation Symfony : La Validation","text":""},{"location":"symfony/areas/validation/#description","title":"Description","text":"<p>La validation dans Symfony permet de garantir que les donn\u00e9es re\u00e7ues dans un formulaire ou une entit\u00e9 respectent des r\u00e8gles pr\u00e9cises avant d'\u00eatre trait\u00e9es ou persist\u00e9es dans la base de donn\u00e9es. Symfony offre une solution puissante et flexible pour effectuer cette validation \u00e0 l'aide des annotations, des contraintes et des services de validation.</p>"},{"location":"symfony/areas/validation/#installation","title":"Installation","text":"<p>La validation fait partie du composant Validator de Symfony, qui est inclus dans le Symfony Standard Edition. Si vous avez besoin de l'ajouter \u00e0 votre projet, vous pouvez l'installer via Composer :</p> <pre><code>composer require symfony/validator\n</code></pre>"},{"location":"symfony/areas/validation/#configuration","title":"Configuration","text":"<p>Le composant Validator utilise des annotations ou des fichiers YAML/XML pour d\u00e9finir les r\u00e8gles de validation. Par d\u00e9faut, Symfony utilise les annotations.</p> <p>Si vous souhaitez utiliser les annotations, assurez-vous que votre entit\u00e9 contient bien les annotations n\u00e9cessaires.</p>"},{"location":"symfony/areas/validation/#regles-de-validation-de-base","title":"R\u00e8gles de Validation de Base","text":"<p>Les r\u00e8gles de validation sont d\u00e9finies par des contraintes. Ces contraintes peuvent \u00eatre ajout\u00e9es \u00e0 vos entit\u00e9s ou \u00e0 vos objets de formulaire.</p> <p>Exemple d'entit\u00e9 avec validation via annotations :</p> <pre><code>// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ORM\\Entity\n */\nclass Product\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     * @Assert\\NotBlank(message=\"The name should not be blank\")\n     * @Assert\\Length(min=3, max=100)\n     */\n    private $name;\n\n    /**\n     * @ORM\\Column(type=\"float\")\n     * @Assert\\Positive(message=\"Price should be positive\")\n     */\n    private $price;\n\n    // Getters and setters\n}\n</code></pre>"},{"location":"symfony/areas/validation/#types-de-contraintes","title":"Types de Contraintes","text":"<p>Voici quelques-unes des contraintes les plus utilis\u00e9es dans Symfony :</p> <ul> <li>@Assert\\NotBlank : V\u00e9rifie que le champ n'est pas vide.</li> <li>@Assert\\Length(min=, max=) : V\u00e9rifie la longueur d'une cha\u00eene de caract\u00e8res.</li> <li>@Assert\\Email : V\u00e9rifie qu'une valeur est un email valide.</li> <li>@Assert\\Positive : V\u00e9rifie qu'un nombre est positif.</li> <li>@Assert\\Range(min=, max=) : V\u00e9rifie qu'un nombre se situe dans une plage d\u00e9finie.</li> <li>@Assert\\Regex : V\u00e9rifie que la valeur correspond \u00e0 une expression r\u00e9guli\u00e8re.</li> </ul>"},{"location":"symfony/areas/validation/#validation-dans-un-formulaire","title":"Validation dans un Formulaire","text":"<p>Lors de la cr\u00e9ation d'un formulaire, vous pouvez valider les donn\u00e9es du formulaire automatiquement avec les contraintes d\u00e9finies dans l'entit\u00e9.</p> <p>Exemple avec un formulaire :</p> <pre><code>// src/Form/ProductType.php\nnamespace App\\Form;\n\nuse App\\Entity\\Product;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType;\n\nclass ProductType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            -&gt;add('name', TextType::class)\n            -&gt;add('price', NumberType::class);\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver-&gt;setDefaults([\n            'data_class' =&gt; Product::class,\n        ]);\n    }\n}\n</code></pre> <p>Lorsque vous soumettez un formulaire avec une entit\u00e9, Symfony validera automatiquement les donn\u00e9es avant d'essayer de persister l'entit\u00e9.</p>"},{"location":"symfony/areas/validation/#validation-manuelle","title":"Validation Manuelle","text":"<p>Il est possible de valider des objets de mani\u00e8re manuelle en utilisant le service validator.</p> <p>Exemple de validation manuelle :</p> <pre><code>// Dans un contr\u00f4leur\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse App\\Entity\\Product;\n\npublic function validateProduct(Product $product, ValidatorInterface $validator)\n{\n    $errors = $validator-&gt;validate($product);\n\n    if (count($errors) &gt; 0) {\n        // G\u00e9rer les erreurs, par exemple en renvoyant un message\n        $errorMessages = [];\n        foreach ($errors as $error) {\n            $errorMessages[] = $error-&gt;getMessage();\n        }\n\n        return $this-&gt;json(['errors' =&gt; $errorMessages], 400);\n    }\n\n    return $this-&gt;json(['message' =&gt; 'Valid!']);\n}\n</code></pre>"},{"location":"symfony/areas/validation/#groupes-de-validation","title":"Groupes de Validation","text":"<p>Symfony permet de d\u00e9finir des groupes de validation pour valider des entit\u00e9s selon diff\u00e9rents contextes. Vous pouvez appliquer des validations uniquement dans des situations sp\u00e9cifiques.</p> <p>Exemple de groupes de validation :</p> <pre><code>// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Product\n{\n    /**\n     * @Assert\\NotBlank(groups={\"create\", \"update\"})\n     */\n    private $name;\n\n    /**\n     * @Assert\\Positive(groups={\"create\"})\n     */\n    private $price;\n}\n</code></pre> <p>Lors de la validation, vous pouvez sp\u00e9cifier le groupe comme suit :</p> <pre><code>$validator-&gt;validate($product, null, ['create']);\n</code></pre>"},{"location":"symfony/areas/validation/#validation-personnalisee","title":"Validation Personnalis\u00e9e","text":"<p>Il est possible de cr\u00e9er vos propres contraintes personnalis\u00e9es. Cela vous permet d'ajouter des r\u00e8gles sp\u00e9cifiques qui ne sont pas couvertes par les contraintes existantes.</p> <p>Exemple de cr\u00e9ation d'une contrainte personnalis\u00e9e :</p> <ol> <li> <p>Cr\u00e9ation de la contrainte :</p> <p>```php // src/Validator/Constraints/CustomConstraint.php namespace App\\Validator\\Constraints;</p> <p>use Symfony\\Component\\Validator\\Constraint;</p> <p>/*  * @Annotation  / class CustomConstraint extends Constraint {     public $message = 'The value \"{{ value }}\" is not valid.'; } ```</p> </li> <li> <p>Cr\u00e9ation du validateur pour cette contrainte :</p> <p>```php // src/Validator/Constraints/CustomConstraintValidator.php namespace App\\Validator\\Constraints;</p> <p>use Symfony\\Component\\Validator\\Constraint; use Symfony\\Component\\Validator\\ConstraintValidator; use Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException; use Symfony\\Component\\Validator\\Exception\\UnexpectedValueException;</p> <p>class CustomConstraintValidator extends ConstraintValidator {     public function validate($value, Constraint $constraint)     {         if (null === $value || '' === $value) {             return;         }</p> <pre><code>    if (!is_string($value)) {\n        throw new UnexpectedValueException($value, 'string');\n    }\n\n    if (strlen($value) &lt; 5) {\n        $this-&gt;context-&gt;buildViolation($constraint-&gt;message)\n            -&gt;setParameter('{{ value }}', $value)\n            -&gt;addViolation();\n    }\n}\n</code></pre> <p>} ```</p> </li> </ol>"},{"location":"symfony/areas/validation/#conseils-pratiques","title":"Conseils pratiques","text":"<ul> <li>Messages personnalis\u00e9s : Les messages d'erreur des contraintes peuvent \u00eatre personnalis\u00e9s pour offrir une meilleure exp\u00e9rience utilisateur.</li> <li>Groupes de validation : Utilisez les groupes de validation pour g\u00e9rer diff\u00e9rents types de validation selon le contexte (par exemple, cr\u00e9ation ou mise \u00e0 jour).</li> <li>Validation dans les formulaires : Utilisez la validation int\u00e9gr\u00e9e dans les formulaires pour \u00e9viter de devoir valider manuellement les objets apr\u00e8s chaque soumission.</li> <li>Erreurs multiples : Symfony affiche plusieurs erreurs pour un seul champ. Assurez-vous de bien g\u00e9rer l'affichage des erreurs dans vos formulaires ou r\u00e9ponses JSON.</li> </ul>"},{"location":"symfony/areas/validation/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation Symfony - Validation</li> <li>Composant Validator Symfony</li> </ul>"},{"location":"symfony/concepts/%28phpsymfonyconcepts%29/","title":"FOLDER","text":"<p>[[(phpsfnconceptconfig)]] [[(phpsfnconceptcontrollers)]] [[(phpsfnDoctrine)]] [[(phpsfneventdisp)]] [[(phpsfnconceptsform)]] [[(phpsfnJSON)]] [[(phpsfnrouting)]] [[(phpsfnsecurity)]]</p> <p>[[(phpsymfony)]]</p>"},{"location":"symfony/concepts/Doctrine/%28phpsfnDoctrine%29/","title":"FOLDER","text":"<p>[[Doctrine ORM]] [[find()]] [[findAll()]] [[findOneBy()]] [[flush()]] [[getDoctrine()]] [[getRepository()]] [[persist()]] [[remove()]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/","title":"Doctrine ORM","text":""},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#documentation-symfony-doctrine-orm","title":"Documentation Symfony : Doctrine ORM","text":""},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#description","title":"Description","text":"<p>Doctrine ORM (Object-Relational Mapping) est une biblioth\u00e8que de gestion de bases de donn\u00e9es relationnelles dans Symfony. Elle permet de mapper les entit\u00e9s PHP aux tables de base de donn\u00e9es, de g\u00e9rer la persistance des donn\u00e9es, et de faciliter les interactions avec la base de donn\u00e9es via des objets PHP.</p>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#installation-et-configuration","title":"Installation et Configuration","text":"<ol> <li> <p>Installation</p> <p>Vous pouvez installer Doctrine ORM via Composer avec la commande suivante :</p> <p><code>bash composer require symfony/orm-pack</code></p> </li> <li> <p>Configuration de la base de donn\u00e9es</p> <p>Dans votre fichier <code>.env</code> ou <code>.env.local</code>, configurez la connexion \u00e0 la base de donn\u00e9es :</p> <p><code>bash DATABASE_URL=\"mysql://username:password@127.0.0.1:3306/db_name\"</code></p> <p>N'oubliez pas de cr\u00e9er la base de donn\u00e9es si n\u00e9cessaire avec la commande suivante :</p> <p><code>bash php bin/console doctrine:database:create</code></p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#creation-dune-entite","title":"Cr\u00e9ation d'une Entit\u00e9","text":"<ol> <li> <p>G\u00e9n\u00e9ration d'une Entit\u00e9</p> <p>Symfony facilite la cr\u00e9ation d'entit\u00e9s via la commande suivante :</p> <p><code>bash php bin/console make:entity</code></p> <p>Cela vous guidera \u00e0 travers la cr\u00e9ation des champs de l'entit\u00e9 et leur type.</p> </li> <li> <p>Exemple d'entit\u00e9 Voici un exemple simple d'une entit\u00e9 <code>Product</code> :</p> <p>```php // src/Entity/Product.php namespace App\\Entity;</p> <p>use Doctrine\\ORM\\Mapping as ORM;</p> <p>/  * @ORM\\Entity(repositoryClass=\"App\\Repository\\ProductRepository\")  */ class Product {     /      * @ORM\\Id()      * @ORM\\GeneratedValue()      * @ORM\\Column(type=\"integer\")      */     private $id;</p> <pre><code>/**\n * @ORM\\Column(type=\"string\", length=255)\n */\nprivate $name;\n\n/**\n * @ORM\\Column(type=\"float\")\n */\nprivate $price;\n\n// Getters and setters\n</code></pre> <p>} ```</p> </li> <li> <p>Ex\u00e9cution de la migration</p> <p>Une fois l'entit\u00e9 cr\u00e9\u00e9e, vous devez g\u00e9n\u00e9rer et ex\u00e9cuter la migration pour mettre \u00e0 jour la base de donn\u00e9es :</p> <p><code>bash php bin/console make:migration php bin/console doctrine:migrations:migrate</code></p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#interactions-avec-la-base-de-donnees","title":"Interactions avec la Base de Donn\u00e9es","text":"<ol> <li> <p>R\u00e9cup\u00e9ration d'entit\u00e9s avec le Repository</p> <p>Doctrine fournit un syst\u00e8me de repository pour interagir avec la base de donn\u00e9es. Vous pouvez r\u00e9cup\u00e9rer une entit\u00e9 en utilisant les m\u00e9thodes du repository.</p> <p>Exemple de r\u00e9cup\u00e9ration d'une entit\u00e9 :</p> <p><code>php $productRepository = $entityManager-&gt;getRepository(Product::class); $product = $productRepository-&gt;find($id); // Recherche par ID</code></p> </li> <li> <p>Requ\u00eate avec QueryBuilder</p> <p>Vous pouvez \u00e9galement utiliser le QueryBuilder pour construire des requ\u00eates plus complexes.</p> <p>Exemple de requ\u00eate avec QueryBuilder :</p> <p>```php $queryBuilder = $entityManager-&gt;createQueryBuilder(); $query = $queryBuilder     -&gt;select('p')     -&gt;from(Product::class, 'p')     -&gt;where('p.price &gt; :price')     -&gt;setParameter('price', 50)     -&gt;getQuery();</p> <p>$products = $query-&gt;getResult(); ```</p> </li> <li> <p>Insertion d'une Entit\u00e9</p> <p>Pour persister une entit\u00e9 dans la base de donn\u00e9es, vous devez utiliser l'EntityManager :</p> <p>```php // Cr\u00e9ation d'une nouvelle entit\u00e9 $product = new Product(); $product-&gt;setName('Product 1'); $product-&gt;setPrice(100.0);</p> <p>// Persistance et enregistrement $entityManager-&gt;persist($product); $entityManager-&gt;flush(); ```</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#operations-de-mise-a-jour-et-suppression","title":"Op\u00e9rations de mise \u00e0 jour et suppression","text":"<ol> <li> <p>Mise \u00e0 jour d'une entit\u00e9</p> <p>Pour mettre \u00e0 jour une entit\u00e9, vous devez d'abord la r\u00e9cup\u00e9rer, modifier ses propri\u00e9t\u00e9s, puis utiliser <code>flush()</code> pour appliquer les changements.</p> <p>Exemple de mise \u00e0 jour :</p> <p><code>php $product = $entityManager-&gt;getRepository(Product::class)-&gt;find($id); if ($product) {     $product-&gt;setPrice(120.0);     $entityManager-&gt;flush(); // Sauvegarde la mise \u00e0 jour }</code></p> </li> <li> <p>Suppression d'une entit\u00e9</p> <p>Pour supprimer une entit\u00e9, vous devez la r\u00e9cup\u00e9rer et appeler <code>remove()</code> sur l'EntityManager avant de faire un <code>flush()</code>.</p> <p>Exemple de suppression :</p> <p><code>php $product = $entityManager-&gt;getRepository(Product::class)-&gt;find($id); if ($product) {     $entityManager-&gt;remove($product);     $entityManager-&gt;flush(); // Applique la suppression }</code></p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#transactions","title":"Transactions","text":"<p>Doctrine ORM prend en charge les transactions pour garantir la coh\u00e9rence des donn\u00e9es. Vous pouvez utiliser la m\u00e9thode <code>beginTransaction()</code>, <code>commit()</code> et <code>rollback()</code>.</p> <p>Exemple de transaction :</p> <pre><code>$entityManager-&gt;beginTransaction();\n\ntry {\n    // Effectuer des op\u00e9rations sur la base de donn\u00e9es\n    $entityManager-&gt;flush();\n    $entityManager-&gt;commit();\n} catch (\\Exception $e) {\n    $entityManager-&gt;rollback();\n    throw $e;\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#requetes-dql-doctrine-query-language","title":"Requ\u00eates DQL (Doctrine Query Language)","text":"<p>Doctrine ORM offre un langage de requ\u00eate orient\u00e9 objet appel\u00e9 DQL. Il est similaire \u00e0 SQL mais fonctionne avec les entit\u00e9s et non directement avec les tables.</p> <p>Exemple de requ\u00eate DQL pour r\u00e9cup\u00e9rer tous les produits :</p> <pre><code>$query = $entityManager-&gt;createQuery('SELECT p FROM App\\Entity\\Product p');\n$products = $query-&gt;getResult();\n</code></pre>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#conseils-pratiques","title":"Conseils pratiques","text":"<ul> <li>Utilisation des Repositories : Cr\u00e9ez un repository personnalis\u00e9 pour chaque entit\u00e9 afin de centraliser les requ\u00eates complexes.</li> <li>Migrations : Assurez-vous d'ex\u00e9cuter les migrations pour garder la base de donn\u00e9es synchronis\u00e9e avec les entit\u00e9s.</li> <li>Utilisation des transactions : Utilisez les transactions lorsque vous effectuez plusieurs op\u00e9rations qui doivent \u00eatre trait\u00e9es atomiquement.</li> <li>Optimisation : Utilisez le DQL ou QueryBuilder pour des requ\u00eates complexes, mais pour des requ\u00eates simples, privil\u00e9giez les m\u00e9thodes de base comme <code>find()</code>, <code>findAll()</code>, ou <code>findBy()</code>.</li> </ul>"},{"location":"symfony/concepts/Doctrine/Doctrine%20ORM/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine ORM Documentation</li> <li>Symfony - Doctrine ORM</li> </ul>"},{"location":"symfony/concepts/Doctrine/find%28%29/","title":"find()","text":""},{"location":"symfony/concepts/Doctrine/find%28%29/#documentation-find-en-symfony-doctrine","title":"Documentation : <code>find()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/find%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>find()</code> permet de r\u00e9cup\u00e9rer une entit\u00e9 sp\u00e9cifique \u00e0 partir de son identifiant dans la base de donn\u00e9es. Elle est disponible sur les repositories d'entit\u00e9s g\u00e9n\u00e9r\u00e9s par Doctrine. Si l'entit\u00e9 n'existe pas pour cet identifiant, elle retourne <code>null</code>.</p>"},{"location":"symfony/concepts/Doctrine/find%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>find(mixed $id): ?object\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li><code>$id</code> (mixed) :<ul> <li>L'identifiant unique de l'entit\u00e9 recherch\u00e9e.</li> <li>Peut \u00eatre une valeur simple (ex. : entier ou cha\u00eene) ou un tableau pour une cl\u00e9 composite.</li> </ul> </li> </ol>"},{"location":"symfony/concepts/Doctrine/find%28%29/#retour","title":"Retour","text":"<ul> <li>Retourne l'objet de l'entit\u00e9 si elle existe.</li> <li>Retourne <code>null</code> si aucune entit\u00e9 ne correspond \u00e0 l'identifiant.</li> </ul>"},{"location":"symfony/concepts/Doctrine/find%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/find%28%29/#exemple-1-trouver-une-entite-par-son-identifiant","title":"Exemple 1 : Trouver une entit\u00e9 par son identifiant","text":"<pre><code>public function getUser(int $id): Response\n{\n    $repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n    $user = $repository-&gt;find($id);\n\n    if (!$user) {\n        throw $this-&gt;createNotFoundException('User not found for ID ' . $id);\n    }\n\n    return $this-&gt;render('user/show.html.twig', [\n        'user' =&gt; $user,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#exemple-2-utilisation-avec-un-identifiant-inexistant","title":"Exemple 2 : Utilisation avec un identifiant inexistant","text":"<pre><code>$id = 999;\n$repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n$user = $repository-&gt;find($id);\n\nif ($user === null) {\n    echo \"No user found for ID $id\";\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#exemple-3-recherche-dune-entite-avec-cle-composite","title":"Exemple 3 : Recherche d\u2019une entit\u00e9 avec cl\u00e9 composite","text":"<pre><code>$id = ['orderId' =&gt; 123, 'userId' =&gt; 456];\n$repository = $this-&gt;getDoctrine()-&gt;getRepository(Order::class);\n$order = $repository-&gt;find($id);\n\nif (!$order) {\n    throw $this-&gt;createNotFoundException('Order not found for the given keys.');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/find%28%29/#1-erreur-entite-introuvable-retourne-null","title":"1. Erreur : Entit\u00e9 introuvable (retourne <code>null</code>)","text":"<p>Cause : Aucune entit\u00e9 ne correspond \u00e0 l\u2019identifiant fourni.</p> <p>Solution : V\u00e9rifiez que l'identifiant est correct et g\u00e9rez le cas o\u00f9 <code>find()</code> retourne <code>null</code> :</p> <pre><code>$user = $repository-&gt;find($id);\nif (!$user) {\n    throw $this-&gt;createNotFoundException('User not found.');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#2-erreur-identifiant-mal-formate-pour-une-cle-composite","title":"2. Erreur : Identifiant mal format\u00e9 pour une cl\u00e9 composite","text":"<p>Cause : Si vous utilisez une cl\u00e9 composite, l\u2019identifiant doit \u00eatre un tableau associatif.</p> <p>Solution : Assurez-vous que toutes les cl\u00e9s sont sp\u00e9cifi\u00e9es correctement :</p> <pre><code>$id = ['key1' =&gt; $value1, 'key2' =&gt; $value2];\n$entity = $repository-&gt;find($id);\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#3-erreur-repository-incorrect","title":"3. Erreur : Repository incorrect","text":"<p>Cause : La m\u00e9thode <code>find()</code> est appel\u00e9e sur un mauvais repository ou une entit\u00e9 qui n'existe pas.</p> <p>Solution : V\u00e9rifiez que vous utilisez le bon repository pour l\u2019entit\u00e9 concern\u00e9e :</p> <pre><code>$repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n</code></pre>"},{"location":"symfony/concepts/Doctrine/find%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Pr\u00e9f\u00e9rer <code>findOneBy()</code> si n\u00e9cessaire : Si vous devez rechercher une entit\u00e9 par une autre colonne que l\u2019ID, utilisez plut\u00f4t <code>findOneBy()</code>.     Exemple :</p> <p><code>php $user = $repository-&gt;findOneBy(['email' =&gt; 'example@example.com']);</code></p> </li> <li> <p>Evitez les requ\u00eates inutiles : Si vous avez d\u00e9j\u00e0 l\u2019entit\u00e9 en m\u00e9moire via l\u2019EntityManager, Doctrine ne r\u00e9ex\u00e9cutera pas la requ\u00eate SQL.</p> </li> <li> <p>Cl\u00e9s composites : Pour les entit\u00e9s avec des cl\u00e9s composites, utilisez un tableau associatif avec les noms de colonnes comme cl\u00e9s.</p> </li> <li> <p>S\u00e9curisez vos appels : G\u00e9rez toujours le cas o\u00f9 <code>find()</code> retourne <code>null</code> pour \u00e9viter des erreurs non g\u00e9r\u00e9es.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/find%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation officielle Doctrine : Repository</li> <li>Symfony Doctrine : Repositories</li> </ul>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/","title":"findAll()","text":""},{"location":"symfony/concepts/Doctrine/findAll%28%29/#documentation-findall-en-symfony-doctrine","title":"Documentation : <code>findAll()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/findAll%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>findAll()</code> permet de r\u00e9cup\u00e9rer toutes les entit\u00e9s d\u2019un type donn\u00e9 depuis la base de donn\u00e9es. Elle est utile pour afficher l\u2019ensemble des enregistrements sans crit\u00e8res sp\u00e9cifiques.</p>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>findAll(): array\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#parametres","title":"Param\u00e8tres","text":"<p>Aucun param\u00e8tre requis.</p>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#retour","title":"Retour","text":"<ul> <li>Retourne un tableau d'objets de l'entit\u00e9 correspondante.</li> <li>Si aucune entit\u00e9 n'est trouv\u00e9e, retourne un tableau vide <code>[]</code>.</li> </ul>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/findAll%28%29/#exemple-1-recuperer-toutes-les-entites","title":"Exemple 1 : R\u00e9cup\u00e9rer toutes les entit\u00e9s","text":"<pre><code>public function listUsers(): Response\n{\n    $repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n    $users = $repository-&gt;findAll();\n\n    return $this-&gt;render('user/list.html.twig', [\n        'users' =&gt; $users,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#exemple-2-verifier-si-la-liste-est-vide","title":"Exemple 2 : V\u00e9rifier si la liste est vide","text":"<pre><code>$repository = $this-&gt;getDoctrine()-&gt;getRepository(Product::class);\n$products = $repository-&gt;findAll();\n\nif (empty($products)) {\n    echo \"No products found in the database.\";\n} else {\n    foreach ($products as $product) {\n        echo $product-&gt;getName() . PHP_EOL;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#exemple-3-utilisation-dans-une-api","title":"Exemple 3 : Utilisation dans une API","text":"<pre><code>public function getAllPosts(): JsonResponse\n{\n    $repository = $this-&gt;getDoctrine()-&gt;getRepository(Post::class);\n    $posts = $repository-&gt;findAll();\n\n    return $this-&gt;json([\n        'data' =&gt; $posts,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/findAll%28%29/#1-erreur-aucun-resultat-tableau-vide","title":"1. Erreur : Aucun r\u00e9sultat (tableau vide)","text":"<p>Cause : La table associ\u00e9e \u00e0 l'entit\u00e9 est vide. Solution : G\u00e9rez ce cas en v\u00e9rifiant si le tableau retourn\u00e9 est vide.</p> <pre><code>$entities = $repository-&gt;findAll();\nif (empty($entities)) {\n    echo \"No entities found.\";\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#2-erreur-repository-non-trouve","title":"2. Erreur : Repository non trouv\u00e9","text":"<p>Cause : Le repository n\u2019est pas configur\u00e9 ou l'entit\u00e9 est mal r\u00e9f\u00e9renc\u00e9e. Solution : V\u00e9rifiez la d\u00e9claration de l\u2019entit\u00e9 et du repository dans votre configuration Doctrine.</p>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Limiter l\u2019utilisation dans les bases volumineuses :     Si la table contient beaucoup de lignes, utiliser <code>findAll()</code> peut entra\u00eener des probl\u00e8mes de performance et de m\u00e9moire. Privil\u00e9giez des requ\u00eates avec des crit\u00e8res (<code>findBy()</code>) ou une pagination.</p> </li> <li> <p>Filtrage et tri :     Si vous devez appliquer un tri ou un filtre, utilisez <code>findBy()</code> ou le QueryBuilder \u00e0 la place.     Exemple avec tri :</p> <p><code>php $users = $repository-&gt;findBy([], ['createdAt' =&gt; 'DESC']);</code></p> </li> <li> <p>Pagination recommand\u00e9e :     Si vous devez traiter un grand nombre de r\u00e9sultats, utilisez un package comme KnpPaginatorBundle pour impl\u00e9menter une pagination.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/findAll%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Doctrine : Fetching Objects</li> <li>Doctrine : Basic Mapping</li> </ul>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/","title":"findOneBy()","text":""},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#documentation-findoneby-en-symfony-doctrine","title":"Documentation : <code>findOneBy()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>findOneBy()</code> permet de r\u00e9cup\u00e9rer une seule entit\u00e9 \u00e0 partir de crit\u00e8res sp\u00e9cifiques. Contrairement \u00e0 <code>find()</code>, elle ne se limite pas \u00e0 la recherche par identifiant, mais utilise des paires cl\u00e9-valeur repr\u00e9sentant les champs de l\u2019entit\u00e9.</p>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>findOneBy(array $criteria, array $orderBy = null): ?object\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$criteria</code> (array) :</p> <ul> <li>Un tableau associatif o\u00f9 les cl\u00e9s sont les noms des champs et les valeurs sont les crit\u00e8res de recherche.</li> <li>Exemple : <code>['email' =&gt; 'example@example.com']</code>.</li> <li> <p><code>$orderBy</code> (array|null) (optionnel) :</p> </li> <li> <p>Un tableau associatif pour trier les r\u00e9sultats avant de retourner le premier.</p> </li> <li>Exemple : <code>['createdAt' =&gt; 'DESC']</code>.</li> </ul> </li> </ol>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#retour","title":"Retour","text":"<ul> <li>Retourne l'objet de l'entit\u00e9 correspondant aux crit\u00e8res si trouv\u00e9.</li> <li>Retourne <code>null</code> si aucune entit\u00e9 ne correspond aux crit\u00e8res.</li> </ul>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#exemple-1-trouver-une-entite-par-un-critere-simple","title":"Exemple 1 : Trouver une entit\u00e9 par un crit\u00e8re simple","text":"<pre><code>public function findUserByEmail(string $email): Response\n{\n    $repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n    $user = $repository-&gt;findOneBy(['email' =&gt; $email]);\n\n    if (!$user) {\n        throw $this-&gt;createNotFoundException('No user found with email ' . $email);\n    }\n\n    return $this-&gt;render('user/show.html.twig', [\n        'user' =&gt; $user,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#exemple-2-trouver-une-entite-avec-plusieurs-criteres","title":"Exemple 2 : Trouver une entit\u00e9 avec plusieurs crit\u00e8res","text":"<pre><code>$criteria = [\n    'status' =&gt; 'active',\n    'role' =&gt; 'admin'\n];\n\n$repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n$user = $repository-&gt;findOneBy($criteria);\n\nif (!$user) {\n    echo \"No active admin found.\";\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#exemple-3-utiliser-orderby-pour-trier-les-resultats","title":"Exemple 3 : Utiliser <code>orderBy</code> pour trier les r\u00e9sultats","text":"<pre><code>$criteria = ['status' =&gt; 'active'];\n$orderBy = ['createdAt' =&gt; 'DESC'];\n\n$repository = $this-&gt;getDoctrine()-&gt;getRepository(Post::class);\n$post = $repository-&gt;findOneBy($criteria, $orderBy);\n\nif ($post) {\n    echo \"Most recent active post: \" . $post-&gt;getTitle();\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#exemple-4-trouver-une-entite-avec-une-valeur-partielle-non-supporte-directement","title":"Exemple 4 : Trouver une entit\u00e9 avec une valeur partielle (non support\u00e9 directement)","text":"<p>Pour une recherche partielle comme un champ contenant une sous-cha\u00eene, utilisez le QueryBuilder :</p> <pre><code>$repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);\n$queryBuilder = $repository-&gt;createQueryBuilder('u')\n    -&gt;where('u.email LIKE :email')\n    -&gt;setParameter('email', '%example%')\n    -&gt;setMaxResults(1);\n\n$user = $queryBuilder-&gt;getQuery()-&gt;getOneOrNullResult();\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#1-erreur-aucun-resultat-trouve-null","title":"1. Erreur : Aucun r\u00e9sultat trouv\u00e9 (<code>null</code>)","text":"<p>Cause : Aucun enregistrement dans la base ne correspond aux crit\u00e8res. Solution : Toujours v\u00e9rifier le retour et g\u00e9rer le cas o\u00f9 la m\u00e9thode retourne <code>null</code>.</p> <pre><code>$user = $repository-&gt;findOneBy(['email' =&gt; 'nonexistent@example.com']);\nif (!$user) {\n    throw $this-&gt;createNotFoundException('No user found.');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#2-erreur-critere-incorrect","title":"2. Erreur : Crit\u00e8re incorrect","text":"<p>Cause : Les noms de colonnes dans <code>$criteria</code> ne correspondent pas aux champs de l'entit\u00e9. Solution : V\u00e9rifiez que les cl\u00e9s utilis\u00e9es dans <code>$criteria</code> correspondent bien aux propri\u00e9t\u00e9s de l'entit\u00e9 Doctrine.</p>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#3-erreur-probleme-de-typage","title":"3. Erreur : Probl\u00e8me de typage","text":"<p>Cause : Si vous passez une valeur mal typ\u00e9e dans les crit\u00e8res (ex. : une cha\u00eene pour un champ attendu comme un entier). Solution : Assurez-vous que les types des valeurs correspondent \u00e0 ceux d\u00e9finis dans l'entit\u00e9.</p>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Pr\u00e9f\u00e9rez <code>findBy()</code> pour plusieurs r\u00e9sultats : Si vous attendez plusieurs correspondances, utilisez <code>findBy()</code> au lieu de <code>findOneBy()</code>.     Exemple :</p> <p><code>php $users = $repository-&gt;findBy(['status' =&gt; 'active']);</code></p> </li> <li> <p>Limiter l'ordre : Utilisez <code>orderBy</code> uniquement si le champ de tri est pertinent pour votre recherche.</p> </li> <li> <p>Valider les entr\u00e9es utilisateur : Si les crit\u00e8res proviennent de l'utilisateur (ex. : via un formulaire), nettoyez et validez les donn\u00e9es avant de les utiliser dans <code>findOneBy()</code>.</p> </li> <li> <p>Utilisez QueryBuilder pour des requ\u00eates complexes : Pour des recherches avanc\u00e9es (ex. : jointures, sous-cha\u00eenes, calculs), utilisez le QueryBuilder.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/findOneBy%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine : Working with Objects</li> <li>Symfony Doctrine : Repositories</li> </ul>"},{"location":"symfony/concepts/Doctrine/flush%28%29/","title":"flush()","text":""},{"location":"symfony/concepts/Doctrine/flush%28%29/#documentation-flush-en-symfony-doctrine","title":"Documentation : <code>flush()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/flush%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>flush()</code> de Doctrine est utilis\u00e9e pour synchroniser toutes les entit\u00e9s marqu\u00e9es pour \u00eatre persist\u00e9es (via <code>persist()</code>) avec la base de donn\u00e9es. Elle applique les changements (ajouts, mises \u00e0 jour, suppressions) et persiste d\u00e9finitivement les modifications.</p>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function flush(?object $entity = null): void\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li><code>$entity</code> (object|null) :     L'entit\u00e9 sp\u00e9cifique \u00e0 persister (optionnel). Si aucun param\u00e8tre n'est pass\u00e9, Doctrine persiste toutes les entit\u00e9s marqu\u00e9es. Si un objet est fourni, seule cette entit\u00e9 sera synchronis\u00e9e avec la base de donn\u00e9es.</li> </ul>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#retour","title":"Retour","text":"<ul> <li>Cette m\u00e9thode ne retourne rien (<code>void</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/flush%28%29/#exemple-1-persister-une-entite-et-valider-avec-flush","title":"Exemple 1 : Persister une entit\u00e9 et valider avec <code>flush()</code>","text":"<pre><code>public function createUser(Request $request): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    $user = new User();\n    $user-&gt;setName('John Doe');\n    $user-&gt;setEmail('johndoe@example.com');\n\n    // Persister l'entit\u00e9\n    $entityManager-&gt;persist($user);\n\n    // Synchroniser avec la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_show', ['id' =&gt; $user-&gt;getId()]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#exemple-2-mettre-a-jour-plusieurs-entites-et-les-valider-en-une-seule-fois","title":"Exemple 2 : Mettre \u00e0 jour plusieurs entit\u00e9s et les valider en une seule fois","text":"<pre><code>public function updateUser(User $user1, User $user2): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    $user1-&gt;setEmail('newemail1@example.com');\n    $user2-&gt;setEmail('newemail2@example.com');\n\n    // Persister les entit\u00e9s\n    $entityManager-&gt;persist($user1);\n    $entityManager-&gt;persist($user2);\n\n    // Synchroniser toutes les entit\u00e9s avec la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#exemple-3-suppression-dune-entite-avec-flush","title":"Exemple 3 : Suppression d'une entit\u00e9 avec <code>flush()</code>","text":"<pre><code>public function deleteUser(User $user): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    // Supprimer l'entit\u00e9\n    $entityManager-&gt;remove($user);\n\n    // Synchroniser la suppression dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#exemple-4-utilisation-de-flush-avec-une-entite-specifique","title":"Exemple 4 : Utilisation de <code>flush()</code> avec une entit\u00e9 sp\u00e9cifique","text":"<pre><code>public function updateUserEmail(User $user): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    $user-&gt;setEmail('updatedemail@example.com');\n\n    // Persister l'entit\u00e9\n    $entityManager-&gt;persist($user);\n\n    // Synchroniser uniquement l'entit\u00e9 sp\u00e9cifique\n    $entityManager-&gt;flush($user);\n\n    return $this-&gt;redirectToRoute('user_show', ['id' =&gt; $user-&gt;getId()]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/flush%28%29/#1-erreur-tentative-de-flush-sans-entite-marquee","title":"1. Erreur : Tentative de <code>flush()</code> sans entit\u00e9 marqu\u00e9e","text":"<p>Cause : Vous appelez <code>flush()</code> sans avoir marqu\u00e9 d'entit\u00e9 pour persister avec <code>persist()</code>. Solution : Assurez-vous que des entit\u00e9s ont \u00e9t\u00e9 ajout\u00e9es ou modifi\u00e9es avant d'appeler <code>flush()</code>.</p> <pre><code>$user = new User();\n$entityManager-&gt;persist($user);\n$entityManager-&gt;flush(); // Appeler flush() apr\u00e8s persist()\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#2-erreur-conflit-avec-les-contraintes-de-la-base-de-donnees","title":"2. Erreur : Conflit avec les contraintes de la base de donn\u00e9es","text":"<p>Cause : Si une entit\u00e9 contient des valeurs invalides (par exemple une cl\u00e9 unique dupliqu\u00e9e), <code>flush()</code> \u00e9chouera et g\u00e9n\u00e9rera une exception de violation de contrainte. Solution : Utilisez des validations avant d'appeler <code>flush()</code> et g\u00e9rez les erreurs via des blocs <code>try-catch</code>.</p> <pre><code>try {\n    $entityManager-&gt;flush();\n} catch (\\Doctrine\\DBAL\\Exception\\UniqueConstraintViolationException $e) {\n    // G\u00e9rer l'exception, par exemple en affichant un message d'erreur\n    echo \"Erreur de contrainte unique : \" . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Effectuer plusieurs <code>persist()</code> avant d\u2019appeler <code>flush()</code> :     Il est plus performant de regrouper plusieurs appels <code>persist()</code> et d'effectuer un seul appel \u00e0 <code>flush()</code> plut\u00f4t que de persister chaque entit\u00e9 individuellement.</p> </li> <li> <p>Transactions pour des actions critiques :     Si vous effectuez plusieurs op\u00e9rations qui doivent r\u00e9ussir ou \u00e9chouer ensemble (ajout, mise \u00e0 jour, suppression), utilisez une transaction pour garantir l'int\u00e9grit\u00e9 des donn\u00e9es.</p> <p>Exemple avec une transaction :</p> <p><code>php $entityManager-&gt;beginTransaction(); try {     $entityManager-&gt;persist($user1);     $entityManager-&gt;persist($user2);     $entityManager-&gt;flush();     $entityManager-&gt;commit(); } catch (\\Exception $e) {     $entityManager-&gt;rollback();     throw $e; }</code></p> </li> <li> <p>Optimiser la gestion des erreurs :     Utilisez un bloc <code>try-catch</code> pour capturer les exceptions et les erreurs li\u00e9es \u00e0 la base de donn\u00e9es. Vous pouvez ensuite loguer les erreurs ou les afficher pour l'utilisateur.</p> </li> <li> <p>Eviter d'utiliser <code>flush()</code> trop fr\u00e9quemment :     Appeler <code>flush()</code> trop souvent peut \u00eatre co\u00fbteux en termes de performance, surtout pour des op\u00e9rations qui affectent un grand nombre de donn\u00e9es. Groupez les op\u00e9rations.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/flush%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine : Persist and Flush</li> <li>Symfony : Doctrine Documentation</li> </ul>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/","title":"getDoctrine()","text":""},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#documentation-getdoctrine-en-symfony","title":"Documentation : <code>getDoctrine()</code> en Symfony","text":""},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>getDoctrine()</code> est utilis\u00e9e pour acc\u00e9der \u00e0 l'EntityManager de Doctrine, qui permet d'interagir avec la base de donn\u00e9es. Elle est principalement utilis\u00e9e dans les contr\u00f4leurs pour effectuer des op\u00e9rations de gestion des entit\u00e9s (CRUD) dans Symfony.</p>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>getDoctrine(): Doctrine\\Common\\Persistence\\ManagerRegistry\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#retour","title":"Retour","text":"<p>Retourne une instance de <code>ManagerRegistry</code>, qui permet d\u2019acc\u00e9der \u00e0 l\u2019EntityManager et aux autres gestionnaires d\u2019entit\u00e9s.</p>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#exemple-simple-recuperer-lentitymanager","title":"Exemple simple : R\u00e9cup\u00e9rer l'EntityManager","text":"<pre><code>public function index(): Response\n{\n    // R\u00e9cup\u00e9rer l'EntityManager\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    // Utiliser l'EntityManager pour r\u00e9cup\u00e9rer des entit\u00e9s ou effectuer des op\u00e9rations\n    $repository = $entityManager-&gt;getRepository(User::class);\n    $users = $repository-&gt;findAll();\n\n    return $this-&gt;render('user/index.html.twig', [\n        'users' =&gt; $users,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#exemple-effectuer-une-requete-personnalisee-avec-un-repository","title":"Exemple : Effectuer une requ\u00eate personnalis\u00e9e avec un repository","text":"<pre><code>public function findUserByEmail(string $email): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n    $repository = $entityManager-&gt;getRepository(User::class);\n\n    // Recherche un utilisateur par son email\n    $user = $repository-&gt;findOneBy(['email' =&gt; $email]);\n\n    if (!$user) {\n        throw $this-&gt;createNotFoundException('No user found for email ' . $email);\n    }\n\n    return $this-&gt;render('user/profile.html.twig', [\n        'user' =&gt; $user,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#exemple-sauvegarder-une-entite","title":"Exemple : Sauvegarder une entit\u00e9","text":"<pre><code>public function saveUser(Request $request): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n    $user = new User();\n    $user-&gt;setName($request-&gt;get('name'));\n    $user-&gt;setEmail($request-&gt;get('email'));\n\n    // Sauvegarder l'utilisateur dans la base de donn\u00e9es\n    $entityManager-&gt;persist($user);\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#1-erreur-methode-getdoctrine-non-trouvee","title":"1. Erreur : M\u00e9thode <code>getDoctrine()</code> non trouv\u00e9e","text":"<p>Cause : Cela peut se produire si vous essayez d'appeler <code>getDoctrine()</code> dans une classe qui ne l'h\u00e9rite pas (par exemple, un service).</p> <p>Solution :</p> <ul> <li>Si vous \u00eates dans un contr\u00f4leur, <code>getDoctrine()</code> devrait \u00eatre disponible par d\u00e9faut.</li> <li>Si vous \u00eates dans un service, injectez explicitement le service <code>doctrine.orm.entity_manager</code> ou <code>doctrine</code>.</li> </ul> <pre><code>use Doctrine\\ORM\\EntityManagerInterface;\n\nclass UserService\n{\n    private $entityManager;\n\n    public function __construct(EntityManagerInterface $entityManager)\n    {\n        $this-&gt;entityManager = $entityManager;\n    }\n\n    // Utilisez $this-&gt;entityManager pour interagir avec la base de donn\u00e9es\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#2-erreur-entite-non-trouvee-avec-getrepository","title":"2. Erreur : Entit\u00e9 non trouv\u00e9e avec <code>getRepository()</code>","text":"<p>Cause : Si vous utilisez <code>getRepository()</code> et que l\u2019entit\u00e9 est mal d\u00e9finie ou que la classe d\u2019entit\u00e9 n\u2019existe pas.</p> <p>Solution :</p> <ul> <li>V\u00e9rifiez que le namespace et le nom de l'entit\u00e9 sont corrects.</li> <li> <p>Exemple :</p> <p><code>php $repository = $this-&gt;getDoctrine()-&gt;getRepository(User::class);</code></p> </li> </ul>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#3-erreur-probleme-de-connexion-a-la-base-de-donnees","title":"3. Erreur : Probl\u00e8me de connexion \u00e0 la base de donn\u00e9es","text":"<p>Cause : Si Doctrine rencontre un probl\u00e8me de connexion \u00e0 la base de donn\u00e9es, comme une mauvaise configuration ou des identifiants incorrects.</p> <p>Solution :</p> <ul> <li>V\u00e9rifiez votre configuration dans <code>config/packages/doctrine.yaml</code> pour assurer que les param\u00e8tres de connexion sont corrects.</li> <li> <p>Exemple de configuration :</p> <p><code>yaml doctrine:     dbal:         driver: pdo_mysql         url: '%env(resolve:DATABASE_URL)%'</code></p> </li> </ul>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Utilisation des transactions : Si vous effectuez plusieurs modifications sur la base de donn\u00e9es, utilisez des transactions pour garantir la coh\u00e9rence des donn\u00e9es.     Exemple :</p> <p><code>php $entityManager-&gt;beginTransaction(); try {     // op\u00e9rations sur la base de donn\u00e9es     $entityManager-&gt;flush();     $entityManager-&gt;commit(); } catch (\\Exception $e) {     $entityManager-&gt;rollback();     throw $e; }</code></p> </li> <li> <p>Injection de d\u00e9pendance : Plut\u00f4t que d'appeler <code>getDoctrine()</code> dans des services, il est pr\u00e9f\u00e9rable d\u2019injecter directement <code>EntityManagerInterface</code> ou <code>ManagerRegistry</code>.</p> </li> <li> <p>Optimisation des requ\u00eates : Utilisez les <code>findBy()</code> et <code>findOneBy()</code> pour des requ\u00eates simples et le QueryBuilder pour des requ\u00eates plus complexes.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/getDoctrine%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine ORM documentation</li> <li>Symfony Doctrine integration</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/","title":"Documentation Compl\u00e8te : Doctrine <code>getRepository</code>","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#introduction","title":"Introduction","text":"<p>La m\u00e9thode <code>getRepository</code> de Doctrine ORM permet d\u2019obtenir un objet de type Repository associ\u00e9 \u00e0 une entit\u00e9 sp\u00e9cifique. Ce d\u00e9p\u00f4t est utilis\u00e9 pour ex\u00e9cuter des requ\u00eates sur l'entit\u00e9 dans la base de donn\u00e9es.</p>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#signature-de-la-methode","title":"Signature de la M\u00e9thode","text":"<pre><code>public function getRepository(string $className): ObjectRepository;\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#parametre","title":"Param\u00e8tre :","text":"<ul> <li><code>$className</code> (type : <code>string</code>) : Le nom complet de la classe de l'entit\u00e9, fourni sous forme de <code>class-string</code>. Exemple : <code>App\\Entity\\User::class</code>.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#retour","title":"Retour :","text":"<ul> <li><code>ObjectRepository</code> : Une instance du d\u00e9p\u00f4t associ\u00e9 \u00e0 l'entit\u00e9. Par d\u00e9faut, il s'agit d'un <code>EntityRepository</code>.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#exemple-de-base","title":"Exemple de Base","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#structure-de-la-classe-dentite","title":"Structure de la Classe d'Entit\u00e9","text":"<pre><code>namespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass User\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n\n    #[ORM\\Column(length: 255, unique: true)]\n    private ?string $username = null;\n\n    public function getId(): ?int\n    {\n        return $this-&gt;id;\n    }\n\n    public function getUsername(): ?string\n    {\n        return $this-&gt;username;\n    }\n\n    public function setUsername(string $username): self\n    {\n        $this-&gt;username = $username;\n\n        return $this;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#exemple-dutilisation-de-getrepository","title":"Exemple d'Utilisation de <code>getRepository</code>","text":"<pre><code>namespace App\\Service;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\EntityManagerInterface;\n\nclass UserService\n{\n    private EntityManagerInterface $em;\n\n    public function __construct(EntityManagerInterface $em)\n    {\n        $this-&gt;em = $em;\n    }\n\n    public function findUserByUsername(string $username): ?User\n    {\n        $repository = $this-&gt;em-&gt;getRepository(User::class);\n\n        // Utilisation de findOneBy\n        return $repository-&gt;findOneBy(['username' =&gt; $username]);\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#cas-concrets-dutilisation","title":"Cas Concrets d\u2019Utilisation","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#1-recherche-par-identifiant","title":"1. Recherche Par Identifiant","text":"<pre><code>$user = $this-&gt;em-&gt;getRepository(User::class)-&gt;find(1);\nif ($user) {\n    echo \"Utilisateur trouv\u00e9 : \" . $user-&gt;getUsername();\n} else {\n    echo \"Utilisateur non trouv\u00e9.\";\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#2-recherche-avec-des-criteres","title":"2. Recherche avec des Crit\u00e8res","text":"<pre><code>$users = $this-&gt;em-&gt;getRepository(User::class)-&gt;findBy(['role' =&gt; 'ROLE_ADMIN']);\nforeach ($users as $user) {\n    echo \"Admin trouv\u00e9 : \" . $user-&gt;getUsername();\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#3-utilisation-de-methodes-personnalisees","title":"3. Utilisation de M\u00e9thodes Personnalis\u00e9es","text":"<p>Vous pouvez \u00e9tendre le d\u00e9p\u00f4t d\u2019une entit\u00e9 en ajoutant des m\u00e9thodes sp\u00e9cifiques.</p>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#creation-dun-userrepository","title":"Cr\u00e9ation d'un <code>UserRepository</code> :","text":"<pre><code>namespace App\\Repository;\n\nuse App\\Entity\\User;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n\n    public function findActiveUsers(): array\n    {\n        return $this-&gt;createQueryBuilder('u')\n            -&gt;where('u.isActive = true')\n            -&gt;getQuery()\n            -&gt;getResult();\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#utilisation-dans-un-service","title":"Utilisation dans un Service :","text":"<pre><code>$activeUsers = $this-&gt;em-&gt;getRepository(User::class)-&gt;findActiveUsers();\nforeach ($activeUsers as $user) {\n    echo $user-&gt;getUsername();\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#conseils-et-bonnes-pratiques","title":"Conseils et Bonnes Pratiques","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#1-toujours-utiliser-class","title":"1. Toujours Utiliser <code>::class</code>","text":"<ul> <li>Pr\u00e9f\u00e9rez <code>App\\Entity\\User::class</code> \u00e0 une cha\u00eene brute (<code>'App\\Entity\\User'</code>), car cela garantit que PHP d\u00e9tecte les erreurs de typo et permet l'autocompl\u00e9tion dans les IDE.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#2-methodes-par-defaut-disponibles-dans-les-depots","title":"2. M\u00e9thodes par D\u00e9faut Disponibles dans les D\u00e9p\u00f4ts","text":"<ul> <li><code>find($id)</code> : Trouve une entit\u00e9 par son ID.</li> <li><code>findOneBy(array $criteria)</code> : Trouve une entit\u00e9 correspondant aux crit\u00e8res.</li> <li><code>findBy(array $criteria, ?array $orderBy = null, ?int $limit = null, ?int $offset = null)</code> : Trouve plusieurs entit\u00e9s.</li> <li><code>findAll()</code> : Trouve toutes les entit\u00e9s.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#3-etendez-les-depots-si-necessaire","title":"3. \u00c9tendez les D\u00e9p\u00f4ts si N\u00e9cessaire","text":"<ul> <li>Si vous avez des requ\u00eates complexes sp\u00e9cifiques \u00e0 une entit\u00e9, cr\u00e9ez un d\u00e9p\u00f4t personnalis\u00e9.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#points-dattention","title":"Points d'Attention","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#1-mauvais-parametre-dans-getrepository","title":"1. Mauvais Param\u00e8tre dans <code>getRepository</code>","text":"<ul> <li>Assurez-vous de passer le namespace complet de la classe (ex. : <code>App\\Entity\\User::class</code>) et non un alias obsol\u00e8te (<code>'SmsAppBundle:User'</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#2-verifiez-la-configuration","title":"2. V\u00e9rifiez la Configuration","text":"<ul> <li>V\u00e9rifiez que l'entit\u00e9 est bien mapp\u00e9e (annotation <code>#[ORM\\Entity]</code>) et que le d\u00e9p\u00f4t est correctement configur\u00e9.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#3-attention-a-la-performance","title":"3. Attention \u00e0 la Performance","text":"<ul> <li>Ne surchargez pas les requ\u00eates dans un service si une m\u00e9thode dans un d\u00e9p\u00f4t pourrait g\u00e9rer cela efficacement.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#questions-frequentes","title":"Questions Fr\u00e9quentes","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#1-comment-verifier-si-un-depot-personnalise-est-utilise","title":"1. Comment v\u00e9rifier si un d\u00e9p\u00f4t personnalis\u00e9 est utilis\u00e9 ?","text":"<p>Dans le fichier d'entit\u00e9, v\u00e9rifiez la propri\u00e9t\u00e9 <code>repositoryClass</code>\u00a0:</p> <pre><code>#[ORM\\Entity(repositoryClass: UserRepository::class)]\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#2-peut-on-injecter-directement-un-depot","title":"2. Peut-on injecter directement un d\u00e9p\u00f4t ?","text":"<p>Oui, si vous utilisez Symfony, injectez directement le d\u00e9p\u00f4t dans vos services pour \u00e9viter d'appeler <code>getRepository</code>.</p> <p>Exemple :</p> <pre><code>class UserService\n{\n    private UserRepository $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this-&gt;userRepository = $userRepository;\n    }\n\n    public function findUser(string $username): ?User\n    {\n        return $this-&gt;userRepository-&gt;findOneBy(['username' =&gt; $username]);\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#3-peut-on-tester-facilement-les-depots","title":"3. Peut-on tester facilement les d\u00e9p\u00f4ts ?","text":"<p>Oui, utilisez une base de donn\u00e9es en m\u00e9moire avec <code>DoctrineFixturesBundle</code> pour les tests unitaires.</p>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#resume","title":"R\u00e9sum\u00e9","text":"<ul> <li><code>getRepository</code> est une m\u00e9thode essentielle pour acc\u00e9der aux donn\u00e9es des entit\u00e9s.</li> <li>Toujours utiliser <code>::class</code> pour \u00e9viter les erreurs de type.</li> <li>\u00c9tendez les d\u00e9p\u00f4ts avec des m\u00e9thodes personnalis\u00e9es pour des requ\u00eates complexes.</li> <li>Soyez attentif aux performances en limitant les requ\u00eates inutiles.</li> </ul>"},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#tags","title":"tags","text":""},{"location":"symfony/concepts/Doctrine/getRepository%28%29/#symfony-doctrine","title":"symfony #Doctrine","text":""},{"location":"symfony/concepts/Doctrine/persist%28%29/","title":"persist()","text":""},{"location":"symfony/concepts/Doctrine/persist%28%29/#documentation-persist-en-symfony-doctrine","title":"Documentation : <code>persist()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/persist%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>persist()</code> de Doctrine est utilis\u00e9e pour marquer une entit\u00e9 comme devant \u00eatre ajout\u00e9e ou mise \u00e0 jour dans la base de donn\u00e9es lors de l'ex\u00e9cution de l'op\u00e9ration <code>flush()</code>. Elle ne modifie pas imm\u00e9diatement la base de donn\u00e9es mais pr\u00e9pare l'entit\u00e9 pour l'ajout ou la mise \u00e0 jour \u00e0 la prochaine synchronisation avec la base de donn\u00e9es.</p>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function persist(object $entity): void\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li><code>$entity</code> (object) :     L'entit\u00e9 \u00e0 persister, qui doit \u00eatre une instance d'une entit\u00e9 Doctrine (ex. : une classe annot\u00e9e avec <code>@Entity</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#retour","title":"Retour","text":"<ul> <li>Cette m\u00e9thode ne retourne rien (<code>void</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/persist%28%29/#exemple-1-persister-une-nouvelle-entite","title":"Exemple 1 : Persister une nouvelle entit\u00e9","text":"<pre><code>public function createUser(Request $request): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    $user = new User();\n    $user-&gt;setName('John Doe');\n    $user-&gt;setEmail('johndoe@example.com');\n\n    // Persiste l'entit\u00e9\n    $entityManager-&gt;persist($user);\n\n    // Sauvegarde les changements dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_show', ['id' =&gt; $user-&gt;getId()]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#exemple-2-mettre-a-jour-une-entite-existante","title":"Exemple 2 : Mettre \u00e0 jour une entit\u00e9 existante","text":"<pre><code>public function updateUser(User $user): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    // Mise \u00e0 jour des propri\u00e9t\u00e9s de l'entit\u00e9\n    $user-&gt;setEmail('newemail@example.com');\n\n    // Persiste l'entit\u00e9 (mise \u00e0 jour)\n    $entityManager-&gt;persist($user);\n\n    // Sauvegarde les changements dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_show', ['id' =&gt; $user-&gt;getId()]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#exemple-3-persister-plusieurs-entites","title":"Exemple 3 : Persister plusieurs entit\u00e9s","text":"<pre><code>public function createMultipleUsers(Request $request): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    // Cr\u00e9er plusieurs entit\u00e9s\n    $user1 = new User();\n    $user1-&gt;setName('Alice');\n    $user1-&gt;setEmail('alice@example.com');\n\n    $user2 = new User();\n    $user2-&gt;setName('Bob');\n    $user2-&gt;setEmail('bob@example.com');\n\n    // Persiste les entit\u00e9s\n    $entityManager-&gt;persist($user1);\n    $entityManager-&gt;persist($user2);\n\n    // Sauvegarde toutes les entit\u00e9s en une seule fois\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/persist%28%29/#1-erreur-lentite-ne-fait-pas-partie-du-gestionnaire","title":"1. Erreur : L'entit\u00e9 ne fait pas partie du gestionnaire","text":"<p>Cause : L'entit\u00e9 n'a pas \u00e9t\u00e9 correctement initialis\u00e9e ou n'est pas correctement associ\u00e9e au gestionnaire d'entit\u00e9s. Solution : Assurez-vous que l'entit\u00e9 a \u00e9t\u00e9 correctement instanci\u00e9e et que vous utilisez l'instance correcte du gestionnaire d'entit\u00e9s.</p> <pre><code>$user = new User();\n$entityManager-&gt;persist($user);\n$entityManager-&gt;flush(); // Toujours appeler flush apr\u00e8s persist pour enregistrer les donn\u00e9es\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#2-erreur-tentative-de-persistance-sur-une-entite-non-valide","title":"2. Erreur : Tentative de persistance sur une entit\u00e9 non valide","text":"<p>Cause : Les entit\u00e9s Doctrine doivent \u00eatre valides avant d'\u00eatre persist\u00e9es (via des validations d\u00e9finies par exemple avec des annotations). Solution : Utilisez les contraintes de validation avant de persister l'entit\u00e9 pour \u00e9viter des erreurs en base de donn\u00e9es.</p> <pre><code>use Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\n\npublic function createUser(Request $request, ValidatorInterface $validator): Response\n{\n    $user = new User();\n    $user-&gt;setEmail('invalid-email'); // Email invalide\n\n    $errors = $validator-&gt;validate($user);\n    if (count($errors) &gt; 0) {\n        // Gestion des erreurs de validation\n        return new Response((string) $errors);\n    }\n\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n    $entityManager-&gt;persist($user);\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_show', ['id' =&gt; $user-&gt;getId()]);\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Ne pas appeler <code>flush()</code> trop souvent :     Appeler <code>persist()</code> marque simplement l'entit\u00e9 pour \u00eatre persist\u00e9e. C'est <code>flush()</code> qui effectue la mise \u00e0 jour r\u00e9elle dans la base de donn\u00e9es. Il est plus performant de grouper plusieurs appels <code>persist()</code> et de les synchroniser en une seule fois via <code>flush()</code>.</p> </li> <li> <p>Utilisation d'objets partiellement modifi\u00e9s :     Si une entit\u00e9 est d\u00e9j\u00e0 persist\u00e9e et modifi\u00e9e, vous n'avez pas besoin d'appeler <code>persist()</code> \u00e0 nouveau. Doctrine d\u00e9tectera les changements automatiquement lors de l'appel de <code>flush()</code>.</p> </li> <li> <p>Utiliser les transactions pour des op\u00e9rations critiques :     Si vous effectuez plusieurs <code>persist()</code> sur des entit\u00e9s li\u00e9es, il est conseill\u00e9 d'encapsuler l'op\u00e9ration dans une transaction pour garantir la coh\u00e9rence des donn\u00e9es. Exemple :</p> <p><code>php $entityManager-&gt;beginTransaction(); try {     $entityManager-&gt;persist($user1);     $entityManager-&gt;persist($user2);     $entityManager-&gt;flush();     $entityManager-&gt;commit(); } catch (\\Exception $e) {     $entityManager-&gt;rollback();     throw $e; }</code></p> </li> <li> <p>Optimiser les appels <code>flush()</code> :     Ne persistez pas trop souvent dans une boucle, car chaque appel \u00e0 <code>flush()</code> peut \u00eatre co\u00fbteux en termes de performance.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/persist%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine : Persist and Flush</li> <li>Symfony : Working with Doctrine</li> </ul>"},{"location":"symfony/concepts/Doctrine/remove%28%29/","title":"remove()","text":""},{"location":"symfony/concepts/Doctrine/remove%28%29/#documentation-remove-en-symfony-doctrine","title":"Documentation : <code>remove()</code> en Symfony / Doctrine","text":""},{"location":"symfony/concepts/Doctrine/remove%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>remove()</code> de Doctrine est utilis\u00e9e pour marquer une entit\u00e9 pour suppression. Lorsque <code>flush()</code> est appel\u00e9, l'entit\u00e9 est effectivement supprim\u00e9e de la base de donn\u00e9es. Cette m\u00e9thode ne supprime pas imm\u00e9diatement l'entit\u00e9 de la base de donn\u00e9es mais pr\u00e9pare l'entit\u00e9 pour une suppression lors de la synchronisation.</p>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function remove(object $entity): void\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li><code>$entity</code> (object) :     L'entit\u00e9 \u00e0 supprimer. Elle doit \u00eatre une instance d'une entit\u00e9 Doctrine (ex. : une classe annot\u00e9e avec <code>@Entity</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#retour","title":"Retour","text":"<ul> <li>Cette m\u00e9thode ne retourne rien (<code>void</code>).</li> </ul>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/Doctrine/remove%28%29/#exemple-1-supprimer-une-entite","title":"Exemple 1 : Supprimer une entit\u00e9","text":"<pre><code>public function deleteUser(User $user): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    // Supprimer l'entit\u00e9\n    $entityManager-&gt;remove($user);\n\n    // Appliquer la suppression dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#exemple-2-supprimer-un-objet-par-son-identifiant","title":"Exemple 2 : Supprimer un objet par son identifiant","text":"<pre><code>public function deleteUserById(int $id): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n    $user = $entityManager-&gt;getRepository(User::class)-&gt;find($id);\n\n    if (!$user) {\n        throw $this-&gt;createNotFoundException('No user found for id '.$id);\n    }\n\n    // Supprimer l'entit\u00e9\n    $entityManager-&gt;remove($user);\n\n    // Appliquer la suppression dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#exemple-3-supprimer-plusieurs-entites-dans-une-boucle","title":"Exemple 3 : Supprimer plusieurs entit\u00e9s dans une boucle","text":"<pre><code>public function deleteUsers(array $users): Response\n{\n    $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\n\n    foreach ($users as $user) {\n        $entityManager-&gt;remove($user); // Supprime chaque utilisateur\n    }\n\n    // Applique toutes les suppressions dans la base de donn\u00e9es\n    $entityManager-&gt;flush();\n\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/Doctrine/remove%28%29/#1-erreur-tentative-de-suppression-dune-entite-non-persistee","title":"1. Erreur : Tentative de suppression d'une entit\u00e9 non persist\u00e9e","text":"<p>Cause : Vous essayez de supprimer une entit\u00e9 qui n'a pas \u00e9t\u00e9 persist\u00e9e (ajout\u00e9e \u00e0 la base de donn\u00e9es) auparavant. Solution : Assurez-vous que l'entit\u00e9 a \u00e9t\u00e9 persist\u00e9e avant de tenter de la supprimer. Doctrine g\u00e8re l'\u00e9tat des entit\u00e9s et ne peut pas supprimer une entit\u00e9 non persist\u00e9e.</p> <pre><code>$user = $entityManager-&gt;getRepository(User::class)-&gt;find($id);\nif (!$user) {\n    // L'entit\u00e9 n'existe pas dans la base de donn\u00e9es\n    throw $this-&gt;createNotFoundException('User not found');\n}\n$entityManager-&gt;remove($user);\n$entityManager-&gt;flush();\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#2-erreur-tentative-de-suppression-dune-entite-avec-des-relations-dependantes","title":"2. Erreur : Tentative de suppression d'une entit\u00e9 avec des relations d\u00e9pendantes","text":"<p>Cause : Vous tentez de supprimer une entit\u00e9 qui poss\u00e8de des relations avec d'autres entit\u00e9s, mais ces entit\u00e9s ne peuvent pas \u00eatre supprim\u00e9es ou mises \u00e0 jour en cascade (selon la configuration des relations). Solution : Assurez-vous que les relations sont configur\u00e9es pour autoriser la suppression en cascade si n\u00e9cessaire, ou g\u00e9rez les suppressions manuellement.</p> <pre><code>// Exemple de relation ManyToOne avec cascade=\"remove\"\nclass User {\n    //...\n    /**\n     * @ManyToOne(targetEntity=\"Profile\", cascade={\"remove\"})\n     */\n    private $profile;\n}\n\n// Dans le code, supprimer l'utilisateur supprimera aussi son profil\n$entityManager-&gt;remove($user);\n$entityManager-&gt;flush();\n</code></pre>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Utiliser les cascades de suppression :     Si une entit\u00e9 est li\u00e9e \u00e0 d'autres entit\u00e9s via des relations (par exemple, une relation <code>OneToMany</code> ou <code>ManyToOne</code>), il peut \u00eatre utile de configurer les relations pour supprimer automatiquement les entit\u00e9s associ\u00e9es avec l'option <code>cascade={\"remove\"}</code>.</p> </li> <li> <p>V\u00e9rification de l'existence avant de supprimer :     Toujours v\u00e9rifier que l'entit\u00e9 existe avant de tenter de la supprimer pour \u00e9viter les erreurs et exceptions li\u00e9es \u00e0 une entit\u00e9 introuvable.</p> </li> <li> <p>Transactions pour des op\u00e9rations critiques :     Si vous supprimez plusieurs entit\u00e9s ou effectuez plusieurs actions qui doivent \u00eatre atomiques (r\u00e9ussir toutes ou \u00e9chouer toutes), encapsulez-les dans une transaction pour garantir l'int\u00e9grit\u00e9 des donn\u00e9es.</p> <p>Exemple avec une transaction :</p> <p><code>php $entityManager-&gt;beginTransaction(); try {     $entityManager-&gt;remove($user1);     $entityManager-&gt;remove($user2);     $entityManager-&gt;flush();     $entityManager-&gt;commit(); } catch (\\Exception $e) {     $entityManager-&gt;rollback();     throw $e; }</code></p> </li> <li> <p>Eviter de supprimer dans des boucles avec trop d'\u00e9l\u00e9ments :     Si vous devez supprimer une grande quantit\u00e9 d'entit\u00e9s dans une boucle, soyez conscient des limitations de performance. Dans ces cas, il peut \u00eatre utile de g\u00e9rer les suppressions par lots ou de traiter les entit\u00e9s en utilisant des requ\u00eates personnalis\u00e9es.</p> </li> </ol>"},{"location":"symfony/concepts/Doctrine/remove%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Doctrine : Removing Entities</li> <li>Symfony : Doctrine Documentation</li> </ul>"},{"location":"symfony/concepts/JSON/%28phpsfnJSON%29/","title":"FOLDER","text":"<p>[[json_encode()]] [[json_decode()]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/JSON/json_decode%28%29/","title":"<code>json_decode()</code>","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#description","title":"Description","text":"<p>La fonction PHP <code>json_decode()</code> permet de convertir une cha\u00eene JSON en une structure PHP, comme un tableau associatif ou un objet. C'est une fonction essentielle pour travailler avec des donn\u00e9es JSON dans vos applications.</p>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>mixed json_decode(string $json, bool $associative = false, int $depth = 512, int $flags = 0)\n````\n\n### **Param\u00e8tres** :\n\n1. **`$json`** _(obligatoire)_ : La cha\u00eene JSON \u00e0 d\u00e9coder.\n2. **`$associative`** _(facultatif, par d\u00e9faut `false`)_ :\n    - Si `true`, retourne un tableau associatif.\n    - Si `false`, retourne un objet.\n3. **`$depth`** _(facultatif, par d\u00e9faut `512`)_ :\n    - Profondeur maximale \u00e0 laquelle le JSON peut \u00eatre d\u00e9cod\u00e9.\n4. **`$flags`** _(facultatif, par d\u00e9faut `0`)_ :\n    - Options sp\u00e9ciales pour le d\u00e9codage (ex. `JSON_BIGINT_AS_STRING`).\n\n### **Valeur de retour** :\n\n- Retourne un tableau ou un objet PHP.\n- Retourne `null` en cas d'erreur.\n\n---\n\n## Exemple simple\n\n### **JSON de base**\n\n```php\n$json = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}';\n$data = json_decode($json, true);\n\nprint_r($data);\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#resultat","title":"R\u00e9sultat :","text":"<pre><code>Array\n(\n    [name] =&gt; John\n    [age] =&gt; 30\n    [city] =&gt; New York\n)\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#decodage-en-objet","title":"D\u00e9codage en objet","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#exemple","title":"Exemple :","text":"<pre><code>$json = '{\"name\": \"Alice\", \"age\": 25}';\n$object = json_decode($json);\n\necho $object-&gt;name; // Alice\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#gestion-des-tableaux-imbriques","title":"Gestion des tableaux imbriqu\u00e9s","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#exemple_1","title":"Exemple :","text":"<pre><code>$json = '{\"users\": [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]}';\n$data = json_decode($json, true);\n\nforeach ($data['users'] as $user) {\n    echo $user['name'] . \"\\n\";\n}\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#resultat_1","title":"R\u00e9sultat :","text":"<pre><code>Alice\nBob\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#erreurs-courantes","title":"Erreurs courantes","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#1-json-malforme","title":"1. JSON malform\u00e9","text":"<pre><code>$json = '{\"name\": \"John\", \"age\": 30'; // Manque une accolade fermante\n$data = json_decode($json);\n\nif (json_last_error() !== JSON_ERROR_NONE) {\n    echo 'Erreur : ' . json_last_error_msg();\n}\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#resultat_2","title":"R\u00e9sultat :","text":"<pre><code>Erreur : Syntax error\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#2-depassement-de-profondeur","title":"2. D\u00e9passement de profondeur","text":"<pre><code>$json = str_repeat('[', 600) . str_repeat(']', 600); // JSON trop profond\n$data = json_decode($json);\n\nif (json_last_error() === JSON_ERROR_DEPTH) {\n    echo 'Erreur : profondeur maximale d\u00e9pass\u00e9e.';\n}\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#3-gestion-des-grandes-valeurs-numeriques","title":"3. Gestion des grandes valeurs num\u00e9riques","text":"<p>Par d\u00e9faut, les grands entiers (bigint) peuvent \u00eatre tronqu\u00e9s.</p>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#exemple_2","title":"Exemple :","text":"<pre><code>$json = '{\"id\": 9223372036854775807}';\n$data = json_decode($json, true);\n\necho $data['id']; // R\u00e9sultat incorrect : 9223372036854775807 devient 9.2233720368548E+18\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#solution","title":"Solution :","text":"<p>Utilisez le drapeau <code>JSON_BIGINT_AS_STRING</code> pour \u00e9viter cela.</p> <pre><code>$data = json_decode($json, true, 512, JSON_BIGINT_AS_STRING);\necho $data['id']; // 9223372036854775807\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#cas-concrets-dutilisation","title":"Cas concrets d'utilisation","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#1-decoder-une-api-rest","title":"1. D\u00e9coder une API REST","text":"<p>Si vous r\u00e9cup\u00e9rez des donn\u00e9es depuis une API, elles sont souvent au format JSON.</p>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#exemple_3","title":"Exemple :","text":"<pre><code>$response = '{\"status\": \"success\", \"data\": {\"id\": 1, \"name\": \"Product 1\"}}';\n$data = json_decode($response, true);\n\nif ($data['status'] === 'success') {\n    echo \"Produit : \" . $data['data']['name'];\n}\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#2-stocker-des-donnees-structurees-dans-une-base-de-donnees","title":"2. Stocker des donn\u00e9es structur\u00e9es dans une base de donn\u00e9es","text":"<p>Vous pouvez stocker des objets JSON dans une base de donn\u00e9es, puis les d\u00e9coder lors de la lecture.</p>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#exemple_4","title":"Exemple :","text":"<pre><code>$json = '{\"settings\": {\"theme\": \"dark\", \"notifications\": true}}';\n$settings = json_decode($json, true);\n\nif ($settings['settings']['theme'] === 'dark') {\n    echo \"Th\u00e8me sombre activ\u00e9\";\n}\n</code></pre>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#conseils-et-bonnes-pratiques","title":"Conseils et bonnes pratiques","text":"<ol> <li> <p>V\u00e9rifiez toujours les erreurs apr\u00e8s un d\u00e9codage :</p> <ul> <li>Utilisez <code>json_last_error()</code> et <code>json_last_error_msg()</code> pour \u00e9viter des comportements inattendus.</li> </ul> <p><code>php $data = json_decode($json); if (json_last_error() !== JSON_ERROR_NONE) {     die('Erreur JSON : ' . json_last_error_msg()); }</code></p> </li> <li> <p>Utilisez <code>$associative = true</code> si vous travaillez souvent avec des tableaux :</p> <ul> <li>Les tableaux sont souvent plus pratiques que les objets pour des manipulations rapides.</li> <li> <p>Traitez les donn\u00e9es avec des contraintes :</p> </li> <li> <p>Ajoutez des v\u00e9rifications sur les types et les cl\u00e9s attendues pour \u00e9viter des bugs ou des failles.</p> </li> <li> <p>M\u00e9fiez-vous des grands entiers :</p> </li> <li> <p>Utilisez <code>JSON_BIGINT_AS_STRING</code> si vous travaillez avec des ID tr\u00e8s longs.</p> </li> <li> <p>Fixez une profondeur adapt\u00e9e :</p> </li> <li> <p>Ajustez le param\u00e8tre <code>$depth</code> pour \u00e9viter des erreurs dans des JSON tr\u00e8s imbriqu\u00e9s.</p> </li> </ul> </li> </ol>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#points-dattention","title":"Points d'attention","text":"<ul> <li> <p>Performance :</p> <ul> <li>La conversion JSON peut \u00eatre co\u00fbteuse en termes de ressources. Pour de tr\u00e8s grandes donn\u00e9es, envisagez d'autres formats comme <code>MessagePack</code>.</li> <li> <p>S\u00e9curit\u00e9 :</p> </li> <li> <p>Ne faites pas confiance \u00e0 des JSON non valid\u00e9s venant d'une source externe. Analysez et v\u00e9rifiez toujours les donn\u00e9es d\u00e9cod\u00e9es.</p> </li> <li> <p>Compatibilit\u00e9 :</p> </li> <li> <p><code>json_decode</code> ne supporte pas certains formats sp\u00e9cifiques, comme les objets JSON circulaires.</p> </li> </ul> </li> </ul>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#liens-connexes","title":"Liens connexes","text":"<ul> <li>Documentation officielle PHP : json_decode()</li> <li>[[json_encode()]] : Encoder des donn\u00e9es PHP en JSON.</li> <li>[[json-overview]] : Introduction g\u00e9n\u00e9rale \u00e0 JSON.</li> <li>[[handling-json-errors]] : Gestion des erreurs JSON.</li> </ul>"},{"location":"symfony/concepts/JSON/json_decode%28%29/#tags","title":"Tags","text":""},{"location":"symfony/concepts/JSON/json_decode%28%29/#php-json-json_decode-data-handling-best-practices","title":"php #json #json_decode #data-handling #best-practices","text":"<pre><code>\n---\n\n### **Structure de la documentation**\n\n1. **Description :** Une introduction claire \u00e0 `json_decode`.\n2. **Syntaxe :** Pr\u00e9sente les arguments et la valeur de retour.\n3. **Exemples pratiques :** Des cas simples et avanc\u00e9s pour illustrer l\u2019utilisation.\n4. **Erreurs courantes :** Explique les pi\u00e8ges \u00e0 \u00e9viter avec des solutions.\n5. **Cas concrets :** Montre comment utiliser `json_decode` dans des sc\u00e9narios r\u00e9els.\n6. **Conseils et bonnes pratiques :** Donne des recommandations pour une utilisation efficace et s\u00e9curis\u00e9e.\n7. **Liens connexes :** Facilite la navigation dans ton vault ou vers des ressources externes.\n8. **Tags :** Am\u00e9liore l\u2019organisation et la recherche dans Obsidian.\n\n---\n\nDis-moi si tu veux d\u00e9tailler une section ou ajouter d\u2019autres exemples\u202f! \ud83d\ude0a\n</code></pre>"},{"location":"symfony/concepts/configuration/%28phpsfnconceptconfig%29/","title":"FOLDER","text":"<p>[[configuration-hierarchy]] [[getParameter()]] [[parameters-definition]] [[routing-configuration]] [[services-configuration]] [[variable-environment]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/","title":"Hi\u00e9rarchie et ordre de priorit\u00e9 des fichiers de configuration","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchi/#description","title":"Description","text":"<p>Symfony utilise une hi\u00e9rarchie de fichiers de configuration pour d\u00e9terminer comment votre application doit se comporter dans diff\u00e9rents environnements (dev, prod, test). Comprendre l'ordre de priorit\u00e9 de ces fichiers est essentiel pour s'assurer que les param\u00e8tres corrects sont appliqu\u00e9s au bon moment.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#ordre-de-priorite-des-fichiers-de-configuration","title":"Ordre de priorit\u00e9 des fichiers de configuration","text":"<p>Symfony charge les fichiers de configuration dans un ordre sp\u00e9cifique. Voici l'ordre g\u00e9n\u00e9ral :</p> <ol> <li>Fichiers globaux :</li> <li><code>config/packages/*.yaml</code></li> <li><code>config/services.yaml</code></li> <li> <p><code>config/routes.yaml</code></p> </li> <li> <p>Fichiers sp\u00e9cifiques \u00e0 l'environnement :</p> </li> <li><code>config/packages/&lt;env&gt;/*.yaml</code> (par exemple, <code>config/packages/prod/doctrine.yaml</code>)</li> <li><code>config/services_&lt;env&gt;.yaml</code> (par exemple, <code>config/services_prod.yaml</code>)</li> <li> <p><code>config/routes_&lt;env&gt;.yaml</code></p> </li> <li> <p>Variables d'environnement :</p> </li> <li>Fichiers <code>.env</code>, <code>.env.local</code>, <code>.env.&lt;env&gt;</code>, etc.</li> </ol>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#details-des-niveaux-de-configuration","title":"D\u00e9tails des niveaux de configuration","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchi/#1-configuration-globale","title":"1. Configuration globale","text":"<p>Les fichiers situ\u00e9s dans <code>config/packages/</code> et <code>config/</code> d\u00e9finissent la configuration par d\u00e9faut de votre application.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#exemple","title":"Exemple :","text":"<ul> <li><code>config/packages/framework.yaml</code></li> <li><code>config/packages/doctrine.yaml</code></li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#2-configuration-par-environnement","title":"2. Configuration par environnement","text":"<p>Les fichiers sp\u00e9cifiques \u00e0 un environnement surchargent la configuration globale pour cet environnement particulier.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#exemple_1","title":"Exemple :","text":"<ul> <li><code>config/packages/prod/doctrine.yaml</code> : S'applique uniquement en production.</li> <li><code>config/packages/dev/monolog.yaml</code> : S'applique uniquement en d\u00e9veloppement.</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#3-variables-denvironnement","title":"3. Variables d'environnement","text":"<p>Les variables d'environnement d\u00e9finies dans les fichiers <code>.env</code> peuvent surcharger les configurations pr\u00e9c\u00e9dentes.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#exemple_2","title":"Exemple :","text":"<ul> <li><code>.env</code> : Variables d'environnement par d\u00e9faut.</li> <li><code>.env.local</code> : Variables sp\u00e9cifiques \u00e0 votre machine locale.</li> <li><code>.env.prod</code> : Variables pour l'environnement de production.</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#exemple-pratique","title":"Exemple pratique","text":"<p>Supposons que vous ayez les fichiers suivants :</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#1-configpackagesdoctrineyaml","title":"1. <code>config/packages/doctrine.yaml</code>","text":"<pre><code>doctrine:\n  dbal:\n    url: '%env(DATABASE_URL)%'\n    driver: 'pdo_mysql'\n    charset: utf8mb4\n````\n\n### **2. `config/packages/prod/doctrine.yaml`**\n\n```yaml\ndoctrine:\n  dbal:\n    driver: 'pdo_pgsql'\n    charset: utf8\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#3-env","title":"3. <code>.env</code>","text":"<pre><code>DATABASE_URL=mysql://user:pass@127.0.0.1:3306/mydb\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#4-envprod","title":"4. <code>.env.prod</code>","text":"<pre><code>DATABASE_URL=pgsql://user:pass@db.example.com:5432/proddb\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#comportement-attendu","title":"Comportement attendu","text":"<ul> <li> <p>En environnement de d\u00e9veloppement (<code>APP_ENV=dev</code>) :</p> <ul> <li>Le fichier <code>config/packages/doctrine.yaml</code> est charg\u00e9.</li> <li>Les variables de <code>.env</code> sont utilis\u00e9es.</li> <li>R\u00e9sultat : Utilisation de MySQL avec les param\u00e8tres d\u00e9finis dans <code>.env</code>.</li> <li> <p>En environnement de production (<code>APP_ENV=prod</code>) :</p> </li> <li> <p>Le fichier <code>config/packages/doctrine.yaml</code> est charg\u00e9, puis surcharg\u00e9 par <code>config/packages/prod/doctrine.yaml</code>.</p> </li> <li>Les variables de <code>.env.prod</code> sont utilis\u00e9es.</li> <li>R\u00e9sultat : Utilisation de PostgreSQL avec les param\u00e8tres d\u00e9finis dans <code>.env.prod</code>.</li> </ul> </li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#priorite-des-fichiers-env","title":"Priorit\u00e9 des fichiers <code>.env</code>","text":"<p>Les fichiers <code>.env</code> sont charg\u00e9s dans l'ordre suivant, le dernier surchargera les pr\u00e9c\u00e9dents :</p> <ol> <li><code>.env</code> : Fichier principal avec les valeurs par d\u00e9faut.</li> <li><code>.env.local</code> : Surcharge les valeurs de <code>.env</code> (non versionn\u00e9, sp\u00e9cifique \u00e0 la machine).</li> <li><code>.env.&lt;APP_ENV&gt;.local</code> : Surcharge les valeurs pr\u00e9c\u00e9dentes pour un environnement sp\u00e9cifique (non versionn\u00e9).</li> <li><code>.env.&lt;APP_ENV&gt;</code> : Surcharge les valeurs pour un environnement sp\u00e9cifique.</li> </ol>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>Utilisez les fichiers sp\u00e9cifiques \u00e0 l'environnement pour d\u00e9finir des configurations diff\u00e9rentes selon l'environnement (dev, prod, test).</p> </li> <li> <p>\u00c9vitez de versionner les fichiers <code>.env.local</code> qui contiennent des configurations sp\u00e9cifiques \u00e0 votre machine ou des secrets.</p> </li> <li> <p>Centralisez les configurations communes dans les fichiers globaux pour \u00e9viter les duplications.</p> </li> <li> <p>Testez vos configurations en utilisant la commande :</p> <p><code>bash php bin/console config:dump-reference &lt;nom_du_bundle&gt;</code></p> <p>Par exemple :</p> <p><code>bash php bin/console config:dump-reference doctrine</code></p> </li> </ol>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[configuration-overview]] : Vue d'ensemble de la configuration dans Symfony.</li> <li>[[environment-variables]] : Gestion des variables d'environnement avec <code>.env</code>.</li> <li>[[services-configuration]] : Configurer les services dans <code>services.yaml</code>.</li> <li>[[parameters-definition]] : D\u00e9finir et utiliser des param\u00e8tres globaux.</li> <li>[[security-configuration]] : Configurer les param\u00e8tres de s\u00e9curit\u00e9.</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Hi\u00e9rarchie de configuration</li> <li>Meilleures pratiques Symfony</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchi/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchi/#symfony-configuration-hierarchie-environnements-variablenvironnement","title":"symfony #configuration #hierarchie #environnements #variablenvironnement","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchy/","title":"Vue d'ensemble de la configuration dans Symfony","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchy/#description","title":"Description","text":"<p>La configuration est essentielle pour adapter une application Symfony \u00e0 diff\u00e9rents environnements et besoins. Symfony offre une structure claire et des outils puissants pour g\u00e9rer la configuration, notamment \u00e0 travers des fichiers YAML, des variables d'environnement, et des param\u00e8tres globaux.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#structure-de-base-des-fichiers-de-configuration","title":"Structure de base des fichiers de configuration","text":"<p>Symfony stocke ses fichiers de configuration dans le dossier <code>config/</code>. Voici les principaux sous-dossiers et fichiers que vous trouverez : - <code>config/packages/</code> : Contient les fichiers de configuration des bundles. - <code>config/routes/</code> : Contient les fichiers de d\u00e9finition des routes. - <code>config/services.yaml</code> : D\u00e9finit et configure les services de l'application. - <code>config/packages/*.yaml</code> : Configuration sp\u00e9cifique \u00e0 chaque bundle (par exemple, <code>doctrine.yaml</code>, <code>framework.yaml</code>). - <code>.env</code> : D\u00e9finit les variables d'environnement.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#configurer-des-parametres-globaux","title":"Configurer des param\u00e8tres globaux","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchy/#exemple-dans-configservicesyaml","title":"Exemple dans <code>config/services.yaml</code> :","text":"<pre><code>parameters:\n    app.name: \"My Symfony App\"\n    app.version: \"1.0.0\"\n    app.default_language: \"en\"\n````\n\n### Utiliser ces param\u00e8tres dans votre application :\n\n- **Dans un contr\u00f4leur :**\n\n    ```php\n    $appName = $this-&gt;getParameter('app.name');\n    ```\n\n- **Dans un service :**\n\n    ```yaml\n    services:\n        App\\Service\\MyService:\n            arguments:\n                $appName: '%app.name%'\n    ```\n\n\n---\n\n## Variables d'environnement\n\nSymfony utilise des variables d'environnement pour adapter la configuration en fonction des environnements (local, production, test).\n\n### Exemple dans `.env` :\n\n```dotenv\nAPP_ENV=dev\nDATABASE_URL=mysql://user:password@127.0.0.1:3306/my_database\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#exemple-dutilisation-dans-un-fichier-de-configuration","title":"Exemple d\u2019utilisation dans un fichier de configuration :","text":"<pre><code>doctrine:\n    dbal:\n        url: '%env(DATABASE_URL)%'\n</code></pre> <p>Voir [[variable-environment]] pour plus de d\u00e9tails.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#configuration-des-bundles","title":"Configuration des bundles","text":"<p>Les bundles tiers et internes sont configur\u00e9s via des fichiers YAML dans <code>config/packages/</code>.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#exemple-configurer-doctrine-dans-configpackagesdoctrineyaml","title":"Exemple : Configurer Doctrine dans <code>config/packages/doctrine.yaml</code> :","text":"<pre><code>doctrine:\n    dbal:\n        url: '%env(resolve:DATABASE_URL)%'\n    orm:\n        auto_generate_proxy_classes: true\n        naming_strategy: doctrine.orm.naming_strategy.underscore\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#exemple-configurer-le-framework-symfony-dans-configpackagesframeworkyaml","title":"Exemple : Configurer le framework Symfony dans <code>config/packages/framework.yaml</code> :","text":"<pre><code>framework:\n    secret: '%env(APP_SECRET)%'\n    csrf_protection: true\n    session:\n        handler_id: null\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#gestion-des-routes","title":"Gestion des routes","text":"<p>Les routes peuvent \u00eatre d\u00e9finies dans :</p> <ol> <li> <p>Fichiers YAML (dans <code>config/routes/</code>).</p> <p><code>yaml app_home:     path: /     controller: App\\Controller\\HomeController::index</code></p> </li> <li> <p>Annotations (dans le contr\u00f4leur).</p> <p>```php use Symfony\\Component\\Routing\\Annotation\\Route;</p> <p>class HomeController {     #[Route('/', name: 'app_home')]     public function index() { ... } } ```</p> </li> </ol> <p>Voir [[routing-configuration]] pour plus de d\u00e9tails.</p>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#surcharge-de-la-configuration-par-environnement","title":"Surcharge de la configuration par environnement","text":"<p>Symfony permet de d\u00e9finir des fichiers sp\u00e9cifiques \u00e0 un environnement :</p> <ul> <li><code>config/packages/prod/doctrine.yaml</code> : Pour la production.</li> <li><code>config/packages/test/framework.yaml</code> : Pour les tests.</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#tester-la-configuration","title":"Tester la configuration","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchy/#commande-pour-verifier-la-configuration","title":"Commande pour v\u00e9rifier la configuration :","text":"<pre><code>php bin/console config:dump-reference &lt;nom_du_bundle&gt;\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#exemple-pour-doctrine","title":"Exemple pour Doctrine :","text":"<pre><code>php bin/console config:dump-reference doctrine\n</code></pre>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Centralisez les param\u00e8tres globaux dans <code>parameters</code> pour une gestion plus simple.</li> <li>Utilisez des variables d'environnement pour les donn\u00e9es sensibles (voir [[environment-variables]]).</li> <li>Divisez la configuration par environnement pour une maintenance simplifi\u00e9e.</li> </ol>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[services-configuration]] : Configuration des services dans <code>services.yaml</code>.</li> <li>[[variable-environment]] : Gestion des variables d'environnement.</li> <li>[[routing-configuration]] : Configuration des routes.</li> <li>[[parameters-definition]] : Utiliser des param\u00e8tres globaux dans Symfony.</li> <li>[[security-configuration]] : Configurer les aspects de s\u00e9curit\u00e9 dans <code>security.yaml</code>.</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Configuration</li> <li>Documentation Symfony : Param\u00e8tres</li> </ul>"},{"location":"symfony/concepts/configuration/configuration-hierarchy/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/configuration-hierarchy/#symfony-configuration-parameters-services-routing-environment","title":"symfony #configuration #parameters #services #routing #environment","text":""},{"location":"symfony/concepts/configuration/getParameter%28%29/","title":"getParameter()","text":""},{"location":"symfony/concepts/configuration/getParameter%28%29/#documentation-getparameter-en-symfony","title":"Documentation : <code>getParameter()</code> en Symfony","text":""},{"location":"symfony/concepts/configuration/getParameter%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>getParameter()</code> est utilis\u00e9e pour r\u00e9cup\u00e9rer la valeur d'un param\u00e8tre de configuration dans Symfony. Ces param\u00e8tres peuvent \u00eatre d\u00e9finis dans les fichiers de configuration, comme <code>services.yaml</code>, ou via des variables d'environnement.</p>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function getParameter(string $name): mixed\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li><code>$name</code> (string) :     Le nom du param\u00e8tre \u00e0 r\u00e9cup\u00e9rer. Cela doit correspondre \u00e0 une cl\u00e9 d\u00e9finie dans les fichiers de configuration ou dans les variables d'environnement.</li> </ul>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#retour","title":"Retour","text":"<ul> <li>Retourne la valeur du param\u00e8tre associ\u00e9 au nom fourni. Le type retourn\u00e9 peut varier (string, array, bool, etc.), selon le type du param\u00e8tre configur\u00e9.</li> </ul>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/configuration/getParameter%28%29/#exemple-1-recuperer-un-parametre-simple","title":"Exemple 1 : R\u00e9cup\u00e9rer un param\u00e8tre simple","text":"<pre><code>public function index(): Response\n{\n    $param = $this-&gt;getParameter('app.site_name');\n\n    return new Response('Site Name: ' . $param);\n}\n</code></pre> <p>Dans cet exemple, on suppose que le param\u00e8tre <code>app.site_name</code> a \u00e9t\u00e9 d\u00e9fini dans le fichier <code>services.yaml</code> :</p> <pre><code>parameters:\n    app.site_name: 'Mon Site Web'\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#exemple-2-recuperer-un-parametre-dans-un-service","title":"Exemple 2 : R\u00e9cup\u00e9rer un param\u00e8tre dans un service","text":"<pre><code>class SomeService\n{\n    private $siteName;\n\n    public function __construct(private readonly ContainerInterface $container)\n    {\n        $this-&gt;siteName = $this-&gt;container-&gt;getParameter('app.site_name');\n    }\n\n    public function getSiteName(): string\n    {\n        return $this-&gt;siteName;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#exemple-3-recuperer-un-parametre-dans-un-controleur","title":"Exemple 3 : R\u00e9cup\u00e9rer un param\u00e8tre dans un contr\u00f4leur","text":"<pre><code>public function show(): Response\n{\n    $timezone = $this-&gt;getParameter('app.timezone');\n\n    return new Response('Timezone: ' . $timezone);\n}\n</code></pre> <p>Dans ce cas, le param\u00e8tre <code>app.timezone</code> pourrait \u00eatre d\u00e9fini dans le fichier de configuration comme suit :</p> <pre><code>parameters:\n    app.timezone: 'Europe/Paris'\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#exemple-4-recuperer-une-valeur-denvironnement","title":"Exemple 4 : R\u00e9cup\u00e9rer une valeur d'environnement","text":"<p>Si un param\u00e8tre est d\u00e9fini via une variable d'environnement dans <code>.env</code> ou dans le fichier <code>services.yaml</code>, vous pouvez le r\u00e9cup\u00e9rer de la m\u00eame mani\u00e8re :</p> <pre><code>parameters:\n    app.api_key: '%env(API_KEY)%'\n</code></pre> <pre><code>$apiKey = $this-&gt;getParameter('app.api_key');\n</code></pre> <p>Dans cet exemple, la valeur de <code>API_KEY</code> provient d'une variable d'environnement d\u00e9finie.</p>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/configuration/getParameter%28%29/#1-erreur-le-parametre-nexiste-pas","title":"1. Erreur : Le param\u00e8tre n'existe pas","text":"<p>Cause : Si vous tentez de r\u00e9cup\u00e9rer un param\u00e8tre qui n'existe pas, Symfony g\u00e9n\u00e9rera une exception <code>ParameterNotFoundException</code>. Solution : Avant de r\u00e9cup\u00e9rer un param\u00e8tre, assurez-vous qu'il est d\u00e9fini. Vous pouvez utiliser <code>getParameterBag()-&gt;has()</code> pour v\u00e9rifier la pr\u00e9sence du param\u00e8tre.</p> <pre><code>if ($this-&gt;container-&gt;hasParameter('app.site_name')) {\n    $siteName = $this-&gt;getParameter('app.site_name');\n} else {\n    throw new \\Exception('Le param\u00e8tre \"app.site_name\" n\\'existe pas.');\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#2-erreur-mauvais-type-ou-format-du-parametre","title":"2. Erreur : Mauvais type ou format du param\u00e8tre","text":"<p>Cause : Si vous vous attendez \u00e0 un param\u00e8tre sous un certain format ou type (ex : tableau, cha\u00eene de caract\u00e8res), et que le param\u00e8tre est mal configur\u00e9, cela peut g\u00e9n\u00e9rer des erreurs dans votre application. Solution : Validez et g\u00e9rez le type de param\u00e8tre avant de l'utiliser.</p> <pre><code>$param = $this-&gt;getParameter('app.some_param');\nif (!is_string($param)) {\n    throw new \\InvalidArgumentException('Le param\u00e8tre app.some_param doit \u00eatre une cha\u00eene.');\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Centraliser la configuration :     Utilisez <code>getParameter()</code> pour r\u00e9cup\u00e9rer des param\u00e8tres qui sont centralis\u00e9s dans des fichiers de configuration (comme <code>services.yaml</code>). Cela vous permet de maintenir un code propre et r\u00e9utilisable.</p> </li> <li> <p>G\u00e9rer les param\u00e8tres sensibles :     Utilisez les variables d'environnement pour les param\u00e8tres sensibles (comme les cl\u00e9s API) et assurez-vous qu'ils sont bien d\u00e9finis dans votre fichier <code>.env</code>.</p> </li> <li> <p>Utiliser les param\u00e8tres de mani\u00e8re coh\u00e9rente :     Il est pr\u00e9f\u00e9rable de stocker les param\u00e8tres de configuration comme des constantes ou dans un fichier centralis\u00e9, plut\u00f4t que d'en avoir des versions \u00e9parpill\u00e9es dans tout le code.</p> </li> <li> <p>V\u00e9rifications pr\u00e9alables :     Utilisez des v\u00e9rifications pour vous assurer qu'un param\u00e8tre est bien d\u00e9fini avant de l'utiliser, afin d'\u00e9viter des erreurs li\u00e9es \u00e0 des param\u00e8tres manquants.</p> </li> <li> <p>Optimisation des performances :     Les param\u00e8tres sont g\u00e9n\u00e9ralement mis en cache. Il n'y a pas besoin de vous inqui\u00e9ter des performances de <code>getParameter()</code>, car la r\u00e9cup\u00e9ration des param\u00e8tres depuis le conteneur de services est rapide, mais assurez-vous de ne pas appeler <code>getParameter()</code> dans des boucles fr\u00e9quentes si ce n'est pas n\u00e9cessaire.</p> </li> </ol>"},{"location":"symfony/concepts/configuration/getParameter%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony : Param\u00e8tres dans les fichiers de configuration</li> <li>Symfony : Gestion des variables d'environnement</li> </ul>"},{"location":"symfony/concepts/configuration/parameters-definition/","title":"D\u00e9finir et utiliser des param\u00e8tres globaux dans <code>parameters.yaml</code>","text":""},{"location":"symfony/concepts/configuration/parameters-definition/#description","title":"Description","text":"<p>Les param\u00e8tres globaux sont des valeurs que vous pouvez d\u00e9finir dans Symfony pour les utiliser \u00e0 travers toute l\u2019application. Ils sont particuli\u00e8rement utiles pour centraliser des configurations comme des cl\u00e9s API, des valeurs par d\u00e9faut, ou d\u2019autres constantes utilis\u00e9es fr\u00e9quemment.</p> <p>Ces param\u00e8tres sont d\u00e9finis dans le fichier <code>parameters.yaml</code> ou dans la section <code>parameters</code> de <code>services.yaml</code>.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#definir-des-parametres-globaux","title":"D\u00e9finir des param\u00e8tres globaux","text":""},{"location":"symfony/concepts/configuration/parameters-definition/#1-dans-parametersyaml","title":"1. Dans <code>parameters.yaml</code>","text":"<p>Le fichier <code>parameters.yaml</code> est l\u2019endroit principal pour d\u00e9finir des param\u00e8tres globaux.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple","title":"Exemple :","text":"<pre><code>parameters:\n    app.name: \"My Symfony App\"\n    app.version: \"1.0.0\"\n    app.default_language: \"en\"\n````\n\n---\n\n### **2. Dans `services.yaml`**\n\nSi vous n\u2019avez pas de fichier `parameters.yaml`, vous pouvez les d\u00e9finir directement dans `services.yaml` sous la cl\u00e9 `parameters`.\n\n#### Exemple :\n\n```yaml\nparameters:\n    app.api_key: \"123456\"\n    app.timezone: \"UTC\"\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#acceder-aux-parametres-globaux","title":"Acc\u00e9der aux param\u00e8tres globaux","text":""},{"location":"symfony/concepts/configuration/parameters-definition/#1-dans-un-controleur","title":"1. Dans un contr\u00f4leur","text":"<p>Vous pouvez utiliser la m\u00e9thode <code>getParameter()</code> pour acc\u00e9der \u00e0 un param\u00e8tre.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple_1","title":"Exemple :","text":"<pre><code>namespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ExampleController extends AbstractController {\n    public function index(): Response {\n        $appName = $this-&gt;getParameter('app.name');\n        $appVersion = $this-&gt;getParameter('app.version');\n\n        return new Response(\"App: $appName, Version: $appVersion\");\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#2-dans-un-service","title":"2. Dans un service","text":"<p>Pour utiliser un param\u00e8tre dans un service, il faut l\u2019injecter via <code>services.yaml</code>.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-de-configuration-dans-servicesyaml","title":"Exemple de configuration dans <code>services.yaml</code> :","text":"<pre><code>services:\n    App\\Service\\MyService:\n        arguments:\n            $apiKey: '%app.api_key%'\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-de-service","title":"Exemple de service :","text":"<pre><code>namespace App\\Service;\n\nclass MyService {\n    private $apiKey;\n\n    public function __construct(string $apiKey) {\n        $this-&gt;apiKey = $apiKey;\n    }\n\n    public function getApiKey(): string {\n        return $this-&gt;apiKey;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#utiliser-des-valeurs-dynamiques-avec-les-variables-denvironnement","title":"Utiliser des valeurs dynamiques avec les variables d'environnement","text":"<p>Les param\u00e8tres peuvent \u00eatre d\u00e9finis en fonction des variables d'environnement.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-dans-parametersyaml","title":"Exemple dans <code>parameters.yaml</code> :","text":"<pre><code>parameters:\n    app.database_url: '%env(DATABASE_URL)%'\n</code></pre> <p>Cela permet d'utiliser une valeur d\u00e9finie dans le fichier <code>.env</code> :</p> <pre><code>DATABASE_URL=mysql://user:password@127.0.0.1:3306/my_database\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#utiliser-des-parametres-avec-des-valeurs-par-defaut","title":"Utiliser des param\u00e8tres avec des valeurs par d\u00e9faut","text":"<p>Symfony permet de d\u00e9finir des valeurs par d\u00e9faut pour les param\u00e8tres.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-dans-parametersyaml_1","title":"Exemple dans <code>parameters.yaml</code> :","text":"<pre><code>parameters:\n    app.theme_color: ~ # Valeur par d\u00e9faut \"null\"\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-avec-un-test-de-valeur","title":"Exemple avec un test de valeur :","text":"<pre><code>$themeColor = $this-&gt;getParameter('app.theme_color') ?? 'blue';\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#verifier-les-parametres-globaux-definis","title":"V\u00e9rifier les param\u00e8tres globaux d\u00e9finis","text":"<p>Pour voir tous les param\u00e8tres globaux disponibles, utilisez la commande suivante :</p> <pre><code>php bin/console debug:container --parameters\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#exemple-pratique-centralisation-des-cles-api","title":"Exemple pratique : centralisation des cl\u00e9s API","text":"<p>Supposons que vous ayez plusieurs int\u00e9grations avec des services tiers n\u00e9cessitant des cl\u00e9s API.</p>"},{"location":"symfony/concepts/configuration/parameters-definition/#1-definition-des-parametres","title":"1. D\u00e9finition des param\u00e8tres","text":"<pre><code>parameters:\n    app.stripe_api_key: \"sk_test_1234567890\"\n    app.google_api_key: \"AIzaSyD-1234567890\"\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#2-utilisation-dans-un-service","title":"2. Utilisation dans un service","text":"<pre><code>services:\n    App\\Service\\StripeService:\n        arguments:\n            $apiKey: '%app.stripe_api_key%'\n\n    App\\Service\\GoogleService:\n        arguments:\n            $apiKey: '%app.google_api_key%'\n</code></pre>"},{"location":"symfony/concepts/configuration/parameters-definition/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Utilisez des noms explicites : Pr\u00e9fixez vos param\u00e8tres avec <code>app.</code> pour les diff\u00e9rencier des param\u00e8tres internes de Symfony.</li> <li>Centralisez les constantes : Les param\u00e8tres globaux doivent contenir uniquement les constantes de votre application, pas des donn\u00e9es temporaires ou calcul\u00e9es.</li> <li>Utilisez des variables d'environnement pour les donn\u00e9es sensibles : Ne stockez jamais de mots de passe ou cl\u00e9s API directement dans vos fichiers YAML. Pr\u00e9f\u00e9rez les variables d'environnement.</li> <li>Testez vos param\u00e8tres : Utilisez la commande <code>php bin/console debug:container --parameters</code> pour v\u00e9rifier les valeurs charg\u00e9es.</li> </ol>"},{"location":"symfony/concepts/configuration/parameters-definition/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[configuration-overview]] : Vue d'ensemble de la configuration dans Symfony.</li> <li>[[services-configuration]] : Injecter des param\u00e8tres dans les services.</li> <li>[[variable-environment]] : Utiliser des variables d'environnement avec <code>%env()%</code>.</li> <li>[[getParameter()]] : Acc\u00e9der aux param\u00e8tres globaux dans Symfony.</li> </ul>"},{"location":"symfony/concepts/configuration/parameters-definition/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Param\u00e8tres</li> <li>Documentation officielle : Variables d'environnement</li> </ul>"},{"location":"symfony/concepts/configuration/parameters-definition/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/parameters-definition/#symfony-configuration-parameters-globals-services-environment-variables","title":"symfony #configuration #parameters #globals #services #environment-variables","text":""},{"location":"symfony/concepts/configuration/routing-configuration/","title":"Configuration des routes dans Symfony","text":""},{"location":"symfony/concepts/configuration/routing-configuration/#description","title":"Description","text":"<p>Symfony utilise le composant Routing pour mapper les URLs aux contr\u00f4leurs. Les routes peuvent \u00eatre configur\u00e9es de plusieurs fa\u00e7ons : dans des fichiers YAML (<code>routes.yaml</code>), en utilisant des annotations directement dans les contr\u00f4leurs, ou encore dans des fichiers XML ou PHP.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#methodes-de-configuration-des-routes","title":"M\u00e9thodes de configuration des routes","text":""},{"location":"symfony/concepts/configuration/routing-configuration/#1-configuration-dans-routesyaml","title":"1. Configuration dans <code>routes.yaml</code>","text":"<p>Le fichier <code>routes.yaml</code> est utilis\u00e9 pour d\u00e9finir les routes de mani\u00e8re centralis\u00e9e.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple-basique","title":"Exemple basique :","text":"<pre><code>home:\n    path: /\n    controller: App\\Controller\\HomeController::index\n````\n\n- **`home`** : Nom unique de la route.\n- **`path`** : URL associ\u00e9e \u00e0 la route.\n- **`controller`** : M\u00e9thode du contr\u00f4leur appel\u00e9e lorsque cette route est acc\u00e9d\u00e9e.\n\n---\n\n### **2. Configuration par annotations**\n\nLes annotations permettent de d\u00e9finir des routes directement dans les contr\u00f4leurs.\n\n#### Exemple :\n\n```php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass HomeController extends AbstractController {\n    #[Route('/', name: 'home')]\n    public function index() {\n        return $this-&gt;render('home.html.twig');\n    }\n}\n</code></pre> <ul> <li><code>#[Route]</code> : Annotation d\u00e9finissant une route.</li> <li><code>name</code> : Nom de la route.</li> <li><code>path</code> : (optionnel) Si omis, Symfony utilise <code>name</code> comme chemin.</li> </ul>"},{"location":"symfony/concepts/configuration/routing-configuration/#3-configuration-par-fichiers-php","title":"3. Configuration par fichiers PHP","text":"<p>Les routes peuvent \u00eatre d\u00e9finies dans un fichier PHP.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple-dans-configroutesphp","title":"Exemple dans <code>config/routes.php</code> :","text":"<pre><code>use Symfony\\Component\\Routing\\RouteCollection;\nuse Symfony\\Component\\Routing\\Route;\n\n$routes = new RouteCollection();\n$routes-&gt;add('home', new Route('/', [\n    '_controller' =&gt; 'App\\Controller\\HomeController::index',\n]));\n\nreturn $routes;\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#parametres-dans-les-routes","title":"Param\u00e8tres dans les routes","text":""},{"location":"symfony/concepts/configuration/routing-configuration/#1-routes-dynamiques","title":"1. Routes dynamiques","text":"<p>Les routes peuvent contenir des param\u00e8tres dynamiques.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple-dans-routesyaml","title":"Exemple dans <code>routes.yaml</code> :","text":"<pre><code>product_show:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple-dannotation","title":"Exemple d\u2019annotation :","text":"<pre><code>#[Route('/product/{id}', name: 'product_show')]\npublic function show(int $id) {\n    return new Response(\"Produit ID : $id\");\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#2-contraintes-sur-les-parametres","title":"2. Contraintes sur les param\u00e8tres","text":"<p>Vous pouvez d\u00e9finir des contraintes pour les param\u00e8tres dynamiques en utilisant des expressions r\u00e9guli\u00e8res.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple","title":"Exemple :","text":"<pre><code>product_show:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    requirements:\n        id: '\\d+'\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#en-annotations","title":"En annotations :","text":"<pre><code>#[Route('/product/{id}', name: 'product_show', requirements: ['id' =&gt; '\\d+'])]\npublic function show(int $id) {\n    return new Response(\"Produit ID : $id\");\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#3-valeurs-par-defaut","title":"3. Valeurs par d\u00e9faut","text":"<p>D\u00e9finissez des valeurs par d\u00e9faut pour les param\u00e8tres.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple_1","title":"Exemple :","text":"<pre><code>product_show:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    defaults:\n        id: 1\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#en-annotations_1","title":"En annotations :","text":"<pre><code>#[Route('/product/{id}', name: 'product_show', defaults: ['id' =&gt; 1])]\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#routes-de-groupe-prefix","title":"Routes de groupe (prefix)","text":"<p>Symfony permet de regrouper les routes partageant un m\u00eame pr\u00e9fixe.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#1-dans-routesyaml","title":"1. Dans <code>routes.yaml</code>","text":"<pre><code>admin_:\n    path: /admin\n    controller: App\\Controller\\AdminController\n    prefix:\n        path: /dashboard\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#2-en-annotations","title":"2. En annotations","text":"<pre><code>#[Route('/admin', name: 'admin_')]\nclass AdminController extends AbstractController {\n    #[Route('/dashboard', name: 'dashboard')]\n    public function dashboard() {\n        return new Response(\"Admin Dashboard\");\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#importer-des-fichiers-de-routes","title":"Importer des fichiers de routes","text":"<p>Les routes peuvent \u00eatre divis\u00e9es en plusieurs fichiers et import\u00e9es.</p>"},{"location":"symfony/concepts/configuration/routing-configuration/#exemple-dans-routesyaml_1","title":"Exemple dans <code>routes.yaml</code> :","text":"<pre><code>imports:\n    - { resource: '../src/Controller/', type: annotation }\n    - { resource: 'custom_routes.yaml' }\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#tester-les-routes","title":"Tester les routes","text":""},{"location":"symfony/concepts/configuration/routing-configuration/#liste-des-routes-disponibles","title":"Liste des routes disponibles :","text":"<pre><code>php bin/console debug:router\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#verifier-une-route-specifique","title":"V\u00e9rifier une route sp\u00e9cifique :","text":"<pre><code>php bin/console debug:router &lt;nom_de_la_route&gt;\n</code></pre>"},{"location":"symfony/concepts/configuration/routing-configuration/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Utilisez les annotations pour des projets simples ou lorsque les routes sont directement li\u00e9es aux contr\u00f4leurs.</li> <li>Centralisez les routes globales dans <code>routes.yaml</code> pour les projets complexes.</li> <li>Utilisez des noms explicites pour vos routes pour \u00e9viter les conflits.</li> <li>Testez vos routes r\u00e9guli\u00e8rement en utilisant la commande <code>debug:router</code>.</li> </ol>"},{"location":"symfony/concepts/configuration/routing-configuration/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[configuration-overview]] : Vue d'ensemble de la configuration dans Symfony.</li> <li>[[parameters-definition]] : D\u00e9finir des param\u00e8tres globaux pour les routes.</li> <li>[[generateUrl()]] : G\u00e9n\u00e9rer des URLs dynamiques avec des routes.</li> <li>[[redirectToRoute()]] : Rediriger vers une route existante.</li> </ul>"},{"location":"symfony/concepts/configuration/routing-configuration/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Routing</li> <li>Annotations de routes</li> </ul>"},{"location":"symfony/concepts/configuration/routing-configuration/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/routing-configuration/#symfony-routing-annotations-yaml-routes-parameters-best-practices","title":"symfony #routing #annotations #yaml #routes #parameters #best-practices","text":""},{"location":"symfony/concepts/configuration/services-configuration/","title":"Configuration des services dans <code>services.yaml</code>","text":""},{"location":"symfony/concepts/configuration/services-configuration/#description","title":"Description","text":"<p>Le fichier <code>services.yaml</code> est l'un des principaux fichiers de configuration dans Symfony. Il est utilis\u00e9 pour d\u00e9finir, configurer et personnaliser les services de votre application. Les services sont des objets g\u00e9r\u00e9s par le conteneur de services Symfony.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#syntaxe-de-base","title":"Syntaxe de base","text":"<p>Un service est d\u00e9fini en utilisant la cl\u00e9 <code>services</code>. Vous pouvez sp\u00e9cifier les classes, arguments, et autres param\u00e8tres.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple-simple","title":"Exemple simple :","text":"<pre><code>services:\n    App\\Service\\MyService: ~\n````\n\nCela enregistre la classe `App\\Service\\MyService` comme un service dans le conteneur.\n\n---\n\n## Exemples d'utilisation\n\n### **1. Enregistrer un service avec des arguments**\n\nVous pouvez sp\u00e9cifier les arguments que le service attend dans son constructeur.\n\n#### Exemple :\n\n```yaml\nservices:\n    App\\Service\\MyService:\n        arguments:\n            $apiKey: '123456'\n            $debug: true\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple-de-classe","title":"Exemple de classe :","text":"<pre><code>namespace App\\Service;\n\nclass MyService {\n    private $apiKey;\n    private $debug;\n\n    public function __construct(string $apiKey, bool $debug) {\n        $this-&gt;apiKey = $apiKey;\n        $this-&gt;debug = $debug;\n    }\n\n    public function getApiKey(): string {\n        return $this-&gt;apiKey;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#2-utiliser-un-parametre-comme-argument","title":"2. Utiliser un param\u00e8tre comme argument","text":"<p>Vous pouvez utiliser des param\u00e8tres d\u00e9finis dans <code>parameters</code> ou des variables d\u2019environnement.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple-avec-un-parametre-defini","title":"Exemple avec un param\u00e8tre d\u00e9fini :","text":"<pre><code>parameters:\n    app.api_key: '123456'\n\nservices:\n    App\\Service\\MyService:\n        arguments:\n            $apiKey: '%app.api_key%'\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#3-autowire-activer-linjection-automatique","title":"3. Autowire : Activer l'injection automatique","text":"<p>L'injection automatique permet \u00e0 Symfony de deviner les d\u00e9pendances \u00e0 partir du type des arguments.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple","title":"Exemple :","text":"<pre><code>services:\n    App\\Service\\MyService:\n        autowire: true\n</code></pre> <p>Avec l\u2019option <code>autowire: true</code>, Symfony d\u00e9tecte et injecte automatiquement les services requis.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#4-public-vs-private","title":"4. Public vs Private","text":"<p>Par d\u00e9faut, tous les services sont priv\u00e9s, ce qui signifie qu'ils ne peuvent pas \u00eatre directement r\u00e9cup\u00e9r\u00e9s depuis le conteneur. Vous pouvez rendre un service public si n\u00e9cessaire.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple_1","title":"Exemple :","text":"<pre><code>services:\n    App\\Service\\MyService:\n        public: true\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#5-alias-de-service","title":"5. Alias de service","text":"<p>Vous pouvez cr\u00e9er un alias pour un service.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple_2","title":"Exemple :","text":"<pre><code>services:\n    App\\Service\\MyService: ~\n    my_service_alias: '@App\\Service\\MyService'\n</code></pre> <p>Cela vous permet d'acc\u00e9der au service via <code>my_service_alias</code>.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#6-configurer-un-service-existant","title":"6. Configurer un service existant","text":"<p>Symfony offre des services pr\u00e9d\u00e9finis que vous pouvez configurer ou surcharger.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple-configurer-le-service-mailer","title":"Exemple : Configurer le service <code>mailer</code>","text":"<pre><code>services:\n    mailer:\n        arguments:\n            $defaultFrom: 'noreply@example.com'\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#7-ajouter-une-methode-de-configuration-calls","title":"7. Ajouter une m\u00e9thode de configuration (calls)","text":"<p>Vous pouvez appeler une m\u00e9thode sp\u00e9cifique apr\u00e8s la cr\u00e9ation d\u2019un service.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple_3","title":"Exemple :","text":"<pre><code>services:\n    App\\Service\\MyService:\n        calls:\n            - method: 'setLogger'\n              arguments:\n                  - '@logger'\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple-de-classe_1","title":"Exemple de classe :","text":"<pre><code>namespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MyService {\n    private $logger;\n\n    public function setLogger(LoggerInterface $logger) {\n        $this-&gt;logger = $logger;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#8-inclure-dautres-fichiers-de-configuration","title":"8. Inclure d'autres fichiers de configuration","text":"<p>Vous pouvez diviser la configuration des services en plusieurs fichiers pour une meilleure organisation.</p>"},{"location":"symfony/concepts/configuration/services-configuration/#exemple_4","title":"Exemple :","text":"<p>Cr\u00e9er un fichier <code>config/services/custom_services.yaml</code> :</p> <pre><code>services:\n    App\\Service\\CustomService: ~\n</code></pre> <p>Inclure ce fichier dans <code>services.yaml</code> :</p> <pre><code>imports:\n    - { resource: 'services/custom_services.yaml' }\n</code></pre>"},{"location":"symfony/concepts/configuration/services-configuration/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>Utilisez l\u2019autowire et l\u2019autoconfigure pour r\u00e9duire la complexit\u00e9 de la configuration :</p> <p><code>yaml services:     _defaults:         autowire: true         autoconfigure: true         public: false</code></p> </li> <li> <p>Centralisez les param\u00e8tres globaux dans <code>parameters</code> pour les rendre faciles \u00e0 modifier.</p> </li> <li> <p>Utilisez des alias significatifs pour am\u00e9liorer la lisibilit\u00e9 du code.</p> </li> </ol>"},{"location":"symfony/concepts/configuration/services-configuration/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[configuration-overview]] : Introduction \u00e0 la configuration dans Symfony.</li> <li>[[get-parameter]] : Comment acc\u00e9der aux param\u00e8tres d\u00e9finis.</li> <li>[[environment-variables]] : Gestion des variables d\u2019environnement.</li> <li>[[parameter-management]] : Approfondir l\u2019utilisation des param\u00e8tres.</li> </ul>"},{"location":"symfony/concepts/configuration/services-configuration/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle des services</li> <li>Documentation sur les param\u00e8tres</li> </ul>"},{"location":"symfony/concepts/configuration/services-configuration/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/services-configuration/#symfony-services-configuration-yaml-parameters-autowire-services","title":"symfony #services #configuration #yaml #parameters #autowire #services","text":""},{"location":"symfony/concepts/configuration/variable-environment/","title":"G\u00e9rer les variables d'environnement avec <code>.env</code>","text":""},{"location":"symfony/concepts/configuration/variable-environment/#description","title":"Description","text":"<p>Les variables d'environnement permettent de configurer votre application Symfony en fonction de l'environnement dans lequel elle s'ex\u00e9cute (local, staging, production). Ces variables sont g\u00e9n\u00e9ralement stock\u00e9es dans des fichiers <code>.env</code> pour \u00e9viter de les inclure directement dans le code source.</p>"},{"location":"symfony/concepts/configuration/variable-environment/#fichiers-env-dans-symfony","title":"Fichiers <code>.env</code> dans Symfony","text":"<p>Symfony utilise plusieurs fichiers <code>.env</code> : - <code>.env</code> : Fichier principal contenant les valeurs par d\u00e9faut. - <code>.env.local</code> : Fichier pour les valeurs sp\u00e9cifiques \u00e0 l'environnement local (non versionn\u00e9). - <code>.env.prod</code> : Fichier pour les valeurs sp\u00e9cifiques \u00e0 la production. - <code>.env.test</code> : Fichier pour l'environnement de test.</p>"},{"location":"symfony/concepts/configuration/variable-environment/#definir-des-variables-dans-env","title":"D\u00e9finir des variables dans <code>.env</code>","text":""},{"location":"symfony/concepts/configuration/variable-environment/#exemple-basique","title":"Exemple basique :","text":"<pre><code># Fichier .env\nAPP_ENV=dev\nAPP_SECRET=your-secret-key\nDATABASE_URL=mysql://user:password@127.0.0.1:3306/my_database\n````\n\n---\n\n## Acc\u00e9der aux variables dans Symfony\n\n### **1. Depuis un contr\u00f4leur ou un service**\n\nVous pouvez acc\u00e9der aux variables d'environnement via la m\u00e9thode `getParameter()`.\n\n#### Exemple :\n\n```php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ExampleController extends AbstractController {\n    public function index(): Response {\n        $appEnv = $this-&gt;getParameter('env(APP_ENV)');\n        $appSecret = $this-&gt;getParameter('env(APP_SECRET)');\n\n        return new Response(\"Environment: $appEnv, Secret: $appSecret\");\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#2-injecter-une-variable-dans-un-service","title":"2. Injecter une variable dans un service","text":"<p>Vous pouvez injecter directement une variable d'environnement dans un service.</p>"},{"location":"symfony/concepts/configuration/variable-environment/#configuration-dans-servicesyaml","title":"Configuration dans <code>services.yaml</code> :","text":"<pre><code>services:\n    App\\Service\\MyService:\n        arguments:\n            $databaseUrl: '%env(DATABASE_URL)%'\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#exemple-de-service","title":"Exemple de service :","text":"<pre><code>namespace App\\Service;\n\nclass MyService {\n    private $databaseUrl;\n\n    public function __construct(string $databaseUrl) {\n        $this-&gt;databaseUrl = $databaseUrl;\n    }\n\n    public function getDatabaseUrl(): string {\n        return $this-&gt;databaseUrl;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#utiliser-des-valeurs-par-defaut","title":"Utiliser des valeurs par d\u00e9faut","text":"<p>Vous pouvez d\u00e9finir des valeurs par d\u00e9faut pour les variables non sp\u00e9cifi\u00e9es.</p>"},{"location":"symfony/concepts/configuration/variable-environment/#exemple-dans-env","title":"Exemple dans <code>.env</code> :","text":"<pre><code>DATABASE_PORT=3306\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#exemple-dutilisation","title":"Exemple d\u2019utilisation :","text":"<pre><code>parameters:\n    database_port: '%env(default:3306:DATABASE_PORT)%'\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#securite-des-variables-sensibles","title":"S\u00e9curit\u00e9 des variables sensibles","text":""},{"location":"symfony/concepts/configuration/variable-environment/#1-ne-jamais-inclure-env-en-production","title":"1. Ne jamais inclure <code>.env</code> en production","text":"<p>Utilisez un gestionnaire de variables d'environnement comme :</p> <ul> <li>Docker (via <code>docker-compose.yml</code>).</li> <li>Heroku (via leur interface d\u2019administration).</li> <li>AWS Parameter Store ou Vault.</li> </ul>"},{"location":"symfony/concepts/configuration/variable-environment/#2-exemple-avec-docker","title":"2. Exemple avec Docker","text":"<p>Fichier <code>docker-compose.yml</code> :</p> <pre><code>services:\n  app:\n    environment:\n      - APP_ENV=prod\n      - DATABASE_URL=mysql://user:password@db:3306/my_database\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#tester-les-variables-denvironnement","title":"Tester les variables d'environnement","text":""},{"location":"symfony/concepts/configuration/variable-environment/#afficher-toutes-les-variables-disponibles","title":"Afficher toutes les variables disponibles","text":"<p>Utilisez la commande suivante :</p> <pre><code>php bin/console debug:container --env-vars\n</code></pre>"},{"location":"symfony/concepts/configuration/variable-environment/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>Utilisez <code>.env.local</code> pour vos configurations locales.</p> <ul> <li>Ne versionnez jamais ce fichier pour \u00e9viter les conflits.</li> <li> <p>Ne stockez pas de secrets directement dans <code>.env</code>.</p> </li> <li> <p>Utilisez des solutions comme Symfony Secrets pour g\u00e9rer les informations sensibles :</p> <p><code>bash php bin/console secrets:set APP_SECRET php bin/console secrets:list</code></p> </li> </ul> </li> <li> <p>G\u00e9rez vos environnements correctement.</p> <ul> <li>D\u00e9finissez des valeurs sp\u00e9cifiques dans <code>.env.prod</code> ou <code>.env.test</code> pour les environnements appropri\u00e9s.</li> </ul> </li> </ol>"},{"location":"symfony/concepts/configuration/variable-environment/#liens-connexes","title":"Liens connexes","text":"<ul> <li>[[configuration-overview]] : Vue d\u2019ensemble de la configuration Symfony.</li> <li>[[services-configuration]] : Injecter des variables d\u2019environnement dans les services.</li> <li>[[get-parameter]] : Acc\u00e9der aux param\u00e8tres dans Symfony.</li> <li>[[security-configuration]] : Gestion des secrets avec Symfony.</li> </ul>"},{"location":"symfony/concepts/configuration/variable-environment/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Variables d'environnement</li> <li>Documentation Symfony Secrets</li> </ul>"},{"location":"symfony/concepts/configuration/variable-environment/#tags","title":"Tags","text":""},{"location":"symfony/concepts/configuration/variable-environment/#symfony-configuration-environment-variables-env-secrets-parameters","title":"symfony #configuration #environment-variables #env #secrets #parameters","text":""},{"location":"symfony/concepts/controllers/%28phpsfnconceptcontrollers%29/","title":"FOLDER","text":"<p>[[add()]] [[getSession()]] [[render()]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/controllers/add%28%29/","title":"M\u00e9thode add()","text":""},{"location":"symfony/concepts/controllers/add%28%29/#documentation-add-en-symfony","title":"Documentation : <code>add()</code> en Symfony","text":""},{"location":"symfony/concepts/controllers/add%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>add()</code> est utilis\u00e9e dans le contexte de formulaires Symfony pour ajouter des champs suppl\u00e9mentaires \u00e0 un formulaire. Cette m\u00e9thode est souvent utilis\u00e9e dans des types de formulaire personnalis\u00e9s pour ajouter des champs conditionnels ou des sous-formulaires \u00e0 un formulaire principal.</p>"},{"location":"symfony/concepts/controllers/add%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function add(string $name, string $type = 'text', array $options = [])\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li> <p><code>$name</code> (string) :     Le nom du champ \u00e0 ajouter au formulaire. C'est la cl\u00e9 par laquelle le champ sera accessible dans les donn\u00e9es soumises du formulaire.</p> </li> <li> <p><code>$type</code> (string, optionnel) :     Le type de champ \u00e0 ajouter (par exemple <code>TextType</code>, <code>ChoiceType</code>, <code>IntegerType</code>, etc.). Ce param\u00e8tre est optionnel et prend la valeur <code>'text'</code> par d\u00e9faut.</p> </li> <li> <p><code>$options</code> (array, optionnel) :     Un tableau d'options pour configurer le champ. Cela peut inclure des param\u00e8tres comme <code>label</code>, <code>required</code>, <code>attr</code>, <code>choices</code> (pour des menus d\u00e9roulants), etc.</p> </li> </ul>"},{"location":"symfony/concepts/controllers/add%28%29/#retour","title":"Retour","text":"<p>La m\u00e9thode <code>add()</code> retourne l'objet formulaire (une instance de <code>FormBuilderInterface</code>), ce qui permet de cha\u00eener plusieurs appels \u00e0 <code>add()</code> pour ajouter plusieurs champs \u00e0 un formulaire.</p>"},{"location":"symfony/concepts/controllers/add%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/controllers/add%28%29/#exemple-1-ajouter-un-champ-texte-simple","title":"Exemple 1 : Ajouter un champ texte simple","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n$form = $this-&gt;createFormBuilder()\n    -&gt;add('first_name', TextType::class, [\n        'label' =&gt; 'First Name',\n        'required' =&gt; true,\n    ])\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#exemple-2-ajouter-un-champ-de-type-choicetype-selection","title":"Exemple 2 : Ajouter un champ de type <code>ChoiceType</code> (s\u00e9lection)","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\n\n$form = $this-&gt;createFormBuilder()\n    -&gt;add('gender', ChoiceType::class, [\n        'label' =&gt; 'Gender',\n        'choices' =&gt; [\n            'Male' =&gt; 'M',\n            'Female' =&gt; 'F',\n            'Other' =&gt; 'O',\n        ],\n        'required' =&gt; true,\n    ])\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#exemple-3-ajouter-un-champ-avec-des-options-personnalisees","title":"Exemple 3 : Ajouter un champ avec des options personnalis\u00e9es","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n$form = $this-&gt;createFormBuilder()\n    -&gt;add('address', TextType::class, [\n        'label' =&gt; 'Address',\n        'attr' =&gt; ['class' =&gt; 'address-field'],\n        'required' =&gt; false,\n        'placeholder' =&gt; 'Enter your address',\n    ])\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#exemple-4-ajouter-un-sous-formulaire","title":"Exemple 4 : Ajouter un sous-formulaire","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\n\n$form = $this-&gt;createFormBuilder()\n    -&gt;add('username', TextType::class)\n    -&gt;add('email', EmailType::class)\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#exemple-5-ajouter-un-champ-conditionnel","title":"Exemple 5 : Ajouter un champ conditionnel","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n$form = $this-&gt;createFormBuilder()\n    -&gt;add('first_name', TextType::class)\n    -&gt;add('last_name', TextType::class, [\n        'required' =&gt; false,\n        'attr' =&gt; ['class' =&gt; 'last-name-field'],\n    ])\n    -&gt;add('is_full_name', CheckboxType::class, [\n        'label' =&gt; 'Full Name',\n        'required' =&gt; false,\n        'mapped' =&gt; false,\n    ])\n    -&gt;getForm();\n\n// Modifier dynamiquement les champs bas\u00e9s sur la condition\nif ($form-&gt;get('is_full_name')-&gt;getData()) {\n    $form-&gt;add('middle_name', TextType::class);\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/controllers/add%28%29/#1-erreur-mauvais-type-de-champ","title":"1. Erreur : Mauvais type de champ","text":"<p>Cause : Si vous utilisez un type de champ incorrect ou un type non pris en charge, Symfony renverra une erreur. Solution : Assurez-vous que le type de champ que vous utilisez existe et que vous l'importez correctement.</p> <pre><code>$form = $this-&gt;createFormBuilder()\n    -&gt;add('age', 'invalidType')  // Cette ligne g\u00e9n\u00e8re une erreur\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#2-erreur-oublier-dajouter-des-options-necessaires","title":"2. Erreur : Oublier d'ajouter des options n\u00e9cessaires","text":"<p>Cause : Si vous oubliez d'ajouter des options requises (par exemple, <code>choices</code> pour un <code>ChoiceType</code>), cela peut entra\u00eener un comportement inattendu ou une erreur de validation. Solution : V\u00e9rifiez si toutes les options requises sont d\u00e9finies, comme <code>choices</code> pour un champ <code>ChoiceType</code>.</p> <pre><code>$form = $this-&gt;createFormBuilder()\n    -&gt;add('color', ChoiceType::class)  // Erreur si 'choices' n'est pas d\u00e9fini\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Chainer les appels <code>add()</code> :     Utilisez la m\u00e9thode <code>add()</code> de mani\u00e8re fluide pour construire un formulaire de mani\u00e8re dynamique. Cela permet de mieux organiser votre code et de maintenir la lisibilit\u00e9.</p> </li> <li> <p>Utiliser des objets pour des options complexes :     Pour des options complexes comme <code>choices</code>, il est pr\u00e9f\u00e9rable de passer un tableau d'options avec des objets plut\u00f4t que des cha\u00eenes de caract\u00e8res simples.</p> </li> </ol> <pre><code>$form = $this-&gt;createFormBuilder()\n    -&gt;add('category', ChoiceType::class, [\n        'choices' =&gt; [\n            'Category 1' =&gt; new Category('Category 1'),\n            'Category 2' =&gt; new Category('Category 2'),\n        ],\n    ])\n    -&gt;getForm();\n</code></pre> <ol> <li> <p>Validation dynamique avec des conditions :     Vous pouvez ajouter ou modifier des champs dans un formulaire en fonction des donn\u00e9es soumises ou d'une logique m\u00e9tier. Cela est particuli\u00e8rement utile pour les formulaires conditionnels.</p> </li> <li> <p>Personnalisation des champs avec des attributs HTML :     Utilisez l'option <code>attr</code> pour ajouter des classes CSS, des attributs <code>data-*</code>, ou d'autres attributs HTML aux champs de formulaire. Cela peut \u00eatre tr\u00e8s utile pour la personnalisation des styles ou l'int\u00e9gration avec des biblioth\u00e8ques JavaScript.</p> </li> </ol> <pre><code>$form = $this-&gt;createFormBuilder()\n    -&gt;add('first_name', TextType::class, [\n        'attr' =&gt; ['class' =&gt; 'custom-class'],\n    ])\n    -&gt;getForm();\n</code></pre>"},{"location":"symfony/concepts/controllers/add%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Forms Documentation</li> <li>Form Builder Class</li> </ul>"},{"location":"symfony/concepts/controllers/getSession%28%29/","title":"M\u00e9thode getSession()","text":""},{"location":"symfony/concepts/controllers/getSession%28%29/#documentation-getsession-en-symfony","title":"Documentation : <code>getSession()</code> en Symfony","text":""},{"location":"symfony/concepts/controllers/getSession%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>getSession()</code> permet d'obtenir l'instance de la session de l'application Symfony. Elle est utilis\u00e9e pour acc\u00e9der, manipuler et stocker des donn\u00e9es dans la session utilisateur pendant sa navigation. La session permet de maintenir l'\u00e9tat de l'application \u00e0 travers les requ\u00eates HTTP.</p>"},{"location":"symfony/concepts/controllers/getSession%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function getSession(): SessionInterface\n</code></pre>"},{"location":"symfony/concepts/controllers/getSession%28%29/#parametres","title":"Param\u00e8tres","text":"<p>Aucun param\u00e8tre n'est attendu pour cette m\u00e9thode. Elle retourne une instance de l'interface <code>SessionInterface</code>, permettant d'interagir avec la session.</p>"},{"location":"symfony/concepts/controllers/getSession%28%29/#retour","title":"Retour","text":"<ul> <li>Retour : Retourne une instance de <code>SessionInterface</code>. Cela permet d'acc\u00e9der \u00e0 toutes les fonctionnalit\u00e9s de la session, comme la gestion des donn\u00e9es, des flash messages, et plus encore.</li> </ul>"},{"location":"symfony/concepts/controllers/getSession%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/controllers/getSession%28%29/#exemple-1-recuperer-la-session-et-stocker-une-valeur","title":"Exemple 1 : R\u00e9cup\u00e9rer la session et stocker une valeur","text":"<pre><code>public function someAction(Request $request)\n{\n    // R\u00e9cup\u00e9rer la session\n    $session = $request-&gt;getSession();\n\n    // Stocker une donn\u00e9e dans la session\n    $session-&gt;set('username', 'JohnDoe');\n\n    // Acc\u00e9der \u00e0 la donn\u00e9e de session\n    $username = $session-&gt;get('username');\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/getSession%28%29/#exemple-2-verifier-si-une-donnee-est-definie-dans-la-session","title":"Exemple 2 : V\u00e9rifier si une donn\u00e9e est d\u00e9finie dans la session","text":"<pre><code>public function checkSessionData(Request $request)\n{\n    $session = $request-&gt;getSession();\n\n    // V\u00e9rifier si une donn\u00e9e de session existe\n    if ($session-&gt;has('username')) {\n        $username = $session-&gt;get('username');\n        return new Response(\"Utilisateur : $username\");\n    }\n\n    return new Response(\"Aucun utilisateur connect\u00e9\");\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/getSession%28%29/#exemple-3-supprimer-une-donnee-de-session","title":"Exemple 3 : Supprimer une donn\u00e9e de session","text":"<pre><code>public function removeFromSession(Request $request)\n{\n    $session = $request-&gt;getSession();\n\n    // Supprimer une donn\u00e9e de session\n    $session-&gt;remove('username');\n\n    return new Response('Donn\u00e9e supprim\u00e9e de la session');\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/getSession%28%29/#exemple-4-gerer-les-flash-messages","title":"Exemple 4 : G\u00e9rer les flash messages","text":"<pre><code>public function addFlashMessage(Request $request)\n{\n    $session = $request-&gt;getSession();\n\n    // Ajouter un flash message\n    $session-&gt;getFlashBag()-&gt;add('notice', 'Op\u00e9ration r\u00e9ussie!');\n\n    return $this-&gt;redirectToRoute('homepage');\n}\n\npublic function showFlashMessages(Request $request)\n{\n    $session = $request-&gt;getSession();\n\n    // R\u00e9cup\u00e9rer les flash messages\n    $messages = $session-&gt;getFlashBag()-&gt;get('notice');\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/getSession%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/controllers/getSession%28%29/#1-erreur-session-non-disponible","title":"1. Erreur : Session non disponible","text":"<p>Cause : Si vous tentez d'utiliser <code>getSession()</code> sans que la session soit d\u00e9marr\u00e9e, cela peut entra\u00eener une erreur. Solution : Assurez-vous que la session est activ\u00e9e dans votre configuration Symfony (cela est g\u00e9n\u00e9ralement fait par d\u00e9faut). Vous pouvez activer la gestion des sessions en configurant le service <code>session</code> dans votre fichier <code>services.yaml</code>.</p>"},{"location":"symfony/concepts/controllers/getSession%28%29/#2-erreur-detournement-de-la-session","title":"2. Erreur : D\u00e9tournement de la session","text":"<p>Cause : Si la session est mal manipul\u00e9e, comme par exemple une donn\u00e9e non s\u00e9curis\u00e9e qui pourrait \u00eatre manipul\u00e9e directement par un utilisateur malveillant, cela pourrait entra\u00eener des failles de s\u00e9curit\u00e9. Solution : Toujours utiliser les fonctions de session de Symfony pour g\u00e9rer les donn\u00e9es de mani\u00e8re s\u00e9curis\u00e9e (comme <code>get()</code>, <code>set()</code>, <code>has()</code>, <code>remove()</code>, etc.).</p>"},{"location":"symfony/concepts/controllers/getSession%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>S\u00e9curisation des donn\u00e9es de session :     Il est important de toujours v\u00e9rifier les donn\u00e9es sensibles avant de les stocker dans la session. Ne stockez pas d'informations sensibles (comme des mots de passe ou des informations bancaires) sans chiffrer ou s\u00e9curiser correctement les donn\u00e9es.</p> </li> <li> <p>Utilisation avec des flash messages :     Les flash messages sont une mani\u00e8re pratique d'afficher des notifications \u00e0 l'utilisateur entre deux requ\u00eates. Utilisez-les pour des messages temporaires comme des confirmations ou des alertes.</p> </li> </ol> <pre><code>// Ajouter un message flash\n$session-&gt;getFlashBag()-&gt;add('success', 'Enregistrement effectu\u00e9 avec succ\u00e8s');\n</code></pre> <ol> <li> <p>Manipulation des donn\u00e9es de session :     Vous pouvez ajouter, supprimer, ou v\u00e9rifier des donn\u00e9es dans la session de mani\u00e8re tr\u00e8s simple. Utilisez les m\u00e9thodes comme <code>set()</code>, <code>get()</code>, <code>remove()</code>, et <code>has()</code> pour g\u00e9rer l'\u00e9tat de la session.</p> </li> <li> <p>Ne pas abuser de la session :     \u00c9vitez de surcharger la session avec trop de donn\u00e9es. La session est destin\u00e9e \u00e0 stocker uniquement des informations essentielles entre les diff\u00e9rentes requ\u00eates.</p> </li> <li> <p>Gestion des sessions avec diff\u00e9rents environnements :     Si votre application est d\u00e9ploy\u00e9e sur plusieurs serveurs ou dans un environnement avec un load balancer, assurez-vous que la gestion de la session est correctement configur\u00e9e (par exemple en utilisant des sessions partag\u00e9es via une base de donn\u00e9es ou Redis).</p> </li> </ol>"},{"location":"symfony/concepts/controllers/getSession%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Sessions Documentation</li> <li>Symfony Flash Messages</li> <li>Symfony Request Object</li> </ul>"},{"location":"symfony/concepts/controllers/render%28%29/","title":"M\u00e9thode render()","text":""},{"location":"symfony/concepts/controllers/render%28%29/#documentation-render-en-symfony","title":"Documentation : <code>render()</code> en Symfony","text":""},{"location":"symfony/concepts/controllers/render%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>render()</code> est utilis\u00e9e dans un contr\u00f4leur Symfony pour retourner une r\u00e9ponse HTML en rendant un template Twig avec des variables pass\u00e9es en contexte.</p>"},{"location":"symfony/concepts/controllers/render%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>render(string $view, array $parameters = [], Response $response = null): Response\n</code></pre>"},{"location":"symfony/concepts/controllers/render%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$view</code> (string) :     Le chemin du fichier template Twig, relatif au r\u00e9pertoire <code>templates/</code>.     Exemple : <code>\"base.html.twig\"</code>, <code>\"user/profile.html.twig\"</code></p> </li> <li> <p><code>$parameters</code> (array) :     Les variables pass\u00e9es au template. Cl\u00e9s (string) \u2192 Noms des variables accessibles dans Twig.     Exemple : <code>['name' =&gt; 'John', 'age' =&gt; 30]</code></p> </li> <li> <p><code>$response</code> (Response|null) :     Une instance optionnelle de <code>Symfony\\Component\\HttpFoundation\\Response</code> pour personnaliser la r\u00e9ponse HTTP.</p> </li> </ol>"},{"location":"symfony/concepts/controllers/render%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/controllers/render%28%29/#exemple-simple-rendre-un-template","title":"Exemple simple : Rendre un template","text":"<pre><code>public function index(): Response\n{\n    return $this-&gt;render('home/index.html.twig');\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/render%28%29/#passer-des-variables-au-template","title":"Passer des variables au template","text":"<pre><code>public function userProfile(): Response\n{\n    $user = [\n        'name' =&gt; 'John Doe',\n        'email' =&gt; 'john.doe@example.com',\n    ];\n    return $this-&gt;render('user/profile.html.twig', [\n        'user' =&gt; $user,\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/render%28%29/#utiliser-un-response-personnalise","title":"Utiliser un <code>Response</code> personnalis\u00e9","text":"<pre><code>public function customResponse(): Response\n{\n    $response = new Response();\n    $response-&gt;headers-&gt;set('X-Custom-Header', 'Value');\n    return $this-&gt;render('custom/page.html.twig', [], $response);\n}\n</code></pre>"},{"location":"symfony/concepts/controllers/render%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/controllers/render%28%29/#1-template-introuvable","title":"1. Template introuvable","text":"<p>Erreur :</p> <pre><code>Unable to find template \"nonexistent.html.twig\".\n</code></pre> <p>Solution :</p> <ul> <li>V\u00e9rifiez le chemin du fichier. Il doit \u00eatre relatif \u00e0 <code>templates/</code>.</li> <li>Assurez-vous que le fichier existe.</li> </ul>"},{"location":"symfony/concepts/controllers/render%28%29/#2-variable-non-definie-dans-twig","title":"2. Variable non d\u00e9finie dans Twig","text":"<p>Erreur :</p> <pre><code>Variable \"user\" does not exist.\n</code></pre> <p>Solution :</p> <ul> <li>V\u00e9rifiez que la variable est bien pass\u00e9e dans le tableau <code>$parameters</code>.</li> <li> <p>Exemple :</p> <p><code>php return $this-&gt;render('user/profile.html.twig', ['user' =&gt; $user]);</code></p> </li> </ul>"},{"location":"symfony/concepts/controllers/render%28%29/#3-problemes-de-syntaxe-twig","title":"3. Probl\u00e8mes de syntaxe Twig","text":"<p>Erreur :</p> <pre><code>Unexpected token \"endblock\" of value \"endblock\".\n</code></pre> <p>Solution :</p> <ul> <li>V\u00e9rifiez les balises ouvertes/ferm\u00e9es dans votre fichier Twig.</li> <li> <p>Exemple correct :</p> <p><code>twig {% block content %}     &lt;p&gt;Hello, {{ name }}&lt;/p&gt; {% endblock %}</code></p> </li> </ul>"},{"location":"symfony/concepts/controllers/render%28%29/#conseils","title":"Conseils","text":"<ul> <li>Organisation des templates : Placez les templates dans des dossiers bien structur\u00e9s (<code>templates/home</code>, <code>templates/user</code>, etc.).</li> <li>R\u00e9utilisation des fragments : Utilisez <code>{% include %}</code> ou <code>{% extends %}</code> pour factoriser le code Twig.</li> <li>Debugging : Activez le Web Profiler pour afficher les templates rendus et le contexte des variables.</li> <li>Performance : Activez le cache Twig en production.</li> </ul>"},{"location":"symfony/concepts/controllers/render%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Symfony render()</li> <li>Twig Documentation</li> </ul>"},{"location":"symfony/concepts/event_dispatcher/%28phpsfneventdisp%29/","title":"FOLDER","text":"<p>[[dispatch()]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/","title":"dispatch()","text":""},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#documentation-dispatch-en-symfony","title":"Documentation : <code>dispatch()</code> en Symfony","text":""},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>dispatch()</code> en Symfony est utilis\u00e9e pour envoyer des \u00e9v\u00e9nements \u00e0 un gestionnaire d'\u00e9v\u00e9nements (Event Dispatcher). Cela permet de d\u00e9clencher des actions sp\u00e9cifiques lorsque certains \u00e9v\u00e9nements se produisent dans l'application. C'est un \u00e9l\u00e9ment central du syst\u00e8me de gestion des \u00e9v\u00e9nements dans Symfony.</p>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function dispatch($event, string $eventName = null)\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li> <p><code>$event</code> (object) :     L'objet \u00e9v\u00e9nement \u00e0 envoyer. Cet objet peut \u00eatre une instance d'une classe sp\u00e9cifique que vous avez d\u00e9finie pour l'\u00e9v\u00e9nement ou un objet g\u00e9n\u00e9rique comme <code>Symfony\\Component\\EventDispatcher\\GenericEvent</code>.</p> </li> <li> <p><code>$eventName</code> (string, optionnel) :     Le nom de l'\u00e9v\u00e9nement. Si aucun nom n'est donn\u00e9, Symfony utilise le nom de la classe de l'\u00e9v\u00e9nement. Ce param\u00e8tre est g\u00e9n\u00e9ralement utilis\u00e9 pour des \u00e9v\u00e9nements personnalis\u00e9s.</p> </li> </ul>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#retour","title":"Retour","text":"<p>La m\u00e9thode retourne l'objet \u00e9v\u00e9nement envoy\u00e9 apr\u00e8s avoir \u00e9t\u00e9 trait\u00e9 par les auditeurs de l'\u00e9v\u00e9nement.</p>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#exemple-1-utiliser-dispatch-avec-un-evenement-simple","title":"Exemple 1 : Utiliser <code>dispatch()</code> avec un \u00e9v\u00e9nement simple","text":"<pre><code>use Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\n$dispatcher = new EventDispatcher();\n\n// Cr\u00e9er un \u00e9v\u00e9nement\n$event = new GenericEvent($object, ['param1' =&gt; 'value1']);\n\n// Dispatcher l'\u00e9v\u00e9nement\n$dispatcher-&gt;dispatch($event, 'my.custom_event');\n\n// Exemple de traitement de l'\u00e9v\u00e9nement\n$dispatcher-&gt;addListener('my.custom_event', function (GenericEvent $event) {\n    $data = $event-&gt;getArguments(); // R\u00e9cup\u00e9rer les param\u00e8tres de l'\u00e9v\u00e9nement\n    echo 'Param1: ' . $data['param1']; // Affiche 'Param1: value1'\n});\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#exemple-2-dispatch-dun-evenement-avec-un-nom-personnalise","title":"Exemple 2 : Dispatch d'un \u00e9v\u00e9nement avec un nom personnalis\u00e9","text":"<pre><code>use Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\n$dispatcher = new EventDispatcher();\n$event = new GenericEvent($object);\n\n// Ajouter un auditeur pour un \u00e9v\u00e9nement sp\u00e9cifique\n$dispatcher-&gt;addListener('user.registered', function (GenericEvent $event) {\n    echo 'Un nouvel utilisateur a \u00e9t\u00e9 inscrit !';\n});\n\n// Dispatcher l'\u00e9v\u00e9nement avec un nom personnalis\u00e9\n$dispatcher-&gt;dispatch($event, 'user.registered');\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#exemple-3-utiliser-dispatch-avec-des-evenements-personnalises","title":"Exemple 3 : Utiliser <code>dispatch()</code> avec des \u00e9v\u00e9nements personnalis\u00e9s","text":"<pre><code>use Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n// D\u00e9finir un \u00e9v\u00e9nement personnalis\u00e9\nclass UserRegisteredEvent extends Event\n{\n    public const NAME = 'user.registered';\n\n    private $username;\n\n    public function __construct(string $username)\n    {\n        $this-&gt;username = $username;\n    }\n\n    public function getUsername(): string\n    {\n        return $this-&gt;username;\n    }\n}\n\n// Cr\u00e9ation du dispatcher et de l'\u00e9v\u00e9nement personnalis\u00e9\n$dispatcher = new EventDispatcher();\n$event = new UserRegisteredEvent('JohnDoe');\n\n// Ajouter un auditeur pour cet \u00e9v\u00e9nement\n$dispatcher-&gt;addListener(UserRegisteredEvent::NAME, function (UserRegisteredEvent $event) {\n    echo 'Nouvel utilisateur enregistr\u00e9 : ' . $event-&gt;getUsername();\n});\n\n// Dispatcher l'\u00e9v\u00e9nement\n$dispatcher-&gt;dispatch($event, UserRegisteredEvent::NAME);\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#1-erreur-mauvais-type-devenement","title":"1. Erreur : Mauvais type d'\u00e9v\u00e9nement","text":"<p>Cause : Si vous tentez de dispatcher un \u00e9v\u00e9nement qui ne contient pas les bonnes donn\u00e9es ou qui n'est pas une instance d'un objet \u00e9v\u00e9nement valide, une erreur peut se produire. Solution : Assurez-vous que l'\u00e9v\u00e9nement est un objet valide et qu'il impl\u00e9mente correctement les m\u00e9thodes n\u00e9cessaires (par exemple, pour r\u00e9cup\u00e9rer des donn\u00e9es).</p> <pre><code>// Exemple d'\u00e9v\u00e9nement invalide\ntry {\n    $dispatcher-&gt;dispatch('invalid_event', 'custom.event');\n} catch (\\Exception $e) {\n    // G\u00e9rer l'erreur\n    echo 'Erreur d\\'\u00e9v\u00e9nement : ' . $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#2-erreur-evenement-non-ecoute","title":"2. Erreur : \u00c9v\u00e9nement non \u00e9cout\u00e9","text":"<p>Cause : Si vous dispatcher un \u00e9v\u00e9nement qui n'a pas de gestionnaire (auditeur) associ\u00e9, rien ne se passe. Solution : V\u00e9rifiez que des auditeurs sont bien ajout\u00e9s pour cet \u00e9v\u00e9nement.</p> <pre><code>$dispatcher-&gt;dispatch($event, 'non_existing_event'); // Aucun auditeur pour cet \u00e9v\u00e9nement\n</code></pre>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Utilisez des \u00e9v\u00e9nements d\u00e9di\u00e9s et bien nomm\u00e9s :     Utilisez des noms d'\u00e9v\u00e9nements clairs et significatifs. Par exemple, pour un \u00e9v\u00e9nement li\u00e9 \u00e0 un utilisateur inscrit, pr\u00e9f\u00e9rez un nom comme <code>user.registered</code> plut\u00f4t qu'un nom g\u00e9n\u00e9rique comme <code>event1</code>.</p> </li> <li> <p>Utilisation d'\u00e9v\u00e9nements personnalis\u00e9s :     Cr\u00e9ez des classes d'\u00e9v\u00e9nements personnalis\u00e9es pour organiser les donn\u00e9es sp\u00e9cifiques \u00e0 l'\u00e9v\u00e9nement, plut\u00f4t que de transmettre des donn\u00e9es via un \u00e9v\u00e9nement g\u00e9n\u00e9rique.</p> </li> <li> <p>Testez les auditeurs d'\u00e9v\u00e9nements :     Assurez-vous que tous les auditeurs d'\u00e9v\u00e9nements sont test\u00e9s pour \u00e9viter de ne pas traiter correctement un \u00e9v\u00e9nement. Par exemple, v\u00e9rifiez qu'un \u00e9v\u00e9nement ne tombe pas dans un \u00e9tat inattendu lorsque l'auditeur ne s'ex\u00e9cute pas comme pr\u00e9vu.</p> </li> <li> <p>Optimisation des performances :     Si vous dispatch un \u00e9v\u00e9nement qui est \u00e9cout\u00e9 par plusieurs auditeurs, veillez \u00e0 minimiser la charge de travail dans les auditeurs. Chaque auditeur ajout\u00e9 au processus augmente la latence de l'\u00e9v\u00e9nement.</p> </li> <li> <p>Gestion des \u00e9v\u00e9nements asynchrones :     Dans des cas plus complexes, vous pouvez \u00e9galement g\u00e9rer des \u00e9v\u00e9nements de mani\u00e8re asynchrone avec des files d'attente ou des services de gestion d'\u00e9v\u00e9nements externes pour mieux contr\u00f4ler les performances.</p> </li> </ol>"},{"location":"symfony/concepts/event_dispatcher/dispatch%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Event Dispatcher</li> <li>Symfony Events Documentation</li> </ul>"},{"location":"symfony/concepts/form/%28phpsfnconceptsform%29/","title":"FOLDER","text":"<p>[[createForm()]] [[form_end()]] [[form_row()]] [[form_start()]] [[createForm()]] [[liste d\u00e9roulante]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/form/createForm%28%29/","title":"createForm()","text":""},{"location":"symfony/concepts/form/createForm%28%29/#documentation-createform-en-symfony","title":"Documentation : <code>createForm()</code> en Symfony","text":""},{"location":"symfony/concepts/form/createForm%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>createForm()</code> est utilis\u00e9e pour cr\u00e9er un formulaire Symfony bas\u00e9 sur une classe de formulaire ou un type de champ. Elle permet de g\u00e9n\u00e9rer un objet formulaire \u00e0 manipuler dans le contr\u00f4leur et de l\u2019afficher dans une vue Twig.</p>"},{"location":"symfony/concepts/form/createForm%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>createForm(string|FormTypeInterface $type, mixed $data = null, array $options = []): FormInterface\n</code></pre>"},{"location":"symfony/concepts/form/createForm%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$type</code> (string|FormTypeInterface) :     La classe de formulaire ou le type de champ que vous voulez utiliser.     Exemples :</p> <ul> <li><code>UserType::class</code> (une classe de formulaire personnalis\u00e9e).</li> <li><code>TextType::class</code> (un type de champ natif).</li> <li><code>$data</code> (mixed) (optionnel) : Les donn\u00e9es initiales \u00e0 associer au formulaire. Souvent, une instance d\u2019une entit\u00e9. Exemple : <code>new User()</code> pour un formulaire de cr\u00e9ation d'utilisateur.</li> </ul> </li> <li> <p><code>$options</code> (array) (optionnel) :     Options suppl\u00e9mentaires pour configurer le formulaire.     Exemple : <code>['method' =&gt; 'POST']</code>, <code>['attr' =&gt; ['class' =&gt; 'custom-form']]</code>.</p> </li> </ol>"},{"location":"symfony/concepts/form/createForm%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/form/createForm%28%29/#exemple-simple-formulaire-avec-une-classe-personnalisee","title":"Exemple simple : Formulaire avec une classe personnalis\u00e9e","text":"<p>Classe de formulaire :</p> <pre><code>// src/Form/UserType.php\nnamespace App\\Form;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass UserType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            -&gt;add('name', TextType::class, ['label' =&gt; 'Nom']);\n    }\n}\n</code></pre> <p>Contr\u00f4leur :</p> <pre><code>public function newUser(Request $request): Response\n{\n    $form = $this-&gt;createForm(UserType::class);\n\n    $form-&gt;handleRequest($request);\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        // Traitez les donn\u00e9es ici\n    }\n\n    return $this-&gt;render('user/new.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre> <p>Template Twig :</p> <pre><code>{{ form_start(form) }}\n    {{ form_widget(form) }}\n    &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/createForm%28%29/#exemple-formulaire-avec-donnees-initiales","title":"Exemple : Formulaire avec donn\u00e9es initiales","text":"<pre><code>public function editUser(Request $request, User $user): Response\n{\n    $form = $this-&gt;createForm(UserType::class, $user);\n\n    $form-&gt;handleRequest($request);\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        // Sauvegardez les modifications\n    }\n\n    return $this-&gt;render('user/edit.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/form/createForm%28%29/#exemple-formulaire-rapide-sans-classe-personnalisee","title":"Exemple : Formulaire rapide sans classe personnalis\u00e9e","text":"<pre><code>use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\n\npublic function quickForm(Request $request): Response\n{\n    $form = $this-&gt;createFormBuilder()\n        -&gt;add('name', TextType::class, ['label' =&gt; 'Nom'])\n        -&gt;add('save', SubmitType::class, ['label' =&gt; 'Envoyer'])\n        -&gt;getForm();\n\n    $form-&gt;handleRequest($request);\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        // Traitez les donn\u00e9es ici\n    }\n\n    return $this-&gt;render('form/quick.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/form/createForm%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/form/createForm%28%29/#1-erreur-type-de-formulaire-introuvable","title":"1. Erreur : Type de formulaire introuvable","text":"<p>Erreur :</p> <pre><code>Class \"App\\Form\\UserType\" not found.\n</code></pre> <p>Solution :</p> <ul> <li>V\u00e9rifiez le namespace et l'importation de votre classe de formulaire.</li> <li> <p>Exemple d'import correct :</p> <p><code>php use App\\Form\\UserType;</code></p> </li> </ul>"},{"location":"symfony/concepts/form/createForm%28%29/#2-erreur-formulaire-non-valide","title":"2. Erreur : Formulaire non valid\u00e9","text":"<p>Cause : Des contraintes de validation \u00e9chouent. Solution :</p> <ul> <li>Assurez-vous que les donn\u00e9es soumises respectent les contraintes d\u00e9finies dans l\u2019entit\u00e9 ou le formulaire.</li> <li>Utilisez <code>{{ form_errors(form) }}</code> dans le template Twig pour afficher les erreurs.</li> </ul>"},{"location":"symfony/concepts/form/createForm%28%29/#3-erreur-methode-http-incorrecte","title":"3. Erreur : M\u00e9thode HTTP incorrecte","text":"<p>Cause : Le formulaire a \u00e9t\u00e9 soumis avec une m\u00e9thode HTTP incorrecte. Solution :</p> <ul> <li> <p>D\u00e9finissez correctement la m\u00e9thode dans les options :</p> <p><code>php $this-&gt;createForm(UserType::class, null, ['method' =&gt; 'POST']);</code></p> </li> </ul>"},{"location":"symfony/concepts/form/createForm%28%29/#conseils","title":"Conseils","text":"<ol> <li>Validation des donn\u00e9es : Utilisez des contraintes de validation dans vos entit\u00e9s pour des formulaires robustes.</li> <li> <p>Personnalisation : Ajoutez des options comme <code>attr</code> pour personnaliser vos champs.     Exemple :</p> <p><code>php ['attr' =&gt; ['class' =&gt; 'form-control']]</code></p> </li> <li> <p>Utilisez des classes d\u00e9di\u00e9es : Pr\u00e9f\u00e9rez des classes de formulaire pour des formulaires r\u00e9utilisables et maintenables.</p> </li> <li>Debug : Utilisez la commande <code>bin/console debug:form</code> pour lister les types de champs disponibles.</li> </ol>"},{"location":"symfony/concepts/form/createForm%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Symfony Forms</li> <li>Twig : Form Rendering</li> </ul>"},{"location":"symfony/concepts/form/form_end%28%29/","title":"M\u00e9thode <code>form_end()</code> en Symfony","text":""},{"location":"symfony/concepts/form/form_end%28%29/#vue-densemble","title":"Vue d'ensemble","text":"<p>La m\u00e9thode <code>form_end()</code> est un helper Twig qui ferme un formulaire Symfony. Elle g\u00e8re plusieurs aspects importants de la cl\u00f4ture d'un formulaire, notamment l'ajout automatique des champs cach\u00e9s et du token CSRF.</p>"},{"location":"symfony/concepts/form/form_end%28%29/#signature-de-la-methode","title":"Signature de la m\u00e9thode","text":"<pre><code>{{ form_end(form, options = []) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#parametres","title":"Param\u00e8tres","text":""},{"location":"symfony/concepts/form/form_end%28%29/#parametre-principal","title":"Param\u00e8tre principal","text":"<ul> <li><code>form</code> (obligatoire) : L'instance du formulaire Symfony \u00e0 fermer</li> </ul>"},{"location":"symfony/concepts/form/form_end%28%29/#options-disponibles","title":"Options disponibles","text":"<ul> <li><code>render_rest</code>: Bool\u00e9en pour afficher les champs restants non rendus (d\u00e9faut: <code>true</code>)</li> <li><code>attr</code>: Attributs HTML personnalis\u00e9s pour des \u00e9l\u00e9ments suppl\u00e9mentaires</li> </ul>"},{"location":"symfony/concepts/form/form_end%28%29/#exemples-de-code","title":"Exemples de code","text":""},{"location":"symfony/concepts/form/form_end%28%29/#exemple-basique","title":"Exemple basique","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n    {{ form_row(form.email) }}\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#personnalisation-avancee","title":"Personnalisation avanc\u00e9e","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n{{ form_end(form, {\n    'render_rest': false,\n    'attr': {'class': 'form-footer'}\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#rendu-selectif-des-champs-restants","title":"Rendu s\u00e9lectif des champs restants","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n    {{ form_row(form.email) }}\n{{ form_end(form, {\n    'render_rest': true  // Rend les champs cach\u00e9s et non affich\u00e9s\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/form/form_end%28%29/#1-omission-de-form_start","title":"1. Omission de <code>form_start()</code>","text":"<pre><code>{# Incorrect #}\n{{ form_end(form) }}  {# Manque le d\u00e9but du formulaire #}\n\n{# Correct #}\n{{ form_start(form) }}\n    {# Contenu du formulaire #}\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#2-mauvaise-utilisation-des-options","title":"2. Mauvaise utilisation des options","text":"<pre><code>{# Incorrect #}\n{{ form_end(form, {'invalid_option': true}) }}  {# Option non reconnue #}\n\n{# Correct #}\n{{ form_end(form, {'render_rest': false}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#conseils-et-bonnes-pratiques","title":"Conseils et bonnes pratiques","text":"<ol> <li>Toujours utiliser <code>form_start()</code> et <code>form_end()</code> pour une gestion compl\u00e8te du formulaire</li> <li>Contr\u00f4lez le rendu des champs restants selon vos besoins</li> <li>Ajoutez des attributs personnalis\u00e9s si n\u00e9cessaire</li> <li>V\u00e9rifiez la pr\u00e9sence du token CSRF</li> </ol>"},{"location":"symfony/concepts/form/form_end%28%29/#gestion-des-champs-caches","title":"Gestion des champs cach\u00e9s","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n{{ form_end(form, {\n    'render_rest': true  // Assurera le rendu des champs cach\u00e9s comme le token CSRF\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#exemple-complet-de-formulaire","title":"Exemple complet de formulaire","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n    {{ form_row(form.email) }}\n\n    &lt;div class=\"form-actions\"&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Envoyer&lt;/button&gt;\n    &lt;/div&gt;\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#desactivation-du-rendu-automatique","title":"D\u00e9sactivation du rendu automatique","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n{{ form_end(form, {'render_rest': false}) }}  // N'affichera pas les champs cach\u00e9s\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#notes-importantes","title":"Notes importantes","text":"<ul> <li><code>form_end()</code> ajoute automatiquement les champs cach\u00e9s n\u00e9cessaires</li> <li>G\u00e8re le token CSRF pour la s\u00e9curit\u00e9</li> <li>Permet un contr\u00f4le fin sur le rendu des formulaires</li> </ul>"},{"location":"symfony/concepts/form/form_end%28%29/#cas-speciaux","title":"Cas sp\u00e9ciaux","text":""},{"location":"symfony/concepts/form/form_end%28%29/#formulaire-avec-des-champs-personnalises","title":"Formulaire avec des champs personnalis\u00e9s","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n    {{ form_row(form.email) }}\n\n    {# Champs personnalis\u00e9s #}\n    {{ form_row(form.champ_personnalise) }}\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_end%28%29/#formulaire-ajax","title":"Formulaire AJAX","text":"<pre><code>{{ form_start(form, {'attr': {'id': 'ajax-form'}}) }}\n    {{ form_row(form.nom) }}\n{{ form_end(form, {\n    'render_rest': true,\n    'attr': {'class': 'ajax-form-footer'}\n}) }}\n</code></pre> <p>Cette documentation offre une vue d'ensemble d\u00e9taill\u00e9e de la m\u00e9thode <code>form_end()</code> en Symfony, avec des exemples pratiques, des conseils et des cas d'utilisation courants.</p>"},{"location":"symfony/concepts/form/form_row%28%29/","title":"M\u00e9thode <code>form_row()</code> en Symfony","text":""},{"location":"symfony/concepts/form/form_row%28%29/#vue-densemble","title":"Vue d'ensemble","text":"<p>La m\u00e9thode <code>form_row()</code> est un helper Twig qui g\u00e9n\u00e8re un groupe de champ de formulaire complet, incluant le label, le champ de saisie et les potentielles erreurs de validation.</p>"},{"location":"symfony/concepts/form/form_row%28%29/#signature-de-la-methode","title":"Signature de la m\u00e9thode","text":"<pre><code>{{ form_row(form.champ, options = []) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#parametres","title":"Param\u00e8tres","text":""},{"location":"symfony/concepts/form/form_row%28%29/#parametre-principal","title":"Param\u00e8tre principal","text":"<ul> <li><code>form.champ</code> (obligatoire) : Le champ sp\u00e9cifique du formulaire \u00e0 rendre</li> </ul>"},{"location":"symfony/concepts/form/form_row%28%29/#options-disponibles","title":"Options disponibles","text":"<ul> <li><code>label</code>: Personnaliser le libell\u00e9 du champ</li> <li><code>attr</code>: Attributs HTML personnalis\u00e9s</li> <li><code>help</code>: Texte d'aide suppl\u00e9mentaire</li> <li><code>row_attr</code>: Attributs sur la div conteneur</li> <li><code>label_attr</code>: Attributs sur le label</li> </ul>"},{"location":"symfony/concepts/form/form_row%28%29/#exemples-de-code","title":"Exemples de code","text":""},{"location":"symfony/concepts/form/form_row%28%29/#exemple-basique","title":"Exemple basique","text":"<pre><code>{{ form_row(form.nom) }}\n{{ form_row(form.email) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#personnalisation-complete","title":"Personnalisation compl\u00e8te","text":"<pre><code>{{ form_row(form.username, {\n    'label': 'Nom d\\'utilisateur',\n    'attr': {\n        'class': 'form-control',\n        'placeholder': 'Choisissez un pseudo'\n    },\n    'help': 'Le nom doit faire entre 3 et 20 caract\u00e8res'\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#modification-des-attributs-de-la-ligne","title":"Modification des attributs de la ligne","text":"<pre><code>{{ form_row(form.description, {\n    'row_attr': {\n        'class': 'mb-3 custom-description-row',\n        'data-type': 'user-description'\n    }\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/form/form_row%28%29/#1-champ-inexistant","title":"1. Champ inexistant","text":"<pre><code>{# Incorrect #}\n{{ form_row(form.champInexistant) }}  {# G\u00e9n\u00e8rera une erreur #}\n\n{# Correct #}\n{{ form_row(form.champDefini) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#2-options-incorrectes","title":"2. Options incorrectes","text":"<pre><code>{# Incorrect #}\n{{ form_row(form.email, {'invalid_option': true}) }}  {# Option non reconnue #}\n\n{# Correct #}\n{{ form_row(form.email, {'attr': {'class': 'email-input'}}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#conseils-et-bonnes-pratiques","title":"Conseils et bonnes pratiques","text":"<ol> <li>Flexibilit\u00e9 maximale : Utilisez les options pour personnaliser chaque champ</li> <li>G\u00e9rez les erreurs de validation visuellement</li> <li>Utilisez des classes CSS pour un rendu coh\u00e9rent</li> <li>Ajoutez des textes d'aide pour guider l'utilisateur</li> </ol>"},{"location":"symfony/concepts/form/form_row%28%29/#gestion-des-erreurs-de-validation","title":"Gestion des erreurs de validation","text":"<pre><code>{{ form_row(form.email, {\n    'attr': {\n        'class': form.email.vars.errors|length &gt; 0 ? 'is-invalid' : ''\n    }\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#exemple-complet-de-formulaire","title":"Exemple complet de formulaire","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom, {\n        'label': 'Votre nom complet',\n        'attr': {'class': 'form-control'}\n    }) }}\n\n    {{ form_row(form.email, {\n        'label': 'Adresse email',\n        'help': 'Nous ne partagerons jamais votre email',\n        'attr': {'class': 'form-control'}\n    }) }}\n\n    {{ form_row(form.mot_de_passe, {\n        'label': 'Mot de passe',\n        'attr': {\n            'class': 'form-control',\n            'type': 'password'\n        }\n    }) }}\n\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Envoyer&lt;/button&gt;\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#integration-avec-bootstrap","title":"Int\u00e9gration avec Bootstrap","text":"<pre><code>{{ form_row(form.champ, {\n    'attr': {'class': 'form-control'},\n    'row_attr': {'class': 'mb-3'}\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#notes-importantes","title":"Notes importantes","text":"<ul> <li><code>form_row()</code> combine automatiquement <code>form_label()</code>, <code>form_widget()</code>, et <code>form_errors()</code></li> <li>Hautement personnalisable via les options</li> <li>Supporte tous les types de champs (texte, email, checkbox, etc.)</li> </ul>"},{"location":"symfony/concepts/form/form_row%28%29/#cas-speciaux","title":"Cas sp\u00e9ciaux","text":""},{"location":"symfony/concepts/form/form_row%28%29/#champs-booleens","title":"Champs bool\u00e9ens","text":"<pre><code>{{ form_row(form.newsletter, {\n    'label': 'Recevoir la newsletter',\n    'attr': {'class': 'form-check-input'}\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_row%28%29/#champs-de-type-select","title":"Champs de type select","text":"<pre><code>{{ form_row(form.pays, {\n    'label': 'Pays de r\u00e9sidence',\n    'attr': {'class': 'form-select'}\n}) }}\n</code></pre> <p>Cette documentation offre une vue d'ensemble d\u00e9taill\u00e9e de la m\u00e9thode <code>form_row()</code> en Symfony, avec des exemples pratiques, des conseils et des cas d'utilisation courants.</p>"},{"location":"symfony/concepts/form/form_start%28%29/","title":"M\u00e9thode <code>form_start()</code> en Symfony","text":""},{"location":"symfony/concepts/form/form_start%28%29/#vue-densemble","title":"Vue d'ensemble","text":"<p>La m\u00e9thode <code>form_start()</code> est utilis\u00e9e pour g\u00e9n\u00e9rer le d\u00e9but d'un formulaire HTML dans les templates Twig de Symfony. Elle facilite la cr\u00e9ation de balises de formulaire avec les attributs appropri\u00e9s.</p>"},{"location":"symfony/concepts/form/form_start%28%29/#signature-de-la-methode","title":"Signature de la m\u00e9thode","text":"<pre><code>{{ form_start(form, options = []) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#parametres","title":"Param\u00e8tres","text":""},{"location":"symfony/concepts/form/form_start%28%29/#parametre-principal","title":"Param\u00e8tre principal","text":"<ul> <li><code>form</code> (obligatoire) : L'instance du formulaire Symfony \u00e0 rendre</li> </ul>"},{"location":"symfony/concepts/form/form_start%28%29/#options-disponibles","title":"Options disponibles","text":"<ul> <li><code>attr</code>: Attributs HTML personnalis\u00e9s pour la balise <code>&lt;form&gt;</code></li> <li><code>action</code>: URL de destination du formulaire</li> <li><code>method</code>: M\u00e9thode HTTP (<code>GET</code> ou <code>POST</code>, par d\u00e9faut <code>POST</code>)</li> <li><code>enctype</code>: Type d'encodage (utile pour les uploads de fichiers)</li> </ul>"},{"location":"symfony/concepts/form/form_start%28%29/#exemples-de-code","title":"Exemples de code","text":""},{"location":"symfony/concepts/form/form_start%28%29/#exemple-basique","title":"Exemple basique","text":"<pre><code>{{ form_start(form) }}\n    {{ form_row(form.nom) }}\n    {{ form_row(form.email) }}\n    &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#personnalisation-des-attributs","title":"Personnalisation des attributs","text":"<pre><code>{{ form_start(form, {\n    'attr': {\n        'class': 'formulaire-utilisateur', \n        'id': 'user-registration-form',\n        'data-validation': 'active'\n    },\n    'action': path('app_register'),\n    'method': 'POST'\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#formulaire-avec-upload-de-fichiers","title":"Formulaire avec upload de fichiers","text":"<pre><code>{{ form_start(form, {'attr': {'enctype': 'multipart/form-data'}}) }}\n    {{ form_row(form.fichier) }}\n    &lt;button type=\"submit\"&gt;T\u00e9l\u00e9charger&lt;/button&gt;\n{{ form_end(form) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/form/form_start%28%29/#1-absence-de-lobjet-formulaire","title":"1. Absence de l'objet formulaire","text":"<pre><code>{# Incorrect #}\n{{ form_start() }}  {# Erreur : aucun formulaire pass\u00e9 #}\n\n{# Correct #}\n{{ form_start(monFormulaire) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#2-options-invalides","title":"2. Options invalides","text":"<pre><code>{# Incorrect #}\n{{ form_start(form, {'method': 'PATCH'}) }}  {# M\u00e9thode HTTP non standard #}\n\n{# Correct #}\n{{ form_start(form, {'method': 'POST'}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#conseils-et-bonnes-pratiques","title":"Conseils et bonnes pratiques","text":"<ol> <li>Toujours utiliser <code>form_end()</code> pour fermer correctement le formulaire</li> <li>Utilisez des attributs personnalis\u00e9s pour l'am\u00e9lioration de l'exp\u00e9rience utilisateur</li> <li>Pensez \u00e0 la s\u00e9curit\u00e9 avec les attributs CSRF</li> <li>Choisissez la m\u00e9thode HTTP appropri\u00e9e (<code>GET</code> pour la recherche, <code>POST</code> pour les modifications)</li> </ol>"},{"location":"symfony/concepts/form/form_start%28%29/#configuration-csrf","title":"Configuration CSRF","text":"<pre><code>{{ form_start(form, {\n    'attr': {\n        'csrf_protection': true,\n        'csrf_field_name': '_token'\n    }\n}) }}\n</code></pre>"},{"location":"symfony/concepts/form/form_start%28%29/#notes-importantes","title":"Notes importantes","text":"<ul> <li><code>form_start()</code> g\u00e9n\u00e8re automatiquement le token CSRF</li> <li>Elle ajoute les attributs <code>method</code> et <code>action</code> si non sp\u00e9cifi\u00e9s</li> <li>Compatible avec toutes les versions r\u00e9centes de Symfony (5.x et 6.x)</li> </ul>"},{"location":"symfony/concepts/form/form_start%28%29/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<pre><code>{% if form.vars.submitted and not form.vars.valid %}\n    &lt;div class=\"alert alert-danger\"&gt;\n        Veuillez corriger les erreurs dans le formulaire\n    &lt;/div&gt;\n{% endif %}\n\n{{ form_start(form) }}\n    {# Contenu du formulaire #}\n{{ form_end(form) }}\n</code></pre> <p>Cette documentation offre une vue d'ensemble compl\u00e8te de la m\u00e9thode <code>form_start()</code> en Symfony, avec des exemples pratiques et des conseils d'utilisation.</p>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/","title":"php #twig #dev","text":""},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#ajouter-une-liste-deroulante-dans-un-formulaire-symfony-avec-twig","title":"Ajouter une liste d\u00e9roulante dans un formulaire Symfony avec Twig","text":""},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#introduction","title":"Introduction","text":"<p>Dans Symfony, les listes d\u00e9roulantes (select) sont g\u00e9r\u00e9es via le composant <code>Form</code>. Cette fiche explique comment ajouter une liste d\u00e9roulante dans un formulaire Symfony et l'afficher avec Twig.</p>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#1-creation-du-formulaire-avec-une-liste-deroulante","title":"1. Cr\u00e9ation du formulaire avec une liste d\u00e9roulante","text":"<p>Symfony propose plusieurs mani\u00e8res d'ajouter une liste d\u00e9roulante (<code>ChoiceType</code> est recommand\u00e9).</p>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#exemple-de-formulaire","title":"Exemple de formulaire :","text":"<pre><code>// src/Form/ExampleType.php\n\nnamespace App\\Form;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse App\\Entity\\ExampleEntity;\n\nclass ExampleType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            -&gt;add('category', ChoiceType::class, [\n                'choices' =&gt; [\n                    'Option 1' =&gt; 'option1',\n                    'Option 2' =&gt; 'option2',\n                    'Option 3' =&gt; 'option3',\n                ],\n                'placeholder' =&gt; 'S\u00e9lectionnez une option',\n                'required' =&gt; true,\n            ]);\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver-&gt;setDefaults([\n            'data_class' =&gt; ExampleEntity::class,\n        ]);\n    }\n}\n````\n\n---\n\n## 2. Ajouter le formulaire dans le contr\u00f4leur\n\n```php\n// src/Controller/ExampleController.php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse App\\Form\\ExampleType;\nuse App\\Entity\\ExampleEntity;\nuse Doctrine\\ORM\\EntityManagerInterface;\n\nclass ExampleController extends AbstractController\n{\n    #[Route('/form', name: 'app_form')]\n    public function index(Request $request, EntityManagerInterface $entityManager): Response\n    {\n        $example = new ExampleEntity();\n        $form = $this-&gt;createForm(ExampleType::class, $example);\n\n        $form-&gt;handleRequest($request);\n        if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n            $entityManager-&gt;persist($example);\n            $entityManager-&gt;flush();\n\n            $this-&gt;addFlash('success', 'Formulaire soumis avec succ\u00e8s !');\n            return $this-&gt;redirectToRoute('app_form');\n        }\n\n        return $this-&gt;render('form/index.html.twig', [\n            'form' =&gt; $form-&gt;createView(),\n        ]);\n    }\n}\n</code></pre>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#3-affichage-du-formulaire-avec-twig","title":"3. Affichage du formulaire avec Twig","text":"<pre><code>{# templates/form/index.html.twig #}\n\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    &lt;h1&gt;Formulaire avec liste d\u00e9roulante&lt;/h1&gt;\n\n    {{ form_start(form) }}\n        &lt;div&gt;\n            {{ form_label(form.category) }}\n            {{ form_widget(form.category) }}\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Soumettre&lt;/button&gt;\n    {{ form_end(form) }}\n{% endblock %}\n</code></pre>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#4-cas-particuliers","title":"4. Cas particuliers","text":""},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#a-utilisation-de-donnees-dynamiques-ex-depuis-une-base-de-donnees","title":"a) Utilisation de donn\u00e9es dynamiques (ex: depuis une base de donn\u00e9es)","text":"<p>Si vous voulez g\u00e9n\u00e9rer la liste d\u00e9roulante \u00e0 partir d'une entit\u00e9 stock\u00e9e en base de donn\u00e9es, utilisez <code>EntityType</code> :</p> <pre><code>use Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse App\\Entity\\Category;\n\n$builder-&gt;add('category', EntityType::class, [\n    'class' =&gt; Category::class,\n    'choice_label' =&gt; 'name', // Utilise le champ \"name\" comme label\n    'placeholder' =&gt; 'S\u00e9lectionnez une cat\u00e9gorie',\n]);\n</code></pre>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#b-liste-deroulante-avec-valeurs-pre-selectionnees","title":"b) Liste d\u00e9roulante avec valeurs pr\u00e9-s\u00e9lectionn\u00e9es","text":"<p>Si vous voulez pr\u00e9-s\u00e9lectionner une valeur sp\u00e9cifique, assurez-vous que l'entit\u00e9 associ\u00e9e a bien une valeur par d\u00e9faut.</p> <pre><code>$builder-&gt;add('category', ChoiceType::class, [\n    'choices' =&gt; [\n        'Option 1' =&gt; 'option1',\n        'Option 2' =&gt; 'option2',\n    ],\n    'data' =&gt; 'option2', // D\u00e9finit 'Option 2' comme valeur par d\u00e9faut\n]);\n</code></pre>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#5-erreurs-frequentes-et-solutions","title":"5. Erreurs fr\u00e9quentes et solutions","text":"Probl\u00e8me Solution Le formulaire ne s'affiche pas V\u00e9rifiez que le contr\u00f4leur passe bien la variable <code>form</code> \u00e0 Twig Les options ne s'affichent pas dans la liste Assurez-vous que les valeurs de <code>choices</code> sont bien d\u00e9finies et coh\u00e9rentes Erreur \"Expected argument of type string, object given\" Si vous utilisez <code>EntityType</code>, assurez-vous que <code>choice_label</code> est d\u00e9fini correctement"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#conclusion","title":"Conclusion","text":"<p>Cette fiche vous permet d'ajouter une liste d\u00e9roulante dans un formulaire Symfony avec Twig. Pour aller plus loin, explorez l'ajout d'Ajax pour charger dynamiquement les options.</p>"},{"location":"symfony/concepts/form/liste%20d%C3%A9roulante/#ressources-supplementaires","title":"Ressources suppl\u00e9mentaires","text":"<ul> <li>Documentation officielle Symfony - Forms</li> <li>Symfony Form ChoiceType</li> </ul> <pre><code>\nTu peux copier-coller ce fichier Markdown pour l\u2019utiliser comme r\u00e9f\u00e9rence. Si tu veux approfondir un point ou adapter le formulaire \u00e0 un besoin sp\u00e9cifique, dis-moi ! \ud83d\ude80\n</code></pre>"},{"location":"symfony/concepts/routing/%28phpsfnrouting%29/","title":"FOLDER","text":"<p>[[generateUrl()]] [[handleRequest()]] [[redirectToRoute()]] [[Routing]]</p> <p>[[(phpsymfonyconcepts)]]</p>"},{"location":"symfony/concepts/routing/Routing/","title":"Routing","text":""},{"location":"symfony/concepts/routing/Routing/#documentation-symfony-le-routing","title":"Documentation Symfony : Le Routing","text":""},{"location":"symfony/concepts/routing/Routing/#description","title":"Description","text":"<p>Le routing dans Symfony est le m\u00e9canisme qui permet d'associer une URL \u00e0 une action sp\u00e9cifique dans le contr\u00f4leur de l'application. Symfony utilise un syst\u00e8me flexible de routes pour d\u00e9finir les chemins d'acc\u00e8s aux diff\u00e9rentes pages de l'application et les associer \u00e0 des m\u00e9thodes de contr\u00f4leur.</p>"},{"location":"symfony/concepts/routing/Routing/#fichiers-de-configuration-de-routage","title":"Fichiers de configuration de routage","text":"<ol> <li>Fichier <code>config/routes.yaml</code> (par d\u00e9faut)     C'est le fichier principal pour d\u00e9finir les routes de l'application. Les routes sont d\u00e9finies avec des chemins d'URL, et peuvent \u00eatre associ\u00e9es \u00e0 des m\u00e9thodes de contr\u00f4leur.</li> </ol> <pre><code># config/routes.yaml\nhomepage:\n  path: /\n  controller: App\\Controller\\HomeController::index\n</code></pre> <ol> <li>Annotation de routage dans les contr\u00f4leurs     Symfony permet de d\u00e9finir des routes directement dans les contr\u00f4leurs avec des annotations. Pour utiliser cette fonctionnalit\u00e9, il faut activer le package <code>symfony/annotations</code>.</li> </ol> <pre><code>// src/Controller/HomeController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass HomeController\n{\n    /**\n     * @Route(\"/\", name=\"homepage\")\n     */\n    public function index()\n    {\n        return new Response('Homepage');\n    }\n}\n</code></pre> <ol> <li>Fichier <code>config/routes/</code> (routes sp\u00e9cifiques par dossier)     Ce r\u00e9pertoire permet de d\u00e9finir des routes sp\u00e9cifiques dans diff\u00e9rents fichiers YAML, pour organiser les routes par fonctionnalit\u00e9.</li> </ol> <pre><code># config/routes/product.yaml\nproduct_show:\n  path: /product/{id}\n  controller: App\\Controller\\ProductController::show\n  requirements:\n    id: \\d+\n</code></pre>"},{"location":"symfony/concepts/routing/Routing/#parametres-de-routes","title":"Param\u00e8tres de routes","text":"<ol> <li>Param\u00e8tres dynamiques     Vous pouvez d\u00e9finir des param\u00e8tres dynamiques dans le chemin de la route en utilisant des accolades <code>{}</code>. Ces param\u00e8tres seront pass\u00e9s \u00e0 la m\u00e9thode du contr\u00f4leur.</li> </ol> <pre><code># config/routes.yaml\nproduct_show:\n  path: /product/{id}\n  controller: App\\Controller\\ProductController::show\n</code></pre> <ol> <li>Exemple de contr\u00f4leur utilisant un param\u00e8tre</li> </ol> <pre><code>// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass ProductController\n{\n    /**\n     * @Route(\"/product/{id}\", name=\"product_show\")\n     */\n    public function show($id)\n    {\n        // Logique pour afficher le produit avec l'ID donn\u00e9\n        return new Response('Product ID: ' . $id);\n    }\n}\n</code></pre> <ol> <li>Exigences de param\u00e8tres     Vous pouvez d\u00e9finir des exigences de format pour les param\u00e8tres dynamiques (par exemple, un identifiant qui doit \u00eatre un entier).</li> </ol> <pre><code># config/routes.yaml\nproduct_show:\n  path: /product/{id}\n  controller: App\\Controller\\ProductController::show\n  requirements:\n    id: \\d+  # Le param\u00e8tre doit \u00eatre un nombre entier\n</code></pre>"},{"location":"symfony/concepts/routing/Routing/#generer-des-urls-avec-generateurl","title":"G\u00e9n\u00e9rer des URLs avec <code>generateUrl()</code>","text":"<p>Vous pouvez g\u00e9n\u00e9rer des URLs dynamiquement dans votre application \u00e0 l'aide de la m\u00e9thode [[generateUrl()]], g\u00e9n\u00e9ralement utilis\u00e9e dans les contr\u00f4leurs ou les templates.</p> <pre><code>// G\u00e9n\u00e9rer l'URL pour la route \"product_show\"\n$url = $this-&gt;generateUrl('product_show', ['id' =&gt; 42]);\n</code></pre>"},{"location":"symfony/concepts/routing/Routing/#cas-derreurs-courants","title":"Cas d'erreurs courants","text":"<ol> <li>Route non d\u00e9finie     Si une route n'est pas d\u00e9finie, Symfony l\u00e8vera une erreur de type \"No route found for...\".</li> </ol> <p>Solution : V\u00e9rifiez si la route est correctement d\u00e9finie dans le fichier de configuration des routes et que son nom est correct.</p> <ol> <li>Param\u00e8tre manquant     Lorsque vous g\u00e9n\u00e9rez une URL avec <code>generateUrl()</code> et qu'un param\u00e8tre obligatoire est manquant, Symfony renverra une erreur.</li> </ol> <p>Solution : Assurez-vous de fournir tous les param\u00e8tres requis pour la route.</p>"},{"location":"symfony/concepts/routing/Routing/#conseils-pratiques","title":"Conseils pratiques","text":"<ol> <li> <p>Nom des routes     Assurez-vous de nommer vos routes de mani\u00e8re significative, cela facilitera la g\u00e9n\u00e9ration d'URLs et l'utilisation des redirections.</p> </li> <li> <p>S\u00e9curisation des routes     Vous pouvez s\u00e9curiser les routes en utilisant des restrictions ou des param\u00e8tres <code>requirements</code>. Par exemple, vous pouvez limiter les acc\u00e8s en fonction du r\u00f4le de l'utilisateur.</p> </li> </ol> <pre><code># Exemple de route s\u00e9curis\u00e9e\nadmin_dashboard:\n  path: /admin/dashboard\n  controller: App\\Controller\\AdminController::dashboard\n  requirements:\n    _role: ROLE_ADMIN\n</code></pre> <ol> <li>Utilisation des redirections     Utilisez les redirections de mani\u00e8re judicieuse dans vos contr\u00f4leurs pour am\u00e9liorer l'exp\u00e9rience utilisateur.</li> </ol> <p>[[redirectToRoute()]]</p> <pre><code>// Exemple de redirection\nreturn $this-&gt;redirectToRoute('homepage');\n</code></pre> <ol> <li>Utiliser des sous-routes pour organiser les URL     Les sous-routes permettent de mieux organiser les URL complexes.</li> </ol> <pre><code># config/routes.yaml\nproduct:\n  path: /product\n  controller: App\\Controller\\ProductController::index\n  prefix: /product/{category}\n</code></pre>"},{"location":"symfony/concepts/routing/Routing/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Routing Documentation</li> <li>Annotations de Routage</li> <li>G\u00e9n\u00e9ration d'URLs en Symfony</li> </ul>"},{"location":"symfony/concepts/routing/generateUrl%28%29/","title":"generateUrl()","text":""},{"location":"symfony/concepts/routing/generateUrl%28%29/#documentation-generateurl-en-symfony","title":"Documentation : <code>generateUrl()</code> en Symfony","text":""},{"location":"symfony/concepts/routing/generateUrl%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>generateUrl()</code> est utilis\u00e9e pour g\u00e9n\u00e9rer une URL bas\u00e9e sur un nom de route d\u00e9fini dans votre application Symfony. Elle est couramment utilis\u00e9e pour g\u00e9n\u00e9rer des liens vers d'autres pages ou pour rediriger l'utilisateur.</p>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function generateUrl(string $route, array $parameters = [], int $referenceType = UrlGeneratorInterface::ABSOLUTE_PATH): string\n</code></pre>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li> <p><code>$route</code> (string) :     Le nom de la route \u00e0 g\u00e9n\u00e9rer. Il doit correspondre \u00e0 un nom de route d\u00e9fini dans votre fichier de configuration des routes.</p> </li> <li> <p><code>$parameters</code> (array) : (optionnel)     Un tableau associatif contenant les param\u00e8tres dynamiques \u00e0 ins\u00e9rer dans l'URL. Les param\u00e8tres doivent \u00eatre des variables d\u00e9finies dans la route (par exemple : <code>slug</code>, <code>id</code>).</p> </li> <li> <p><code>$referenceType</code> (int) : (optionnel, par d\u00e9faut <code>UrlGeneratorInterface::ABSOLUTE_PATH</code>)     Le type d'URL g\u00e9n\u00e9r\u00e9e :</p> <ul> <li><code>UrlGeneratorInterface::ABSOLUTE_PATH</code> : L'URL est g\u00e9n\u00e9r\u00e9e relative \u00e0 la racine du site.</li> <li><code>UrlGeneratorInterface::ABSOLUTE_URL</code> : L'URL compl\u00e8te, incluant le domaine (par exemple, <code>https://example.com/...</code>).</li> <li><code>UrlGeneratorInterface::NETWORK_PATH</code> : L'URL compl\u00e8te sans domaine (par exemple, <code>/path/...</code>).</li> </ul> </li> </ul>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#retour","title":"Retour","text":"<ul> <li>La m\u00e9thode retourne une cha\u00eene de caract\u00e8res repr\u00e9sentant l'URL g\u00e9n\u00e9r\u00e9e.</li> </ul>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/routing/generateUrl%28%29/#exemple-1-generer-une-url-absolue","title":"Exemple 1 : G\u00e9n\u00e9rer une URL absolue","text":"<pre><code>public function index(): Response\n{\n    $url = $this-&gt;generateUrl('article_show', ['id' =&gt; 123], UrlGeneratorInterface::ABSOLUTE_URL);\n\n    return new Response('URL absolue: ' . $url);\n}\n</code></pre> <p>Dans cet exemple, l'URL compl\u00e8te (y compris le domaine) sera g\u00e9n\u00e9r\u00e9e pour la route <code>article_show</code> avec l'ID 123.</p>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#exemple-2-generer-une-url-relative","title":"Exemple 2 : G\u00e9n\u00e9rer une URL relative","text":"<pre><code>public function showArticle(): Response\n{\n    $url = $this-&gt;generateUrl('article_show', ['id' =&gt; 456]);\n\n    return new Response('URL relative: ' . $url);\n}\n</code></pre> <p>Cela g\u00e9n\u00e8re une URL relative, comme <code>/article/456</code>.</p>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#exemple-3-generer-une-url-avec-plusieurs-parametres","title":"Exemple 3 : G\u00e9n\u00e9rer une URL avec plusieurs param\u00e8tres","text":"<pre><code>public function listArticles(): Response\n{\n    $url = $this-&gt;generateUrl('articles_by_category', [\n        'category' =&gt; 'tech',\n        'page' =&gt; 2\n    ]);\n\n    return new Response('URL avec plusieurs param\u00e8tres: ' . $url);\n}\n</code></pre> <p>Cet exemple g\u00e9n\u00e8re une URL comme <code>/articles/category/tech/page/2</code>.</p>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#exemple-4-generer-une-url-avec-des-parametres-facultatifs","title":"Exemple 4 : G\u00e9n\u00e9rer une URL avec des param\u00e8tres facultatifs","text":"<pre><code>public function generateSearchUrl(): Response\n{\n    $url = $this-&gt;generateUrl('search', ['query' =&gt; 'Symfony']);\n\n    return new Response('URL de recherche: ' . $url);\n}\n</code></pre> <p>Ici, la route <code>search</code> pourrait \u00eatre d\u00e9finie avec un param\u00e8tre <code>query</code> optionnel.</p>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/routing/generateUrl%28%29/#1-erreur-nom-de-route-inconnu","title":"1. Erreur : Nom de route inconnu","text":"<p>Cause : Si le nom de route fourni ne correspond \u00e0 aucune route d\u00e9finie, Symfony renverra une exception <code>RouteNotFoundException</code>. Solution : V\u00e9rifiez que le nom de la route est correct et que la route existe dans vos fichiers de configuration.</p> <pre><code>try {\n    $url = $this-&gt;generateUrl('non_existent_route');\n} catch (\\Symfony\\Component\\Routing\\Exception\\RouteNotFoundException $e) {\n    // G\u00e9rer l'erreur\n    throw new \\Exception('Route not found: ' . $e-&gt;getMessage());\n}\n</code></pre>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#2-erreur-parametres-manquants","title":"2. Erreur : Param\u00e8tres manquants","text":"<p>Cause : Si des param\u00e8tres requis pour la route sont manquants, cela peut entra\u00eener des erreurs lors de la g\u00e9n\u00e9ration de l'URL. Solution : Assurez-vous que tous les param\u00e8tres n\u00e9cessaires sont fournis.</p> <pre><code>// Exemple avec une route n\u00e9cessitant un param\u00e8tre `id`\ntry {\n    $url = $this-&gt;generateUrl('article_show'); // L'ID est manquant\n} catch (\\InvalidArgumentException $e) {\n    // G\u00e9rer l'erreur\n    throw new \\Exception('Param\u00e8tre manquant: ' . $e-&gt;getMessage());\n}\n</code></pre>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Validation des param\u00e8tres :     Toujours valider les param\u00e8tres pass\u00e9s dans la m\u00e9thode <code>generateUrl()</code>. Par exemple, si un param\u00e8tre est un entier, assurez-vous qu'il est bien un entier avant de g\u00e9n\u00e9rer l'URL.</p> </li> <li> <p>Utiliser les constantes pour les routes :     Il est conseill\u00e9 de d\u00e9finir les noms de vos routes dans des constantes dans vos contr\u00f4leurs ou services afin de r\u00e9duire les risques d'erreurs typographiques.</p> </li> </ol> <pre><code>// Exemple avec une constante de route\nclass ArticleController extends AbstractController\n{\n    const ROUTE_SHOW = 'article_show';\n\n    public function index(): Response\n    {\n        $url = $this-&gt;generateUrl(self::ROUTE_SHOW, ['id' =&gt; 123]);\n        return new Response('URL: ' . $url);\n    }\n}\n</code></pre> <ol> <li> <p>V\u00e9rifier la disponibilit\u00e9 des routes dynamiques :     Assurez-vous que les param\u00e8tres dynamiques dans les routes (comme les slugs ou les ID) sont correctement fournis, sinon cela peut g\u00e9n\u00e9rer une URL incorrecte ou entra\u00eener une exception.</p> </li> <li> <p>Privil\u00e9gier les URLs relatives :     Lorsque vous travaillez avec Symfony, il est souvent pr\u00e9f\u00e9rable de g\u00e9n\u00e9rer des URLs relatives \u00e0 l'int\u00e9rieur de l'application (pour le respect de l'environnement de d\u00e9veloppement, staging et production). Utilisez <code>UrlGeneratorInterface::ABSOLUTE_PATH</code> uniquement lorsque vous en avez vraiment besoin.</p> </li> <li> <p>Routage et gestion des erreurs :     Si vous vous attendez \u00e0 g\u00e9n\u00e9rer une URL pour une route qui pourrait ne pas exister, v\u00e9rifiez la pr\u00e9sence de la route avant d'appeler <code>generateUrl()</code> en utilisant des contr\u00f4les conditionnels.</p> </li> </ol>"},{"location":"symfony/concepts/routing/generateUrl%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony : G\u00e9n\u00e9rer une URL</li> <li>Symfony : RouteNotFoundException</li> </ul>"},{"location":"symfony/concepts/routing/handleRequest%28%29/","title":"handleRequest()","text":""},{"location":"symfony/concepts/routing/handleRequest%28%29/#documentation-handlerequest-en-symfony","title":"Documentation : <code>handleRequest()</code> en Symfony","text":""},{"location":"symfony/concepts/routing/handleRequest%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>handleRequest()</code> permet de lier un objet formulaire \u00e0 la requ\u00eate HTTP. Elle analyse la requ\u00eate pour d\u00e9terminer si le formulaire a \u00e9t\u00e9 soumis et remplit automatiquement les champs avec les donn\u00e9es de la requ\u00eate. C'est une \u00e9tape cl\u00e9 dans le cycle de vie d'un formulaire Symfony.</p>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>handleRequest(Request $request): void\n</code></pre>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li><code>$request</code> (Request) :     L'objet <code>Request</code> de Symfony repr\u00e9sentant la requ\u00eate HTTP actuelle.     G\u00e9n\u00e9ralement obtenu via l'injection du service <code>Request</code> dans votre contr\u00f4leur.</li> </ol>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/routing/handleRequest%28%29/#exemple-de-base","title":"Exemple de base","text":"<pre><code>public function newUser(Request $request): Response\n{\n    $form = $this-&gt;createForm(UserType::class);\n\n    // Lier le formulaire \u00e0 la requ\u00eate HTTP\n    $form-&gt;handleRequest($request);\n\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        // Traitez les donn\u00e9es valides ici\n        $user = $form-&gt;getData();\n    }\n\n    return $this-&gt;render('user/new.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#exemple-avec-donnees-initiales","title":"Exemple avec donn\u00e9es initiales","text":"<pre><code>public function editUser(Request $request, User $user): Response\n{\n    $form = $this-&gt;createForm(UserType::class, $user);\n\n    $form-&gt;handleRequest($request);\n\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        // Les modifications de l'utilisateur sont automatiquement appliqu\u00e9es \u00e0 $user\n    }\n\n    return $this-&gt;render('user/edit.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#exemple-dutilisation-avec-un-formulaire-dynamique","title":"Exemple d'utilisation avec un formulaire dynamique","text":"<pre><code>public function dynamicForm(Request $request): Response\n{\n    $form = $this-&gt;createFormBuilder()\n        -&gt;add('name', TextType::class)\n        -&gt;add('email', EmailType::class)\n        -&gt;getForm();\n\n    $form-&gt;handleRequest($request);\n\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n        $data = $form-&gt;getData();\n        // $data contient les valeurs de 'name' et 'email'\n    }\n\n    return $this-&gt;render('form/dynamic.html.twig', [\n        'form' =&gt; $form-&gt;createView(),\n    ]);\n}\n</code></pre>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/routing/handleRequest%28%29/#1-erreur-appel-a-handlerequest-avant-laffichage-du-formulaire","title":"1. Erreur : Appel \u00e0 <code>handleRequest()</code> avant l'affichage du formulaire","text":"<p>Cause : Si <code>handleRequest()</code> n'est pas appel\u00e9, les donn\u00e9es soumises ne seront pas li\u00e9es au formulaire.</p> <p>Solution : Assurez-vous d'appeler <code>handleRequest()</code> avant de v\u00e9rifier l'\u00e9tat du formulaire :</p> <pre><code>$form-&gt;handleRequest($request);\nif ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\n    // Traitez ici\n}\n</code></pre>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#2-erreur-methode-http-incorrecte","title":"2. Erreur : M\u00e9thode HTTP incorrecte","text":"<p>Probl\u00e8me : Le formulaire est configur\u00e9 pour une m\u00e9thode HTTP diff\u00e9rente de celle utilis\u00e9e dans la requ\u00eate.</p> <p>Solution : V\u00e9rifiez que la m\u00e9thode correspond :</p> <ul> <li> <p>D\u00e9finir la m\u00e9thode lors de la cr\u00e9ation du formulaire :</p> <p><code>php $this-&gt;createForm(UserType::class, null, ['method' =&gt; 'POST']);</code></p> </li> <li> <p>Assurez-vous que votre balise <code>&lt;form&gt;</code> utilise la m\u00eame m\u00e9thode.</p> </li> </ul>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#3-erreur-donnees-non-valides","title":"3. Erreur : Donn\u00e9es non valides","text":"<p>Cause : Le formulaire \u00e9choue \u00e0 valider les contraintes d\u00e9finies sur les champs ou les entit\u00e9s.</p> <p>Solution :</p> <ul> <li> <p>Affichez les erreurs dans le template Twig :</p> <p><code>twig {{ form_errors(form) }}</code></p> </li> <li> <p>V\u00e9rifiez les contraintes sur l\u2019entit\u00e9 li\u00e9e au formulaire.</p> </li> </ul>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#conseils","title":"Conseils","text":"<ol> <li>Appel obligatoire : Toujours appeler <code>handleRequest()</code> pour lier le formulaire \u00e0 la requ\u00eate avant de v\u00e9rifier s\u2019il a \u00e9t\u00e9 soumis.</li> <li>Gestion des erreurs : Exploitez <code>form_errors()</code> dans Twig pour un retour utilisateur clair.</li> <li>Validation : V\u00e9rifiez que les contraintes de validation dans vos entit\u00e9s sont bien respect\u00e9es avant d'enregistrer les donn\u00e9es.</li> <li>Debug : Utilisez la m\u00e9thode <code>getData()</code> sur le formulaire pour v\u00e9rifier les donn\u00e9es apr\u00e8s un appel \u00e0 <code>handleRequest()</code>.</li> </ol>"},{"location":"symfony/concepts/routing/handleRequest%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony : Gestion des formulaires</li> <li>Symfony : M\u00e9thodes de formulaire</li> </ul>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/","title":"redirectToRoute()","text":""},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#documentation-redirecttoroute-en-symfony","title":"Documentation : <code>redirectToRoute()</code> en Symfony","text":""},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>redirectToRoute()</code> est utilis\u00e9e dans un contr\u00f4leur Symfony pour rediriger l'utilisateur vers une route d\u00e9finie, en g\u00e9n\u00e9rant automatiquement l'URL bas\u00e9e sur les param\u00e8tres de la route.</p>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>redirectToRoute(string $route, array $parameters = [], int $status = 302): RedirectResponse\n</code></pre>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$route</code> (string) :     Nom de la route d\u00e9finie dans les fichiers de configuration des routes (<code>annotations</code>, <code>yaml</code>, ou <code>php</code>).     Exemple : <code>\"home\"</code>, <code>\"user_profile\"</code>, <code>\"product_list\"</code>.</p> </li> <li> <p><code>$parameters</code> (array) :     Param\u00e8tres dynamiques n\u00e9cessaires pour la g\u00e9n\u00e9ration de l'URL, correspondant aux variables d\u00e9finies dans la route.     Exemple : <code>['id' =&gt; 123]</code>.</p> </li> <li> <p><code>$status</code> (int) :     Code HTTP de la redirection. Par d\u00e9faut, une redirection temporaire (<code>302</code>).     Autres valeurs courantes :</p> <ul> <li><code>301</code> : Redirection permanente.</li> <li><code>303</code> : Redirection pour changer de m\u00e9thode HTTP (ex. POST \u2192 GET).</li> </ul> </li> </ol>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#exemple-simple-redirection-vers-une-route","title":"Exemple simple : Redirection vers une route","text":"<pre><code>public function homeRedirect(): RedirectResponse\n{\n    return $this-&gt;redirectToRoute('home');\n}\n</code></pre>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#passer-des-parametres-a-la-route","title":"Passer des param\u00e8tres \u00e0 la route","text":"<pre><code>public function viewUser(int $userId): RedirectResponse\n{\n    return $this-&gt;redirectToRoute('user_profile', ['id' =&gt; $userId]);\n}\n</code></pre>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#utiliser-un-code-de-redirection-personnalise","title":"Utiliser un code de redirection personnalis\u00e9","text":"<pre><code>public function permanentRedirect(): RedirectResponse\n{\n    return $this-&gt;redirectToRoute('old_route', [], 301); // Redirection permanente\n}\n</code></pre>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#redirection-conditionnelle","title":"Redirection conditionnelle","text":"<pre><code>public function conditionalRedirect(bool $isAdmin): RedirectResponse\n{\n    if ($isAdmin) {\n        return $this-&gt;redirectToRoute('admin_dashboard');\n    }\n\n    return $this-&gt;redirectToRoute('user_dashboard');\n}\n</code></pre>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#1-route-introuvable","title":"1. Route introuvable","text":"<p>Erreur :</p> <pre><code>Unable to generate a URL for the named route \"nonexistent_route\" as such route does not exist.\n</code></pre> <p>Solution :</p> <ul> <li>V\u00e9rifiez que la route existe dans vos fichiers de configuration (<code>routes.yaml</code>, annotations, etc.).</li> <li> <p>Exemple :</p> <p><code>yaml user_profile:     path: /user/{id}     controller: App\\Controller\\UserController::profile</code></p> </li> </ul>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#2-parametres-de-route-manquants","title":"2. Param\u00e8tres de route manquants","text":"<p>Erreur :</p> <pre><code>Some mandatory parameters are missing (\"id\") to generate a URL for route \"user_profile\".\n</code></pre> <p>Solution :</p> <ul> <li>Passez les param\u00e8tres requis pour la route dans le tableau <code>$parameters</code>.</li> <li> <p>Exemple :</p> <p><code>php return $this-&gt;redirectToRoute('user_profile', ['id' =&gt; 123]);</code></p> </li> </ul>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#3-code-http-non-valide","title":"3. Code HTTP non valide","text":"<p>Erreur :</p> <pre><code>InvalidArgumentException: The HTTP status code \"600\" is not valid.\n</code></pre> <p>Solution :</p> <ul> <li>Utilisez un code HTTP valide, comme <code>301</code>, <code>302</code>, ou <code>303</code>.</li> </ul>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#conseils","title":"Conseils","text":"<ul> <li>Nommez vos routes de mani\u00e8re explicite : Utilisez des noms descriptifs (<code>user_profile</code>, <code>admin_dashboard</code>) pour faciliter leur utilisation.</li> <li>Redirection permanente (<code>301</code>) : Utilisez avec pr\u00e9caution, car les navigateurs mettent en cache cette redirection.</li> <li>V\u00e9rifiez les param\u00e8tres de la route : Utilisez <code>bin/console debug:router</code> pour lister les routes disponibles et leurs param\u00e8tres.</li> <li>Tests et Debugging : V\u00e9rifiez les redirections via le Web Profiler pour s'assurer qu'elles fonctionnent correctement.</li> </ul>"},{"location":"symfony/concepts/routing/redirectToRoute%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Symfony redirectToRoute()</li> <li>Liste des codes HTTP</li> </ul>"},{"location":"symfony/concepts/security/%28phpsfnsecurity%29/","title":"FOLDER","text":"<p>[[addFlash()]] [[denyAccessUnlessGranted()]] [[isGranted()]]</p>"},{"location":"symfony/concepts/security/addFlash%28%29/","title":"addFlash()","text":""},{"location":"symfony/concepts/security/addFlash%28%29/#documentation-addflash-en-symfony","title":"Documentation : <code>addFlash()</code> en Symfony","text":""},{"location":"symfony/concepts/security/addFlash%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>addFlash()</code> permet d'ajouter des messages flash (temporairement stock\u00e9s dans la session) qui peuvent \u00eatre affich\u00e9s \u00e0 l'utilisateur apr\u00e8s une redirection ou une action. Ces messages sont souvent utilis\u00e9s pour notifier des succ\u00e8s, des erreurs, ou des informations.</p>"},{"location":"symfony/concepts/security/addFlash%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>addFlash(string $type, string $message): void\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#parametres","title":"Param\u00e8tres","text":"<ol> <li> <p><code>$type</code> (string) :     La cat\u00e9gorie du message flash, souvent utilis\u00e9e pour d\u00e9finir son style ou son importance.     Exemples : <code>\"success\"</code>, <code>\"error\"</code>, <code>\"warning\"</code>, <code>\"info\"</code>.</p> </li> <li> <p><code>$message</code> (string) :     Le contenu du message \u00e0 afficher \u00e0 l'utilisateur.     Exemple : <code>\"Votre compte a \u00e9t\u00e9 cr\u00e9\u00e9 avec succ\u00e8s.\"</code>.</p> </li> </ol>"},{"location":"symfony/concepts/security/addFlash%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/security/addFlash%28%29/#ajouter-un-message-flash-simple","title":"Ajouter un message flash simple","text":"<pre><code>public function userCreated(): RedirectResponse\n{\n    $this-&gt;addFlash('success', 'Utilisateur cr\u00e9\u00e9 avec succ\u00e8s.');\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#ajouter-plusieurs-messages-flash","title":"Ajouter plusieurs messages flash","text":"<pre><code>public function multipleFlashes(): RedirectResponse\n{\n    $this-&gt;addFlash('success', 'Premier message de succ\u00e8s.');\n    $this-&gt;addFlash('info', 'Deuxi\u00e8me message d\u2019information.');\n    return $this-&gt;redirectToRoute('home');\n}\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#afficher-les-messages-flash-dans-twig","title":"Afficher les messages flash dans Twig","text":"<p>Dans le contr\u00f4leur :</p> <pre><code>public function deleteUser(): RedirectResponse\n{\n    $this-&gt;addFlash('error', 'Utilisateur supprim\u00e9.');\n    return $this-&gt;redirectToRoute('user_list');\n}\n</code></pre> <p>Dans le template Twig :</p> <pre><code>{% for type, messages in app.flashes %}\n    &lt;div class=\"flash-{{ type }}\"&gt;\n        {% for message in messages %}\n            &lt;p&gt;{{ message }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/div&gt;\n{% endfor %}\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#ajouter-un-message-flash-conditionnel","title":"Ajouter un message flash conditionnel","text":"<pre><code>public function conditionalFlash(bool $isSuccess): RedirectResponse\n{\n    if ($isSuccess) {\n        $this-&gt;addFlash('success', 'Op\u00e9ration r\u00e9ussie.');\n    } else {\n        $this-&gt;addFlash('error', 'Une erreur est survenue.');\n    }\n    return $this-&gt;redirectToRoute('dashboard');\n}\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#gestion-des-erreurs-courantes","title":"Gestion des erreurs courantes","text":""},{"location":"symfony/concepts/security/addFlash%28%29/#1-erreur-aucun-message-napparait","title":"1. Erreur : Aucun message n'appara\u00eet","text":"<p>Cause possible : Les messages flash ne sont pas affich\u00e9s dans Twig. Solution : Assurez-vous d'utiliser une boucle pour afficher les messages flash dans vos templates :</p> <pre><code>{% for type, messages in app.flashes %}\n    &lt;div class=\"flash-{{ type }}\"&gt;\n        {% for message in messages %}\n            &lt;p&gt;{{ message }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/div&gt;\n{% endfor %}\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#2-erreur-session-non-initialisee","title":"2. Erreur : Session non initialis\u00e9e","text":"<p>Cause possible : La session Symfony n'est pas activ\u00e9e. Solution : V\u00e9rifiez que la session est bien configur\u00e9e dans <code>framework.yaml</code> :</p> <pre><code>framework:\n    session:\n        enabled: true\n</code></pre>"},{"location":"symfony/concepts/security/addFlash%28%29/#conseils","title":"Conseils","text":"<ul> <li>Types standardis\u00e9s : Utilisez des types de messages coh\u00e9rents (<code>success</code>, <code>error</code>, <code>info</code>, <code>warning</code>) pour faciliter leur gestion dans Twig.</li> <li>Stylisation : Associez chaque type de message \u00e0 une classe CSS (<code>.flash-success</code>, <code>.flash-error</code>, etc.) pour une pr\u00e9sentation visuelle claire.</li> <li> <p>Messages multilingues : Int\u00e9grez les messages avec le composant de traduction pour g\u00e9rer plusieurs langues.     Exemple :</p> <p><code>php $this-&gt;addFlash('success', $translator-&gt;trans('message.account_created'));</code></p> </li> </ul>"},{"location":"symfony/concepts/security/addFlash%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Documentation officielle : Symfony addFlash()</li> <li>Composant Session Symfony</li> </ul>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/","title":"denyAccessUnlessGranted()","text":""},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#documentation-denyaccessunlessgranted-en-symfony","title":"Documentation : <code>denyAccessUnlessGranted()</code> en Symfony","text":""},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>denyAccessUnlessGranted()</code> est utilis\u00e9e dans Symfony pour emp\u00eacher l'acc\u00e8s \u00e0 une page ou \u00e0 une ressource si l'utilisateur n'a pas l'autorisation n\u00e9cessaire. Elle est g\u00e9n\u00e9ralement utilis\u00e9e dans les contr\u00f4leurs pour appliquer des r\u00e8gles d'acc\u00e8s bas\u00e9es sur des r\u00f4les ou des permissions.</p>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function denyAccessUnlessGranted(string $attribute, mixed $subject = null): void\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li> <p><code>$attribute</code> (string) :     Le nom de l'attribut ou de la permission \u00e0 v\u00e9rifier. Cela peut \u00eatre un r\u00f4le (par exemple <code>ROLE_ADMIN</code>) ou une action sp\u00e9cifique (comme <code>EDIT</code>, <code>VIEW</code>, etc.).</p> </li> <li> <p><code>$subject</code> (mixed, optionnel) :     L'entit\u00e9 ou l'objet sur lequel appliquer la v\u00e9rification d'acc\u00e8s. Ce param\u00e8tre est optionnel et permet de v\u00e9rifier l'autorisation pour un objet sp\u00e9cifique. Par d\u00e9faut, ce param\u00e8tre est <code>null</code> et la v\u00e9rification se fait sans objet sp\u00e9cifique.</p> </li> </ul>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#retour","title":"Retour","text":"<p>Cette m\u00e9thode ne retourne rien. Si l'utilisateur n'a pas l'autorisation n\u00e9cessaire, une exception <code>AccessDeniedException</code> est lev\u00e9e, emp\u00eachant ainsi l'acc\u00e8s \u00e0 la ressource.</p>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#exemple-1-verifier-un-role-specifique","title":"Exemple 1 : V\u00e9rifier un r\u00f4le sp\u00e9cifique","text":"<pre><code>// V\u00e9rifier si l'utilisateur poss\u00e8de le r\u00f4le ROLE_ADMIN\npublic function someAction()\n{\n    $this-&gt;denyAccessUnlessGranted('ROLE_ADMIN');\n\n    // Code de l'action si l'utilisateur a le r\u00f4le\n}\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#exemple-2-verifier-une-permission-sur-une-entite-specifique","title":"Exemple 2 : V\u00e9rifier une permission sur une entit\u00e9 sp\u00e9cifique","text":"<pre><code>// V\u00e9rifier si l'utilisateur a la permission d'\u00e9diter une entit\u00e9 Article\npublic function editAction($id)\n{\n    $article = $this-&gt;getDoctrine()-&gt;getRepository(Article::class)-&gt;find($id);\n\n    $this-&gt;denyAccessUnlessGranted('EDIT', $article);\n\n    // Code pour \u00e9diter l'article\n}\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#exemple-3-verifier-un-role-dans-une-action-de-controleur","title":"Exemple 3 : V\u00e9rifier un r\u00f4le dans une action de contr\u00f4leur","text":"<pre><code>// V\u00e9rifier si l'utilisateur est un utilisateur authentifi\u00e9 avec le r\u00f4le ROLE_USER\npublic function userAction()\n{\n    $this-&gt;denyAccessUnlessGranted('ROLE_USER');\n\n    // Code \u00e0 ex\u00e9cuter si l'utilisateur est authentifi\u00e9 avec ROLE_USER\n}\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#1-erreur-utilisation-dun-role-ou-dun-attribut-inexistant","title":"1. Erreur : Utilisation d'un r\u00f4le ou d'un attribut inexistant","text":"<p>Cause : Si vous essayez de v\u00e9rifier un r\u00f4le ou un attribut qui n'existe pas dans votre configuration de s\u00e9curit\u00e9, Symfony renverra une erreur. Solution : Assurez-vous que le r\u00f4le ou l'attribut que vous v\u00e9rifiez est bien d\u00e9fini dans la configuration de s\u00e9curit\u00e9.</p> <pre><code>// Erreur si 'ROLE_UNKNOWN' n'existe pas dans la configuration de s\u00e9curit\u00e9\n$this-&gt;denyAccessUnlessGranted('ROLE_UNKNOWN');\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#2-erreur-le-sujet-nest-pas-du-bon-type","title":"2. Erreur : Le sujet n'est pas du bon type","text":"<p>Cause : Si l'objet pass\u00e9 en param\u00e8tre <code>$subject</code> n'est pas celui attendu, la v\u00e9rification d'acc\u00e8s pourrait \u00e9chouer ou g\u00e9n\u00e9rer des erreurs inattendues. Solution : V\u00e9rifiez que l'objet pass\u00e9 est du type attendu par la r\u00e8gle de s\u00e9curit\u00e9.</p> <pre><code>$article = $this-&gt;getDoctrine()-&gt;getRepository(Article::class)-&gt;find($id);\n\n// Erreur si l'attribut 'EDIT' n'est pas d\u00e9fini pour l'entit\u00e9 Article\n$this-&gt;denyAccessUnlessGranted('EDIT', 'SomeNonExistentEntity');\n</code></pre>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Utiliser avec pr\u00e9caution dans les contr\u00f4leurs : <code>denyAccessUnlessGranted()</code> est une m\u00e9thode puissante pour appliquer des contr\u00f4les d'acc\u00e8s au niveau du contr\u00f4leur. Toutefois, elle ne doit \u00eatre utilis\u00e9e que pour des contr\u00f4les d'acc\u00e8s simples. Pour des contr\u00f4les plus complexes, vous devriez envisager des m\u00e9canismes de s\u00e9curit\u00e9 suppl\u00e9mentaires comme des r\u00e8gles personnalis\u00e9es ou des voter.</p> </li> <li> <p>G\u00e9rer les exceptions de mani\u00e8re appropri\u00e9e :     Lorsque cette m\u00e9thode \u00e9choue, elle lance une exception <code>AccessDeniedException</code>. Assurez-vous que vous g\u00e9rez cette exception de mani\u00e8re appropri\u00e9e (par exemple, en redirigeant l'utilisateur vers une page d'erreur ou de connexion).</p> </li> <li> <p>Utiliser des permissions sur des entit\u00e9s sp\u00e9cifiques :     Si vous v\u00e9rifiez une permission sur un objet, assurez-vous que la permission (<code>EDIT</code>, <code>VIEW</code>, etc.) est correctement configur\u00e9e dans votre syst\u00e8me de s\u00e9curit\u00e9 pour l'entit\u00e9 ou l'objet concern\u00e9.</p> </li> <li> <p>V\u00e9rifications dans les actions sensibles :     Appliquez des v\u00e9rifications d'acc\u00e8s dans les actions sensibles de vos contr\u00f4leurs o\u00f9 l'acc\u00e8s doit \u00eatre strictement contr\u00f4l\u00e9. Par exemple, des actions telles que la modification ou la suppression d'une ressource doivent toujours \u00eatre prot\u00e9g\u00e9es par des contr\u00f4les d'acc\u00e8s appropri\u00e9s.</p> </li> <li> <p>Tests de r\u00f4les et de permissions :     Assurez-vous de tester vos r\u00f4les et permissions avant de d\u00e9ployer votre application en production. Vous pouvez \u00e9galement utiliser des outils comme PHPUnit ou Symfony Panther pour automatiser ces tests.</p> </li> </ol>"},{"location":"symfony/concepts/security/denyAccessUnlessGranted%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Security</li> <li>Symfony Access Control</li> <li>Symfony Roles and Permissions</li> <li>Symfony Voter</li> </ul>"},{"location":"symfony/concepts/security/isGranted%28%29/","title":"isGranted()","text":""},{"location":"symfony/concepts/security/isGranted%28%29/#documentation-isgranted-en-symfony","title":"Documentation : <code>isGranted()</code> en Symfony","text":""},{"location":"symfony/concepts/security/isGranted%28%29/#description","title":"Description","text":"<p>La m\u00e9thode <code>isGranted()</code> est utilis\u00e9e dans Symfony pour v\u00e9rifier si l'utilisateur actuel poss\u00e8de une certaine autorisation ou un r\u00f4le pour acc\u00e9der \u00e0 une ressource ou effectuer une action. Elle est g\u00e9n\u00e9ralement utilis\u00e9e dans les contr\u00f4leurs, les services ou les templates pour appliquer des contr\u00f4les d'acc\u00e8s.</p>"},{"location":"symfony/concepts/security/isGranted%28%29/#syntaxe","title":"Syntaxe","text":"<pre><code>public function isGranted(string $attribute, mixed $subject = null): bool\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#parametres","title":"Param\u00e8tres","text":"<ul> <li> <p><code>$attribute</code> (string) :     Le nom de l'attribut ou de la permission que vous souhaitez v\u00e9rifier. Cela peut \u00eatre un r\u00f4le (par exemple <code>ROLE_ADMIN</code>), ou une action sp\u00e9cifique comme <code>VIEW</code>, <code>EDIT</code>, etc.</p> </li> <li> <p><code>$subject</code> (mixed, optionnel) :     L'entit\u00e9 ou l'objet concern\u00e9 par l'attribut. Ce param\u00e8tre est optionnel et permet de v\u00e9rifier l'autorisation pour un objet sp\u00e9cifique (par exemple, une ressource que l'utilisateur souhaite modifier). Si vous ne sp\u00e9cifiez pas de sujet, la v\u00e9rification se fait simplement sur l'attribut.</p> </li> </ul>"},{"location":"symfony/concepts/security/isGranted%28%29/#retour","title":"Retour","text":"<p>La m\u00e9thode retourne un bool\u00e9en :</p> <ul> <li><code>true</code> si l'utilisateur poss\u00e8de l'autorisation ou le r\u00f4le sp\u00e9cifi\u00e9.</li> <li><code>false</code> sinon.</li> </ul>"},{"location":"symfony/concepts/security/isGranted%28%29/#exemples","title":"Exemples","text":""},{"location":"symfony/concepts/security/isGranted%28%29/#exemple-1-verifier-si-lutilisateur-a-un-role-specifique","title":"Exemple 1 : V\u00e9rifier si l'utilisateur a un r\u00f4le sp\u00e9cifique","text":"<pre><code>// V\u00e9rifier si l'utilisateur a le r\u00f4le ROLE_ADMIN\nif ($this-&gt;isGranted('ROLE_ADMIN')) {\n    // L'utilisateur a le r\u00f4le ROLE_ADMIN, on peut lui accorder l'acc\u00e8s\n} else {\n    // L'utilisateur n'a pas le r\u00f4le, refuser l'acc\u00e8s\n}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#exemple-2-verifier-une-permission-sur-une-entite-specifique","title":"Exemple 2 : V\u00e9rifier une permission sur une entit\u00e9 sp\u00e9cifique","text":"<pre><code>// V\u00e9rifier si l'utilisateur peut \u00e9diter une entit\u00e9 Article\n$article = $this-&gt;getDoctrine()-&gt;getRepository(Article::class)-&gt;find($id);\n\nif ($this-&gt;isGranted('EDIT', $article)) {\n    // L'utilisateur est autoris\u00e9 \u00e0 \u00e9diter cet article\n} else {\n    // L'utilisateur n'a pas la permission d'\u00e9diter cet article\n}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#exemple-3-verifier-un-role-et-un-attribut-dans-une-route-ou-un-controleur","title":"Exemple 3 : V\u00e9rifier un r\u00f4le et un attribut dans une route ou un contr\u00f4leur","text":"<pre><code>// V\u00e9rifier si l'utilisateur est autoris\u00e9 \u00e0 acc\u00e9der \u00e0 la route\npublic function someAction()\n{\n    if (!$this-&gt;isGranted('VIEW', 'SomeEntity')) {\n        throw $this-&gt;createAccessDeniedException('You do not have permission to view this page.');\n    }\n\n    // Code pour afficher la page\n}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#exemple-4-verification-dans-un-template-twig","title":"Exemple 4 : V\u00e9rification dans un template Twig","text":"<pre><code>{% if is_granted('ROLE_ADMIN') %}\n    &lt;a href=\"{{ path('admin_dashboard') }}\"&gt;Admin Dashboard&lt;/a&gt;\n{% else %}\n    &lt;p&gt;You do not have access to the admin dashboard.&lt;/p&gt;\n{% endif %}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#cas-derreur-courants","title":"Cas d'erreur courants","text":""},{"location":"symfony/concepts/security/isGranted%28%29/#1-erreur-utilisation-dun-attribut-inexistant","title":"1. Erreur : Utilisation d'un attribut inexistant","text":"<p>Cause : Si vous essayez de v\u00e9rifier un r\u00f4le ou un attribut qui n'existe pas, Symfony renverra une erreur. Solution : Assurez-vous que l'attribut ou le r\u00f4le que vous utilisez est correctement d\u00e9fini et qu'il existe dans la configuration de votre syst\u00e8me de s\u00e9curit\u00e9.</p> <pre><code>// Erreur si 'ROLE_UNKNOWN' n'existe pas dans la configuration de s\u00e9curit\u00e9\nif ($this-&gt;isGranted('ROLE_UNKNOWN')) {\n    // Cela g\u00e9n\u00e8re une erreur\n}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#2-erreur-le-sujet-nest-pas-du-bon-type","title":"2. Erreur : Le sujet n'est pas du bon type","text":"<p>Cause : Si vous passez un objet incorrect dans le param\u00e8tre <code>$subject</code> (par exemple, une entit\u00e9 mal configur\u00e9e), cela pourrait entra\u00eener un comportement inattendu ou une erreur. Solution : Assurez-vous que le sujet pass\u00e9 \u00e0 <code>isGranted()</code> correspond au type attendu par votre logique d'autorisation.</p> <pre><code>$article = $this-&gt;getDoctrine()-&gt;getRepository(Article::class)-&gt;find($id);\n\n// Erreur si l'attribut 'EDIT' n'est pas d\u00e9fini pour l'entit\u00e9 Article\nif ($this-&gt;isGranted('EDIT', 'SomeNonExistentEntity')) {\n    // Cela g\u00e9n\u00e8re une erreur\n}\n</code></pre>"},{"location":"symfony/concepts/security/isGranted%28%29/#conseils","title":"Conseils","text":"<ol> <li> <p>Utiliser des r\u00f4les standards :     Lorsque vous g\u00e9rez des r\u00f4les, il est conseill\u00e9 d'utiliser des r\u00f4les standards comme <code>ROLE_USER</code>, <code>ROLE_ADMIN</code>, ou des r\u00f4les personnalis\u00e9s que vous d\u00e9finissez dans la configuration de s\u00e9curit\u00e9. Assurez-vous que ces r\u00f4les sont bien mapp\u00e9s dans votre syst\u00e8me de s\u00e9curit\u00e9.</p> </li> <li> <p>V\u00e9rification dans les contr\u00f4leurs et les templates :     Utilisez <code>isGranted()</code> pour appliquer des contr\u00f4les d'acc\u00e8s dans les contr\u00f4leurs, mais \u00e9galement dans les templates Twig pour masquer des \u00e9l\u00e9ments d'interface (comme des liens, des boutons) en fonction des r\u00f4les de l'utilisateur.</p> </li> <li> <p>Cr\u00e9er des permissions personnalis\u00e9es :     Si vous avez besoin de v\u00e9rifier des actions plus fines sur des entit\u00e9s sp\u00e9cifiques (comme <code>EDIT</code> ou <code>DELETE</code> sur une ressource particuli\u00e8re), vous pouvez d\u00e9finir des r\u00e8gles d'autorisation personnalis\u00e9es dans la configuration de s\u00e9curit\u00e9.</p> </li> <li> <p>G\u00e9rer les exceptions de s\u00e9curit\u00e9 :     En cas d'acc\u00e8s non autoris\u00e9, vous pouvez lancer une exception comme <code>AccessDeniedException</code> pour g\u00e9rer les erreurs d'acc\u00e8s et rediriger l'utilisateur vers une page d'erreur ou de connexion.</p> </li> <li> <p>Distinguer les r\u00f4les et les attributs : <code>isGranted()</code> permet de v\u00e9rifier les r\u00f4les de l'utilisateur ou des actions sp\u00e9cifiques, mais il est important de bien comprendre la diff\u00e9rence entre un r\u00f4le (comme <code>ROLE_USER</code>) et une permission sur une entit\u00e9 (comme <code>EDIT</code> sur une ressource).</p> </li> </ol>"},{"location":"symfony/concepts/security/isGranted%28%29/#ressources-complementaires","title":"Ressources compl\u00e9mentaires","text":"<ul> <li>Symfony Security</li> <li>Symfony Roles and Permissions</li> <li>Symfony Access Control</li> </ul>"}]}